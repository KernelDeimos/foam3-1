// net.nanopay.bank.BankAccountInstitutionDAOTest
p({"class":"foam.nanos.test.Test","passed":0,"failed":0,"id":"net.nanopay.bank.BankAccountInstitutionDAOTest","enabled":true,"description":"","lastRun":"2018-08-03T15:20:18.484Z","lastDuration":1487,"server":true,"status":1,"code":"institutionNumber = \"net.nanopay.bank.BankAccountInstitutionTest\";\nid = (foam.dao.DAO) x.get(\"institutionDAO\");\nid = id.limit(1);\nid = id.where(\nfoam.mlang.MLang.EQ(net.nanopay.payment.Institution.INSTITUTION_NUMBER, institutionNumber)\n);\nil = ((foam.dao.ArraySink) id.select(new foam.dao.ArraySink())).getArray();\nif ( il.size() > 0 ) {\nprint(\"cleaning up previous run\");\nid.remove(il.get(0));\n};\n\nbd = (foam.dao.DAO) x.get(\"localAccountDAO\");\nbd = bd.where(\nfoam.mlang.MLang.EQ(net.nanopay.account.Account.NAME, institutionNumber)\n);\nbl = ((foam.dao.ArraySink) bd.select(new foam.dao.ArraySink())).getArray();\nif ( bl.size() > 0 ) {\nbd.remove(bl.get(0));\nprint(\"cleaning up previous run.\");\n};\n\nu = (foam.nanos.auth.User) x.get(\"user\");\nb = new net.nanopay.bank.CABankAccount();\nb.setName(institutionNumber);\nb.setOwner(u.getId());\nb.setInstitutionNumber(institutionNumber);\nb.setAccountNumber(institutionNumber);\nb.setStatus(net.nanopay.bank.BankAccountStatus.VERIFIED);\n\ntest(b.findInstitution(x) == null, \"institution should not exist\");\n\nb = bd.put(b);\ntest( ! String.valueOf(b.getInstitution()).equals(institutionNumber), \"institution reference should not equal number\"); \nlist = ((foam.dao.ArraySink) id.select(new foam.dao.ArraySink())).getArray();\ntest( list.size() == 1, \"institution created\");\ni = list.get(0);\ntest( i.getInstitutionNumber().equals(institutionNumber), \"matching institutionNumber\");\n","output":"cleaning up previous run\ncleaning up previous run.\nSUCCESS: institution should not exist\nSUCCESS: institution reference should not equal number\nSUCCESS: institution created\nSUCCESS: matching institutionNumber\n","notes":""})

// net.nanopay.bank.PreventDuplicateBankAccountDAOTest
p({"class":"foam.nanos.test.Test","passed":2,"id":"net.nanopay.bank.PreventDuplicateBankAccountDAOTest","lastRun":"2018-08-24T15:37:12.308Z","lastDuration":12,"code":"name = \"net.nanopay.bank.PreventDuplicateBankAccountDAOTest\";\naccountNumber = \"123456789\";\n\nbd = (foam.dao.DAO) x.get(\"localAccountDAO\");\n\nbd = bd.where(\nfoam.mlang.MLang.EQ(net.nanopay.account.Account.NAME, name)\n);\nbl = ((foam.dao.ArraySink) bd.select(new foam.dao.ArraySink())).getArray();\nif ( bl.size() > 0 ) {\nprint(\"cleaning up previous run:\" +bl.size());\nbd.remove(bl.get(0));\n};\n\nu = (foam.nanos.auth.User) x.get(\"user\");\nb = new net.nanopay.bank.CABankAccount();\nb.setName(name);\nb.setOwner(u.getId());\nb.setAccountNumber(\"123456789\");\nb.setInstitutionNumber(\"123\");\nb.setBranchId(\"12345\");\nb.setStatus(net.nanopay.bank.BankAccountStatus.VERIFIED);\n\nb = ((foam.dao.DAO) x.get(\"localAccountDAO\")).put(b);\nlist = ((foam.dao.ArraySink) bd.select(new foam.dao.ArraySink())).getArray();\ntest( list.size() == 1, \"bank created\");\n\nb = new net.nanopay.bank.CABankAccount();\nb.setName(name);\nb.setOwner(u.getId());\nb.setAccountNumber(\"123456789\");\nb.setInstitutionNumber(\"123\");\nb.setBranchId(\"12345\");\nb.setStatus(net.nanopay.bank.BankAccountStatus.VERIFIED);\ntry {\nb = ((foam.dao.DAO) x.get(\"accountDAO\")).put(b);\nlist = ((foam.dao.ArraySink) bd.select(new foam.dao.ArraySink())).getArray();\ntest( list.size() == 1, \"duplicate bank not created\");\n} catch (RuntimeException e) {\nprint(e.getMessage());\ntest(e.getMessage().equals(\"Bank account with same details already registered\"), \"duplicate bank not created\");\n}\n","output":"cleaning up previous run:1\nSUCCESS: bank created\nBank account with same details already registered\nSUCCESS: duplicate bank not created\n"})
