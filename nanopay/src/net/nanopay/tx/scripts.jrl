p({
  "class":"foam.nanos.script.Script",
  "id":"plannerIntuit",
  "code":`
    import net.nanopay.tx.planner.GenericCIPlanner;
    import net.nanopay.tx.planner.GenericCOPlanner;
    import net.nanopay.tx.planner.PlannerGroup;
    import foam.dao.ArraySink;
    import static foam.mlang.MLang.*;
    import foam.nanos.ruler.Rule;
    // optionally allow for custom clearing time
    instantComplete = true;
    // turn off all planners
    ruleGroupDAO_ = x.get("ruleGroupDAO");
    ruleDAO_ = x.get("ruleDAO");
    pgs =  ruleGroupDAO_.where(INSTANCE_OF(PlannerGroup.class)).select(new ArraySink()).getArray();
    for ( p : pgs ) {
      planner = p.fclone();
      if (planner.getEnabled() == true)
        planner.setEnabled(false);
      if (planner.getId().equals("SandBoxPlanner"))
        planner.setEnabled(true);
      try {
        ruleGroupDAO_.put(planner);
      }
      catch ( e ) {
        logger_.error("failed to disable planner group:", p);
      }
    }
    //add generic planners
    print("putting planners..");
    r1 = ruleDAO_.find(EQ(Rule.NAME, "Digital Transaction Planner")).fclone();
    r2 = ruleDAO_.find(EQ(Rule.NAME, "Generic Cash In Planner")).fclone();
    r3 = ruleDAO_.find(EQ(Rule.NAME, "Bank to Bank Planner")).fclone();
    r4 = ruleDAO_.find(EQ(Rule.NAME, "Generic Cash Out Planner")).fclone();
    r1.setRuleGroup("SandBoxPlanner");
    r2.setRuleGroup("SandBoxPlanner");
    r3.setRuleGroup("SandBoxPlanner");
    r4.setRuleGroup("SandBoxPlanner");
    r1.setEnabled(true);
    r2.setEnabled(true);
    r3.setEnabled(true);
    r4.setEnabled(true);
    if(instantComplete == false) {
      r2.setInstantComplete(false);
      r4.setInstantComplete(false);
    }
    else{
       r2.setInstantComplete(true);
       r4.setInstantComplete(true);
    }
    ruleDAO_.put(r1);
    ruleDAO_.put(r2);
    ruleDAO_.put(r3);
    ruleDAO_.put(r4);
    print("done");
  `
})
