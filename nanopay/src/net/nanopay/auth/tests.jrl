p({"class":"net.nanopay.auth.PublicUserInfoDAOTest","id":"PublicUserInfoDAOTest"})
//p({"class":"net.nanopay.auth.ExternalInvoiceTokenTest","id":"ExternalInvoiceTokenTest"})
p({"class":"foam.nanos.test.Test","id":"Prevent privilege escalation tests for userUserDAO","code":"import foam.core.X;\nimport foam.dao.DAO;\nimport foam.nanos.auth.AuthorizationException;\nimport foam.nanos.auth.Group;\nimport foam.nanos.auth.GroupPermissionJunction;\nimport foam.nanos.auth.Permission;\nimport foam.nanos.auth.User;\nimport foam.util.Auth;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nbareUserDAO = (DAO) x.get(\"bareUserDAO\");\nuserDAO = (DAO) x.get(\"userUserDAO\");\ngroupDAO = (DAO) x.get(\"groupDAO\");\npermissionDAO = (DAO) x.get(\"permissionDAO\");\ngroupPermissionJunctionDAO = (DAO) x.get(\"groupPermissionJunctionDAO\");\nlogger = (foam.nanos.logger.Logger) x.get(\"logger\");\nlogger = new foam.nanos.logger.PrefixLogger(new String[] {\"Prevent privilege escalation tests for userUserDAO\"}, logger);\n\nString generateId() {\n  return java.util.UUID.randomUUID().toString();\n}\n\n// Generate a test user and a group with the given permissions for them to be in.\nX generateTestUser(List permissionIds) {\n  String groupId = generateId();\n  group = new Group.Builder(x)\n    .setId(groupId)\n    .setParent(\"basicUser\")\n    .build();\n\n  groupDAO.where(foam.mlang.MLang.EQ(Group.ID, groupId)).removeAll();\n  groupDAO.put(group);\n\n  groupPermissionJunctionDAO.where(foam.mlang.MLang.EQ(GroupPermissionJunction.SOURCE_ID, groupId)).removeAll();\n\n  for ( String id : permissionIds ) {\n    permissionDAO.where(foam.mlang.MLang.EQ(Permission.ID, id)).removeAll();\n    permissionDAO.put(new Permission.Builder(x).setId(id).build());\n    junction = new GroupPermissionJunction.Builder(x)\n      .setSourceId(groupId)\n      .setTargetId(id)\n      .build();\n    groupPermissionJunctionDAO.put(junction);\n  }\n\n  // Create a test user to sudo to.\n  bareUserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, \"ppet@example.com\")).removeAll();\n  user = new User.Builder(x)\n    .setEmail(\"ppet@example.com\")\n    .setGroup(groupId)\n    .build();\n  user = bareUserDAO.put(user);\n  return Auth.sudo(x, user);\n}\n\nvoid cleanUp(X testContext) {\n  Group g = testContext.get(\"group\");\n\n  // Remove the permissions.\n  groupPermissionJunctionDAO.where(foam.mlang.MLang.EQ(GroupPermissionJunction.SOURCE_ID, g.getId())).removeAll();\n\n  // Remove the group.\n  groupDAO.remove(g);\n\n  // Remove the user.\n  testUser = testContext.get(\"user\");\n  bareUserDAO.remove(testUser);\n}\n\n// Try to create a group when you don't have the 'create' permission.\nvoid createGroupWithoutPermissionThrows() {\n  logger.info(new Object[] {\"createGroupWithoutPermissionThrows\"});\n  // Create a group for the user to put.\n  String groupId = generateId();\n  Group g = new Group.Builder(x).setId(groupId).build();\n\n  // Create a test user.\n  List permissionIds = new ArrayList();\n  X userContext = generateTestUser(permissionIds);\n\n  try {\n    // Try to create the group.\n    g = groupDAO.inX(userContext).put(g);\n\n    // If the put didn't throw, then this test failed.\n    test(false, \"Users cannot create a group without the 'group.create.<id>' permission.\");\n\n    // Clean up.\n    groupDAO.remove(g);\n  } catch (AuthorizationException e) {\n    test(e.getMessage().equals(\"You do not have permission to create this group.\"), \"Users cannot create a group without the 'group.create.<id>' permission.\");\n  }\n\n  cleanUp(userContext);\n}\n\n// Try to add a permission you don't have to a group.\nvoid addNewPermissionThrows() {\n  logger.info(new Object[] {\"addNewPermissionThrows\"});\n  // Create a group for the user to put.\n  String groupId = generateId();\n  Group g = new Group.Builder(x).setId(groupId).build();\n\n  // Create a test user.\n  List permissionIds = new ArrayList();\n  permissionIds.add(\"group.create.*\");\n  X userContext = generateTestUser(permissionIds);\n\n  // Create the group.\n  g = groupDAO.inX(userContext).put(g);\n\n  try {\n    // Try to add a permission to the group that the user doesn't have.\n    g.getPermissions(userContext).add(new Permission.Builder(userContext).setId(\"*\").build());\n\n    // If the put didn't throw, then this test failed.\n    test(false, \"Users cannot add a permission that they don't have to a group.\");\n\n    // Clean up.\n    groupDAO.remove(g);\n  } catch (AuthorizationException e) {\n    test(e.getMessage().equals(\"You do not have permission to update that group.\"), \"Users cannot add a permission that they don't have to a group.\");\n  }\n\n  cleanUp(userContext);\n}\n\n\n// Try to create a group with \"admin\" as the parent.\nvoid addGroupWithAdminParentThrows() {\n  logger.info(new Object[] {\"addGroupWithAdminParentThrows\"});\n  // Create a group for the user to put.\n  String groupId = generateId();\n  Group g = new Group.Builder(x)\n    .setId(groupId)\n    .setParent(\"admin\")\n    .build();\n\n  // Create a test user.\n  List permissionIds = new ArrayList();\n  permissionIds.add(\"group.create.*\");\n  X userContext = generateTestUser(permissionIds);\n\n  try {\n    // Try to create the group.\n    g = groupDAO.inX(userContext).put(g);\n\n    // If the put didn't throw, then this test failed.\n    test(false, \"Users cannot set the parent of a group to a group containing a permission that isn't implied by one they already have.\");\n\n    // Clean up.\n    groupDAO.remove(g);\n  } catch (AuthorizationException e) {\n    test(e.getMessage().equals(\"Permission denied. You cannot change the parent of a group if doing so grants that group permissions that you do not have.\"), \"Users cannot set the parent of a group to a group containing a permission that isn't implied by one they already have.\");\n  }\n\n  cleanUp(userContext);\n}\n\n\n// Try to update a group without permission.\nvoid updateGroupWithoutPermissionThrows() {\n  logger.info(new Object[] {\"updateGroupWithoutPermissionThrows\"});\n  // Create a group for the user to put.\n  String groupId = generateId();\n  Group g = new Group.Builder(x)\n    .setId(groupId)\n    .build();\n\n  // Create a test user.\n  List permissionIds = new ArrayList();\n  permissionIds.add(\"group.create.*\");\n  X userContext = generateTestUser(permissionIds);\n\n  // Create the group.\n  g = groupDAO.inX(userContext).put(g);\n\n  try {\n    // Try to update the group.\n    g = (Group) g.fclone();\n    g.setParent(\"basicUser\");\n    g = groupDAO.inX(userContext).put(g);\n\n    // If the put didn't throw, then this test failed.\n    test(false, \"Users cannot update groups unless they have the appropriate update permission.\");\n\n    // Clean up.\n    groupDAO.remove(g);\n  } catch (AuthorizationException e) {\n    test(e.getMessage().equals(\"You don't have permission to update that group.\"), \"Users cannot update groups unless they have the appropriate update permission.\");\n  }\n\n  cleanUp(userContext);\n}\n\n\n// Try to update a group's parent to admin.\nvoid updateGroupParentToAdminThrows() {\n  logger.info(new Object[] {\"updateGroupParentToAdminThrows\"});\n  // Create a group for the user to put.\n  String groupId = generateId();\n  Group g = new Group.Builder(x)\n    .setId(groupId)\n    .build();\n\n  // Create a test user.\n  List permissionIds = new ArrayList();\n  permissionIds.add(\"group.create.*\");\n  permissionIds.add(\"group.update.\" + groupId);\n  X userContext = generateTestUser(permissionIds);\n\n  // Create the group.\n  g = groupDAO.inX(userContext).put(g);\n\n  try {\n    // Try to update the group's parent to admin.\n    g = (Group) g.fclone();\n    g.setParent(\"admin\");\n    g = groupDAO.inX(userContext).put(g);\n\n    // If the put didn't throw, then this test failed.\n    test(false, \"Users cannot update the parent of a group to a group containing a permission that isn't implied by one they already have.\");\n\n    // Clean up.\n    groupDAO.remove(g);\n  } catch (AuthorizationException e) {\n    test(e.getMessage().equals(\"Permission denied. You cannot change the parent of a group if doing so grants that group permissions that you do not have.\"), \"Users cannot set the parent of a group to a group containing a permission that isn't implied by one they already have.\");\n  }\n\n  cleanUp(userContext);\n}\n\n// Try to create a user in the admin group.\nvoid createUserInAdminGroupThrows() {\n  logger.info(new Object[] {\"createUserInAdminGroupThrows\"});\n  TEST_MESSAGE = \"Users cannot create users in a group to a group containing a permission that isn't implied by one they already have.\";\n\n  // Create a user for the test user to put.\n  User u = new User.Builder(x)\n    .setGroup(\"admin\")\n    .setEmail(\"ppet+admin@example.com\")\n    .setDesiredPassword(\"!@#$ppet1234\")\n    .build();\n\n  // Create a test user.\n  List permissionIds = new ArrayList();\n  X userContext = generateTestUser(permissionIds);\n\n  try {\n    // Try to create a user in the admin group.\n    u = (User) userDAO.inX(userContext).put(u);\n\n    print(u.getId());\n\n    // If the put didn't throw, then this test failed.\n    test(false, TEST_MESSAGE);\n\n    // Clean up.\n    bareUserDAO.remove(u);\n  } catch (AuthorizationException e) {\n    passed = e.getMessage().equals(\"You do not have permission to set that user's group to 'admin'.\");\n    test(passed, TEST_MESSAGE);\n    if ( ! passed ) {\n      print(\"Error message mismatch. Actual was: \" + e.getMessage());\n    }\n  }\n\n  test(null == bareUserDAO.find(foam.mlang.MLang.EQ(foam.nanos.auth.User.EMAIL, \"ppet+admin@example.com\")), \"User was not created with that email address.\");\n  cleanUp(userContext);\n}\n\n// Try to update a user's group to \"admin\".\nupdateUserGroupToAdminThrows() {\n  logger.info(new Object[] {\"updateUserGroupToAdminThrows\"});\n  TEST_MESSAGE = \"Users cannot update another user's group to a group containing a permission that isn't implied by one they already have.\";\n\n  // Create a user for the test user to put.\n  User u = new User.Builder(x)\n    .setGroup(\"basicUser\")\n    .setEmail(\"ppet+admin@example.com\")\n    .setFirstName(\"ppet\")\n    .setLastName(\"ppet\")\n    .setDesiredPassword(\"!@#$ppet1234\")\n    .build();\n\n  // Create a test user.\n  List permissionIds = new ArrayList();\n  permissionIds.add(\"group.update.basicUser\");\n  permissionIds.add(\"user.update.*\");\n  X userContext = generateTestUser(permissionIds);\n\n  // Create a user in the basicUser group.\n  u = userDAO.inX(userContext).put(u);\n\n  try {\n    // Try to update the user's group to \"admin\".\n    u = (User) u.fclone();\n    u.setGroup(\"admin\");\n    u = userDAO.inX(userContext).put(u);\n\n    // If the put didn't throw, then this test failed.\n    test(false, TEST_MESSAGE);\n  } catch (AuthorizationException e) {\n    passed = e.getMessage().equals(\"You do not have permission to change that user's group to 'admin'.\");\n    test(passed, TEST_MESSAGE);\n    if ( ! passed ) {\n      print(\"Error message mismatch. Actual was: \" + e.getMessage());\n    }\n  }\n\n  // Clean up.\n  bareUserDAO.remove(u);\n  cleanUp(userContext);\n}\n\n// Try to update your own group.\nupdateOwnGroupThrows() {\n  logger.info(new Object[] {\"updateOwnGroupThrows\"});\n  TEST_MESSAGE = \"Users cannot update their own group.\";\n\n  // Create a test user.\n  List permissionIds = new ArrayList();\n  X userContext = generateTestUser(permissionIds);\n\n  try {\n    // Try to update the user's group to \"admin\".\n    u = (User) userContext.get(\"user\").fclone();\n    u.setGroup(\"admin\");\n    u = userDAO.inX(userContext).put(u);\n\n    // If the put didn't throw, then this test failed.\n    test(false, TEST_MESSAGE);\n  } catch (AuthorizationException e) {\n    passed = e.getMessage().equals(\"You cannot change your own group.\");\n    test(passed, TEST_MESSAGE);\n    if ( ! passed ) {\n      print(\"Error message mismatch. Actual was: \" + e.getMessage());\n    }\n  }\n\n  // Clean up.\n  cleanUp(userContext);\n}\n\n// Try to create a permission without permission to do so.\ncreatePermissionWithoutPermissionThrows() {\n  logger.info(new Object[] {\"createPermissionWithoutPermissionThrows\"});\n  TEST_MESSAGE = \"Cannot create permissions without the appropriate 'create' permission.\";\n\n  // Create a test user.\n  List permissionIds = new ArrayList();\n  X userContext = generateTestUser(permissionIds);\n\n  // Create a permission for the test user to put.\n  Permission p = new Permission.Builder(x)\n    .setId(\"ppet\")\n    .build();\n\n  try {\n    // Try to create a permission.\n    p = permissionDAO.inX(userContext).put(p);\n\n    // If the put didn't throw, then this test failed.\n    test(false, TEST_MESSAGE);\n\n    // Clean up.\n    permissionDAO.remove(p);\n  } catch (AuthorizationException e) {\n    passed = e.getMessage().equals(\"Permission denied.\");\n    test(passed, TEST_MESSAGE);\n    if ( ! passed ) {\n      print(\"Error message mismatch. Actual was: \" + e.getMessage());\n    }\n  }\n\n  // Clean up.\n  cleanUp(userContext);\n}\n\n\n// Try to update a permission without permission to do so.\nupdatePermissionWithoutPermissionThrows() {\n  logger.info(new Object[] {\"updatePermissionWithoutPermissionThrows\"});\n  TEST_MESSAGE = \"Cannot update permissions without the appropriate 'update' permission.\";\n\n  // Create a test user.\n  List permissionIds = new ArrayList();\n  permissionIds.add(\"permission.create\");\n  X userContext = generateTestUser(permissionIds);\n\n  // Create a permission for the test user to update.\n  Permission p = new Permission.Builder(x)\n    .setId(\"ppet\")\n    .build();\n\npermissionDAO.remove(p);\n  // Create the permission.\n  p = (Permission) permissionDAO.inX(userContext).put(p).fclone();\n\n  try {\n    // Try to update the permission.\n    p.setDescription(\"Updated\");\n    p = permissionDAO.inX(userContext).put(p);\n\n    // If the put didn't throw, then this test failed.\n    test(false, TEST_MESSAGE);\n  } catch (AuthorizationException e) {\n    passed = e.getMessage().equals(\"Permission denied.\");\n    test(passed, TEST_MESSAGE);\n    if ( ! passed ) {\n      print(\"Error message mismatch. Actual was: \" + e.getMessage());\n    }\n  }\n\n  // Clean up.\n  permissionDAO.remove(p);\n  cleanUp(userContext);\n}\n\n\n// Try to delete a permission without permission to do so.\ndeletePermissionWithoutPermissionThrows() {\n  logger.info(new Object[] {\"deletePermissionWithoutPermissionThrows\"});\n  TEST_MESSAGE = \"Cannot delete permissions without the appropriate 'delete' permission.\";\n\n  // Create a test user.\n  List permissionIds = new ArrayList();\n  permissionIds.add(\"permission.create\");\n  X userContext = generateTestUser(permissionIds);\n\n  // Create a permission for the test user to update.\n  Permission p = new Permission.Builder(x)\n    .setId(\"ppet\")\n    .build();\n\npermissionDAO.remove(p);\n  // Create the permission.\n  p = (Permission) permissionDAO.inX(userContext).put(p).fclone();\n\n  try {\n    // Try to delete the permission.\n    permissionDAO.inX(userContext).remove(p);\n\n    // If the put didn't throw, then this test failed.\n    test(false, TEST_MESSAGE);\n  } catch (AuthorizationException e) {\n    passed = e.getMessage().equals(\"Permission denied.\");\n    test(passed, TEST_MESSAGE);\n    if ( ! passed ) {\n      print(\"Error message mismatch. Actual was: \" + e.getMessage());\n    }\n  }\n\n  // Clean up.\n  permissionDAO.remove(p);\n  cleanUp(userContext);\n}\n\n\n// Try to delete a group without permission to do so.\ndeleteGroupWithoutPermissionThrows() {\n  logger.info(new Object[] {\"deleteGroupWithoutPermissionThrows\"});\n  TEST_MESSAGE = \"Cannot delete a group without the appropriate 'delete' permission.\";\n\n  // Create a test user.\n  List permissionIds = new ArrayList();\n  permissionIds.add(\"group.create.ppet\");\n  X userContext = generateTestUser(permissionIds);\n\n  // Create a permission for the test user to update.\n  Group g = new Group.Builder(x)\n    .setId(\"ppet\")\n    .build();\n\ngroupDAO.remove(g);\n  // Create the group.\n  g = (Group) groupDAO.inX(userContext).put(g).fclone();\n\n  try {\n    // Try to delete the group.\n    groupDAO.inX(userContext).remove(g);\n\n    // If the put didn't throw, then this test failed.\n    test(false, TEST_MESSAGE);\n  } catch (AuthorizationException e) {\n    passed = e.getMessage().equals(\"You don't have permission to delete that group.\");\n    test(passed, TEST_MESSAGE);\n    if ( ! passed ) {\n      print(\"Error message mismatch. Actual was: \" + e.getMessage());\n    }\n  }\n\n  // Clean up.\n  groupDAO.remove(g);\n  cleanUp(userContext);\n}\n\n\n// Try to remove a permission from a group without permission.\nremovePermissionFromGroupWithoutPermissionThrows() {\n  logger.info(new Object[] {\"removePermissionFromGroupWithoutPermissionThrows\"});\n  TEST_MESSAGE = \"Cannot remove permissions from groups without the appropriate permissions.\";\n\n  // Create a test user.\n  List permissionIds = new ArrayList();\n  X userContext = generateTestUser(permissionIds);\n\n  try {\n    // Try to remove \"*\" from \"admin\".\n    GroupPermissionJunction j = new GroupPermissionJunction.Builder(x)\n      .setSourceId(\"admin\")\n      .setTargetId(\"*\")\n      .build();\n    groupPermissionJunctionDAO.inX(userContext).remove(j);\n\n    // If the put didn't throw, then this test failed.\n    test(false, TEST_MESSAGE);\n  } catch (AuthorizationException e) {\n    passed = e.getMessage().equals(\"You do not have permission to update that group.\");\n    test(passed, TEST_MESSAGE);\n    if ( ! passed ) {\n      print(\"Error message mismatch. Actual was: \" + e.getMessage());\n    }\n  }\n\n  // Clean up.\n  cleanUp(userContext);\n\n  // Do it a second time but with permission to update the group this time, but\n  // not the permission we're trying to remove. You should need both.\n\n  // Create a test user.\n  permissionIds = new ArrayList();\n  permissionIds.add(\"group.update.admin\");\n  userContext = generateTestUser(permissionIds);\n\n  try {\n    // Try to remove \"*\" from \"admin\".\n    j = new GroupPermissionJunction.Builder(x)\n      .setSourceId(\"admin\")\n      .setTargetId(\"*\")\n      .build();\n    groupPermissionJunctionDAO.inX(userContext).remove(j);\n\n    // If the put didn't throw, then this test failed.\n    test(false, TEST_MESSAGE);\n  } catch (AuthorizationException e) {\n    passed = e.getMessage().equals(\"Permission denied. You cannot add or remove a permission that you do not have.\");\n    test(passed, TEST_MESSAGE);\n    if ( ! passed ) {\n      print(\"Error message mismatch. Actual was: \" + e.getMessage());\n    }\n  }\n\n  // Clean up.\n  cleanUp(userContext);\n}\n\n\n// Run the tests.\n\ntry {\n  createGroupWithoutPermissionThrows();\n  addNewPermissionThrows();\n  addGroupWithAdminParentThrows();\n  updateGroupWithoutPermissionThrows();\n  updateGroupParentToAdminThrows();\n  createUserInAdminGroupThrows();\n  updateUserGroupToAdminThrows();\n  updateOwnGroupThrows();\n  createPermissionWithoutPermissionThrows();\n  updatePermissionWithoutPermissionThrows();\n  deletePermissionWithoutPermissionThrows();\n  deleteGroupWithoutPermissionThrows();\n  removePermissionFromGroupWithoutPermissionThrows();\n} catch (Throwable e) {\n  e.printStackTrace();\n  test(false, \"An unexpected exception was thrown. Some tests might not have been executed.\");\n}"})
