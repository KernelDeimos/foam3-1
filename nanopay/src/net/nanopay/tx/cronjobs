p({
  "class": "foam.nanos.cron.Cron",
  "enabled": false,
  "schedule": {
    "class": "foam.nanos.cron.CronSchedule",
    "minute": -1,
    "hour": -1,
    "dayOfMonth": -1,
    "month": -1,
    "dayOfWeek": -1,
    "second": 0
  },
  "scheduledTime": "2019-09-09T16:56:00.000Z",
  "id": "ls.daily",
  "description": "",
  "code": 
  """
    import net.nanopay.liquidity.LiquiditySettingsCheckCron;
    import net.nanopay.util.Frequency;
    ls = new LiquiditySettingsCheckCron(Frequency.DAILY);
    ls.execute(x);
    print("Daily Liquidity Run.");
  """
})
p({
  "class": "foam.nanos.cron.Cron",
  "enabled": false,
  "schedule": {
    "class": "foam.nanos.cron.CronSchedule",
    "minute": -1,
    "hour": -1,
    "dayOfMonth": -1,
    "month": -1,
    "dayOfWeek": -1,
    "second": 0
  },
  "scheduledTime": "2019-09-09T16:56:00.000Z",
  "id": "ls.weekly",
  "description": "",
  "code": 
  """
    import net.nanopay.liquidity.LiquiditySettingsCheckCron;
    import net.nanopay.liquidity.Frequency;
    ls = new LiquiditySettingsCheckCron(Frequency.WEEKLY);
    ls.execute(x);
    print("Liquidity Weekly Run");
  """
})

p({
  "class": "foam.nanos.cron.Cron",
  "enabled": false,
  "schedule": {
    "class": "foam.nanos.cron.CronSchedule",
    "minute": -1,
    "hour": -1,
    "dayOfMonth": 1,
    "month": -1,
    "dayOfWeek": -1,
    "second": 0
  },
  "scheduledTime": "2019-09-09T16:56:00.000Z",
  "id": "ls.monthly",
  "description": "This cron job is scheduled for cashout on the first date of the month.",
  "code": 
  """
    import net.nanopay.liquidity.LiquiditySettingsCheckCron;
    import net.nanopay.util.Frequency;
    ls = new LiquiditySettingsCheckCron(Frequency.MONTHLY);
    ls.execute(x);
    print("Liquidity Monthly Run");
  """
})

p({
  "class": "foam.nanos.cron.Cron",
  "enabled": false,
  "schedule": {
    "class": "foam.nanos.cron.CronSchedule",
    "minute": -1,
    "hour": -1,
    "dayOfMonth": -1,
    "month": -1,
    "dayOfWeek": -1,
    "second": 0
  },
  "id": "generic transaction completion cron",
  "description": "This cron job sets CICO transaction to complete if they are in sent status and have passed the completion date.",
  "code": 
  """
  import foam.mlang.predicate.Predicate;
  import foam.core.ContextAgent;
  import foam.core.Detachable;
  import foam.core.X;
  import foam.dao.AbstractSink;
  import foam.dao.DAO;
  import net.nanopay.tx.cico.CITransaction;
  import net.nanopay.tx.cico.COTransaction;
  import net.nanopay.tx.cico.VerificationTransaction;
  import net.nanopay.tx.model.Transaction;
  import net.nanopay.tx.model.TransactionStatus;
  import java.time.LocalDateTime;
  import static foam.mlang.MLang.*;
  import java.time.ZoneId;

  DAO transactionDAO = (DAO) x.get("localTransactionDAO");
  transactionDAO
    .where(
          AND(new Predicate[] {
              EQ(Transaction.STATUS, TransactionStatus.SENT),
              OR(new Predicate[] {
                INSTANCE_OF(CITransaction.class),
                INSTANCE_OF(COTransaction.class),
                INSTANCE_OF(VerificationTransaction.class)
              })
            })
          )
    .select( new AbstractSink() {

    public void put(Object o, Detachable d) {
      Transaction txn = (Transaction) o.fclone();
      LocalDateTime now = LocalDateTime.now();
      if ( txn.getEstimatedCompletionDate() != null ) {
        LocalDateTime completion = LocalDateTime.ofInstant(txn.getEstimatedCompletionDate().toInstant(),ZoneId.systemDefault());
        if ( now.isAfter(completion) ) {
          txn.setStatus(TransactionStatus.COMPLETED);
          txn2 = transactionDAO.put(txn);
        }
      }
    }
  });
  print("done");
  """
})
p({
  "class": "foam.nanos.cron.Cron",
  "enabled": false,
  "schedule": {
    "class": "foam.nanos.cron.CronSchedule",
    "minute": -1,
    "hour": -1,
    "dayOfMonth": -1,
    "month": -1,
    "dayOfWeek": -1,
    "second": 0
  },
  "id": "generic transaction sending cron",
  "description": "This cron job sets CICO transaction to sent if they are in pending status",
  "code":
  """
  import foam.mlang.predicate.Predicate;
  import foam.core.ContextAgent;
  import foam.core.Detachable;
  import foam.core.X;
  import foam.dao.AbstractSink;
  import foam.dao.DAO;
  import net.nanopay.tx.cico.CITransaction;
  import net.nanopay.tx.cico.COTransaction;
  import net.nanopay.tx.cico.VerificationTransaction;
  import net.nanopay.tx.model.Transaction;
  import net.nanopay.tx.model.TransactionStatus;
  import static foam.mlang.MLang.*;

  DAO transactionDAO = (DAO) x.get("localTransactionDAO");
  transactionDAO
    .where(
          AND(new Predicate[] {
              EQ(Transaction.STATUS, TransactionStatus.PENDING),
              OR(new Predicate[] {
                INSTANCE_OF(CITransaction.class),
                INSTANCE_OF(COTransaction.class),
                INSTANCE_OF(VerificationTransaction.class)
              })
            })
          )
    .select( new AbstractSink() {

    public void put(Object o, Detachable d) {
      Transaction txn = (Transaction) o.fclone();
      txn.setStatus(TransactionStatus.SENT);
      txn2 = transactionDAO.put(txn);
    }
  });
  print("done");
  """
})
