p({
  "class": "foam.nanos.boot.NSpec",
  "name": "smeBusinessRegistrationDAO",
  "lazy": false,
  "serve": true,
  "authenticate": false,
  "serviceScript": """
    newUserCreateBusinessDAO = new net.nanopay.onboarding.NewUserCreateBusinessDAO(x, x.get(\"localUserDAO\"));
    userRegistrationDAO = new net.nanopay.onboarding.UserRegistrationDAO(x, "sme", newUserCreateBusinessDAO);
    userPasswordHashingDAO = new foam.nanos.auth.UserPasswordHashingDAO(x, userRegistrationDAO);
    userRegistrationSanitationDAO = new net.nanopay.security.UserRegistrationSanitationDAO.Builder(x).setDelegate(userPasswordHashingDAO).build();
    piplinePMDAO = new foam.dao.PipelinePMDAO(x, userRegistrationSanitationDAO);
    pmDAO = new foam.dao.PMDAO(x, piplinePMDAO);
    return new foam.dao.ValidatingDAO(x, pmDAO, new net.nanopay.onboarding.UserRegistrationValidator());
  """,
  "client": """
    {
      "of": "foam.nanos.auth.User",
      "cache": true,
      "decorators": [
        { "class": "foam.nanos.fs.FileDAODecorator" },
        { "class": "foam.nanos.fs.FileArrayDAODecorator"}
      ]
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "businessRegistrationDAO",
  "lazy": false,
  "serve": true,
  "authenticate": true,
  "serviceScript": """
    nullDAO = new foam.dao.NullDAO.Builder(x)
      .setOf(net.nanopay.onboarding.BusinessRegistration.getOwnClassInfo())
      .build();
    businessRegistrationAdapterDAO = new net.nanopay.onboarding.BusinessRegistrationAdapterDAO(x, nullDAO);
    return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, businessRegistrationAdapterDAO));
  """,
  "client": """
    {
      "of": "net.nanopay.onboarding.BusinessRegistration"
    }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"businessInvitationDAO",
  "serve":true,
  "serviceScript":
  """
  hashingJDAO = new net.nanopay.security.HashingJDAO(x, "SHA-256", false, true, net.nanopay.model.Invitation.getOwnClassInfo(), "businessInvitations");
  ed = new foam.dao.EasyDAO.Builder(x)
    .setAuthorize(false)
    .setInnerDAO(hashingJDAO)
    .setSeqNo(true)
    .setOf(net.nanopay.model.Invitation.getOwnClassInfo())
    .build();
  bid = new net.nanopay.sme.BusinessInvitationDAO(x, ed);
  aid = new net.nanopay.partners.AuthenticatedInvitationDAO(x, bid);
  return new net.nanopay.auth.PublicUserInfoDAO(x, "createdBy", "inviter", aid);
  """,
  "client":
  """
  {
    "of":"net.nanopay.model.Invitation"
  }
  """,
  "documentation":"A DAO that can be used to invite users to join businesses.",
  "authNotes":"Wrapped with a custom AuthenticatedInvitationDAO. That should be refactored. Invitation should implement Authorizable and we should use an AuthorizationDAO."
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"businessOnboardingDAO",
  "serve":true,
  "authenticate":true,
  "serviceScript":
  """
    easyDAO = new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(false)
      .setLastModifiedAware(true)
      .setCreatedByAware(true)
      .setOf(net.nanopay.sme.onboarding.BusinessOnboarding.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName(\"businessOnboardingDAO\").build();

    businessOnboardingDAO = new net.nanopay.sme.onboarding.BusinessOnboardingDAO.Builder(x).setDelegate(easyDAO).build();
    validatingDAO = new foam.dao.ValidatingDAO(x, businessOnboardingDAO);
    return new foam.nanos.auth.AuthorizationDAO(x, validatingDAO, new foam.nanos.auth.AuthorizableAuthorizer(\"businessOnboarding\"));
  """,
  "client": "{\"of\":\"net.nanopay.sme.onboarding.BusinessOnboarding\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"canadaUsBusinessOnboardingDAO",
  "serve":true,
  "authenticate":true,
  "serviceScript":
  """
    easyDAO = new foam.dao.EasyDAO.Builder(x)
        .setAuthorize(false)
        .setLastModifiedAware(true)
        .setCreatedByAware(true)
        .setOf(net.nanopay.sme.onboarding.CanadaUsBusinessOnboarding.getOwnClassInfo())
        .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
        .setJournalName(\"canadaUsBusinessOnboardingDAO\")
        .build();

    canadaUsBusinessOnboarding = new net.nanopay.sme.onboarding.CanadaUsBusinessOnboardingDAO.Builder(x).setDelegate(easyDAO).build();
    validatingDAO = new foam.dao.ValidatingDAO(x, canadaUsBusinessOnboarding);
    return new foam.nanos.auth.AuthorizationDAO(x, validatingDAO, new foam.nanos.auth.AuthorizableAuthorizer("canadaUsBusinessOnboarding"));
  """,
  "client":
  """
  {
    "of":"net.nanopay.sme.onboarding.CanadaUsBusinessOnboarding"
  }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"uSBusinessOnboardingDAO",
  "serve":true,
  "authenticate":true,
  "serviceScript":
  """
    easyDAO = new foam.dao.EasyDAO.Builder(x)
        .setAuthorize(false)
        .setLastModifiedAware(true)
        .setCreatedByAware(true)
        .setOf(net.nanopay.sme.onboarding.USBusinessOnboarding.getOwnClassInfo())
        .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
        .setJournalName(\"usBusinessOnboardingDAO\")
        .build();

    usBusinessOnboarding = new net.nanopay.sme.onboarding.USBusinessOnboardingDAO.Builder(x).setDelegate(easyDAO).build();
    validatingDAO = new foam.dao.ValidatingDAO(x, usBusinessOnboarding);
    return new foam.nanos.auth.AuthorizationDAO(x, validatingDAO, new foam.nanos.auth.AuthorizableAuthorizer("usBusinessOnboarding"));
  """,
  "client":
  """
  {
    "of":"net.nanopay.sme.onboarding.USBusinessOnboarding"
  }
  """
})
