## DAO By Example
##  Load MLangs
Loads the mlang query langauage
--
var M = foam.mlang.ExpressionsSingleton.create();


##  Bank Classes
Example data models for bank accounts
--
foam.CLASS({
  package: 'example',
  name: 'Bank',
  properties: [ 'id', 'name' ]
});
foam.CLASS({
  package: 'example',
  name: 'Customer',
  properties: [ 'id', 'firstName', 'lastName' ]
});
foam.CLASS({
  package: 'example',
  name: 'Account',
  properties: [ 'id', 'type' ]
});
foam.CLASS({
  package: 'example',
  name: 'Transaction',
  properties: [
    'id',
    'label',
    'amount',
    { class: 'Date', name: 'date' },
  ]
});

// relate with foreign key relationships
foam.RELATIONSHIP({
  sourceModel: 'example.Bank',
  forwardName: 'customers', // adds a 'customers' property to Bank
  targetModel: 'example.Customer',
  inverseName: 'bank' // adds 'bank' property to Customer
});
foam.RELATIONSHIP({
  sourceModel: 'example.Customer',
  forwardName: 'accounts',
  targetModel: 'example.Account',
  inverseName: 'owner'
});
foam.RELATIONSHIP({
  sourceModel: 'example.Account',
  forwardName: 'transactions',
  targetModel: 'example.Transaction',
  inverseName: 'account'
});

// create the example app with our DAOs exported
foam.CLASS({
  package: 'example',
  name: 'BankApp',
  requires: [ // using app.Customer.create() gives it our exports
    'example.Bank',
    'example.Customer',
    'example.Account',
    'example.Transaction',
    'foam.dao.EasyDAO'
  ],
  exports: [ // by default, DAOs are looked up by class name
    'bankDAO',
    'customerDAO',
    'accountDAO',
    'transactionDAO',
  ],
  properties: [
    { name: 'bankDAO', factory: function() {
      return this.EasyDAO.create({
        name: 'banks',
        of: this.Bank, daoType: 'MDAO'
      });
    }},
    { name: 'customerDAO', factory: function() {
      return this.EasyDAO.create({
        name: 'customers',
        seqNo: true,
        of: this.Customer, daoType: 'MDAO'
      });
    }},
    { name: 'accountDAO', factory: function() {
      return this.EasyDAO.create({
        name: 'accounts',
        seqNo: true,
        of: this.Account, daoType: 'MDAO'
      });
    }},
    { name: 'transactionDAO', factory: function() {
      return this.EasyDAO.create({
        name: 'transactions',
        seqNo: true,
        of: this.Transaction, daoType: 'MDAO'
      });
    }}
  ]
});
var app = example.BankApp.create();


##  Load Banks
Sets up Bank DAO with example banks
--
return Promise.all([
  app.bankDAO.put(app.Bank.create({ id: 'fn', name: 'First National' })),
  app.bankDAO.put(app.Bank.create({ id: 'tt', name: 'Tortuga Credit Union' }))
]);

##  Load Customers
Sets up Customer DAO with example customers
--
return Promise.all([
  app.customerDAO.put(app.Customer.create({ firstName: 'Sarah',  lastName: 'Smith',    bank: 'fn' })),
  app.customerDAO.put(app.Customer.create({ firstName: 'Harry',  lastName: 'Sullivan', bank: 'fn' })),
  app.customerDAO.put(app.Customer.create({ firstName: 'Jamie', lastName: 'MacKenzie',  bank: 'fn' })),

  app.customerDAO.put(app.Customer.create({ firstName: 'Herman',  lastName: 'Blackbeard', bank: 'tt' })),
  app.customerDAO.put(app.Customer.create({ firstName: 'Hector',  lastName: 'Barbossa',   bank: 'tt' })),
  app.customerDAO.put(app.Customer.create({ firstName: 'William', lastName: 'Roberts',    bank: 'tt' })),
]);

##  Create Accounts
Sets up Accounts DAO with example account, by select()ing into a sink
--
// we want to wait for the puts to complete, so save the promises
accountPuts = [];
// Generate accounts for each customer. Select into an in-line
// sink to process results as they come in.
return app.customerDAO.select(foam.dao.QuickSink.create({
  putFn: function(customer) {
    // create accounts, add to accountDAO, save the promises for later
    // so we know all the puts have completed.
    accountPuts.push(customer.accounts.put(app.Account.create({ type: 'chq' })));
    accountPuts.push(customer.accounts.put(app.Account.create({ type: 'sav' })));
  }
})).then(function() {
  return Promise.all(accountPuts);
});

##  Create Transactions
Sets up Transactions DAO with example transactions
--
// we want to wait for the puts to complete, so save the promises
transactionPuts = [];

// Generate transactions for each account.
var amount = 0;
var date = new Date(0);

// functions to generate some data
function generateAccountChq(account) {
  for ( var j = 0; j < 10; j++ ) {
    date.setDate(date.getDate() + 1);
    transactionPuts.push(account.transactions.put(app.Transaction.create({
      date: new Date(date),
      label: 'x'+amount+'x',
      amount: ((amount += 0.25) % 20) - 5 + (amount % 2) * 5
    })));
  }
}
function generateAccountSav(account) {
  for ( var j = 0; j < 5; j++ ) {
    date.setDate(date.getDate() + 2.5);
    transactionPuts.push(account.transactions.put(app.Transaction.create({
      date: new Date(date),
      label: 's'+amount+'s',
      amount: ((amount += 1.5) % 50) + (amount % 4) * 5
    })));
  }
}

// Select into an ArraySink, which dumps the results of the query to a
// plain array, and run data generating functions for each one.
// Calling select() with no arguments resolves with an ArraySink.
// If you pass a sink to .select(mySink), your sink is resolved.

// Select 'chq' accounts first
return app.accountDAO.where(M.EQ(app.Account.TYPE, 'chq'))
  .select().then(function(defaultArraySink) {
    var accounts = defaultArraySink.array;
    for ( var i = 0; i < accounts.length; i++ ) {
      generateAccountChq(accounts[i]);
    }
}).then(function() {
  // Then select 'sav' accounts
  amount = 0;
  date = new Date(0);
  app.accountDAO.where(M.EQ(app.Account.TYPE, 'sav'))
    .select().then(function(defaultArraySink) {
      var accounts = defaultArraySink.array;
      for ( var i = 0; i < accounts.length; i++ ) {
        generateAccountSav(accounts[i]);
      }
    });
}).then(function() {
  // build transactionPuts first, when selects are done the list is ready
  return Promise.all(transactionPuts);
});

##  Join
Finds all transactions for a given customer
--
var tdao = foam.dao.ArrayDAO.create();
var tsink = foam.dao.DAOSink.create({ dao: tdao });
foam.u2.TableView.create({ of: app.Transaction, data: tdao }).write();

// Start querying at the top, and produce a larger set of results
//   to sub-query at each step
return app.customerDAO.find(2)
  .then(function(customer) {
    var transactionSelectPromises = [];
    return customer.accounts.select(foam.dao.QuickSink.create({
      putFn: function(account) {
        // no route to return promise here, since Sink.put doesn't return a promise...
        transactionSelectPromises.push(account.transactions.select(tsink));
      }
    })).then(function() {
      return Promise.all(transactionSelectPromises);
    })
  });

##  Manual Join
Without using Relationships, finds all transactions for a given customer
--
var tdao = foam.dao.ArrayDAO.create();
var tsink = foam.dao.DAOSink.create({ dao: tdao });
foam.u2.TableView.create({ of: app.Transaction, data: tdao }).write();

// to store intermediate reuslts for matching customer IDs
var customerIds = foam.dao.ArraySink.create();

// to store intermediate results for matching account IDs
var accountIds = foam.dao.ArraySink.create();

// Start querying at the top, and produce a larger set of results
//   to sub-query at each step
return app.customerDAO
  .where(M.EQ(app.Customer.ID, 2)) // a fixed customer ID, in this case
  .select(M.MAP(app.Customer.ID, customerIds)) // extract ID from results
  .then(function() {
    return app.accountDAO // query matches for the array of customer IDs
      .where(M.IN(app.Account.OWNER, customerIds.array))
      .select(M.MAP(app.Account.ID, accountIds)) // extract account ID
      .then(function() {
          return app.transactionDAO // query matches for list of accounts
            .where(M.IN(app.Transaction.ACCOUNT, accountIds.array))
            .select(tsink) // could dedup, but no duplicates in this case
      });
  });

##  Selecting with skip and limit
A pseudo scroll effect with skip and limit
--
var proxyDAO = foam.dao.ProxyDAO.create({ delegate: app.customerDAO });
var skip = 0;
var limit = 3;

// Change skip value, reassign the proxy's source.
// The table will update automatically.
setInterval(function() {
  skip = (skip + 1) % 4;
  proxyDAO.delegate = app.customerDAO.skip(skip).limit(limit);
}, 500);

foam.__context__.document.write("Customers with Skip and Limit");
foam.u2.TableView.create({ of: app.Customer, data: proxyDAO }).write();


##  Ordering
Sorting results
--
return app.accountDAO.find(3).then(function(account) {
  var transactionsDAO = account.transactions;

  foam.__context__.document.write("Sort by amount, descending");
  foam.u2.TableView.create({
    of: app.Transaction,
    data: transactionsDAO.orderBy(M.DESC(app.Transaction.AMOUNT))
  }).write();

  foam.__context__.document.write("Sort by date");
  foam.u2.TableView.create({
    of: app.Transaction,
    data: transactionsDAO.orderBy(app.Transaction.DATE)
  }).write();
})
