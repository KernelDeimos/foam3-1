<title>API Authentication</title>

<h1>Authentication</h1>

<h2>DIG and SUGAR AUTHENTICATION</h2>
<p>
    Authentication is how the client proves its identity to the server.
    The nanopay API uses two methods for authentication:
</p>
<ul>
    <li>Basic Authentication using user name and password</li>
    <li>Bearer Token Authentication using session ID</li>
</ul>

<p><small><b>HTTPS and TLS Encryption Requirements:</b></small></p>
<small>
    <ul>
        <li>All API requests must be made over a secure TLS channel such as an HTTPS session.</li>
        <li>API requests without authentication will also fail by redirecting to a login page.</li>
    </ul>
</small>

<h3>Basic Authentication</h3>
<p>
    For test purposes, the nanopay API enables Basic Authentication with user name and password to authenticate requests. 
    As the simplest form of authentication, this method should not be used in a production environment.
    For a general understanding of Basic Authentication, please select this <a href="https://tools.ietf.org/html/rfc7617">link</a>.
</p>
<p>
  To enable basic authentication, perform the followin steps:
  <ul>
    <li>Concatenate the user name and password with a colon between the two values.
        <blockquote><i><p>Example: Using user name api@mycompany.com and password P@ssword!, the value would be:</p>
            api@mycompany.com:P@ssword!</i>
        </blockquote>
    </li>
    <li>
        Encode the concatenated string using Base64 encoding.
        <blockquote><i><p>Example: The above api@mycompany.com:P@ssword! string would be encoded in Base64 as:</p>
            YXBpQG15Y29tcGFueS5jb206UEBzc3dvcmQh</i>
        </blockquote>
    </li>
    <li>
        Add the Base64 encoded string to the Authorization header using 'Basic' as a prefix string.
        <blockquote><i><p>Example: The above Base64 string would become the following header record:</p></i>
            <code>Authorization: Basic YXBpQG15Y29tcGFueS5jb206UEBzc3dvcmQh</code>
        </blockquote>
    </li>
  </ul>
</p>

<h3>Bearer Token Authentication</h3>
<p>
    The nanopay API uses <a href="https://oauth.net/2/bearer-tokens/">Bearer Tokens</a> with an API Key called a Session ID within the application for authentication.
    For test environments, the session ID can be generated by establishing a session using the basic authentication method described above, 
    which returns a sessionId in the response headers. Note that the time-to-live (TTL) for a session established using basic authentication is 8 hours.
</p>
<p>
    For production system, there are two ways of obtaining a session ID. 
    <ul>
        <li>The first way of obtaining a long lived session ID is by obtained directly from nanopay.</li>
        <li>
            The second way of obtaining a session ID is through the SUGAR sessionService API call. This method can only be used after 
            obtaining the long lived session ID from nanopay, which will be used to authenticate the SUGAR API call. The reason session 
            IDs would be obtained this way would be to act on behalf of users and businesses that were previously provisioned using the
            long lived session ID.
        </li>
    </ul>
</p>
<p>
    Once the session ID has been acquired, it can then be placed into the Bearer Token header for authentication.
    <blockquote><i><p>Example: A session ID of 3db6b116-cea0-8cfb-5835-8a381329980a would become the following header record:</p></i>
        <code>Authorization: Bearer 3db6b116-cea0-8cfb-5835-8a381329980a</code>
    </blockquote>
</p>

<h3>Session Types</h3>
<h4>Administrative Session</h4>
<p>
    The administrative session is the session ID of an admin user or the users who have access to the sessionService to create
    sessions on behalf of other users and business, and the userDAO. In effect, this is the long lived session ID obtained directly 
    from nanopay.
</p>
<p>
    The administrative session should be used as the bearer token when using the sessionService to a create the payment
    session for a user/business.
</p>

<h4>Transaction Session</h4>
<p>
    The transaction session is the session ID of the user/business who is creating the transaction (aka. payment).
</p>
<p>
    The transaction session should be used as the bearer token when creating a transaction for the transaction that is
    created by the user/business. For the transactions created by the admin for other users/businesses, the
    administrative session should be used instead.
</p>

<h5>Establishing a Transation Session</h5>
<p>
    In order to establish a transaction session, both a user and a business must be selected and then a session must 
    be created for that user and business.
</p>
<p>
    When trying to select a specific user, a unique piece of identifying information has to be provided. Beginning
    either from the user ID or the user email address is a good starting point. If the user email is provided, then 
    make a DIG call to the userDAO with the given email address to retrieve the user's ID. This user ID should be used 
    in the 'agentId' parameter for the sessionService API call.
</p>
<p>
    When trying to select a business for the given user, make a DIG call call to the agentJunctionDAO with the query
    'sourceId={userId}', where the user ID is the ID retrieved for the user above. This DIG call will return
    the business ID of the business that the user has access to. This business ID should be used in the 'userId' parameter
    for the sessionService API call.
</p>
<p>
    Establish a transaction session by making a SUGAR call to the sessionService with the following payload:
<code>
{
    "service":"sessionService",
    "method":"createSessionWithTTL",
    "interfaceName":"foam.nanos.session.SessionService",
    "userId":{businessId},
    "agentId":{userId},
    "ttl": 28800000
}
</code>
</p>

<h2>DUG Authentication</h2>
<p>
    DUG only supports Bearer Token authentication at present. Simply add your bearer token to the DUG record and 
    the Authentication header will include the bearer token in the outgoing webhook HTTP call to the URL specified.
</p>
