p({"class": "foam.nanos.test.Test", "id": "Contact Tests", "description": "Tests related to contacts.", "server": false, "code": "/**\n * Tests for the Contacts feature.\n */\n\nrunTests();\n\nasync function runTests() {\n  var adminContext = x;\n\n  await resetTestData();\n  await Cannot_Create_Contact_Without_First_Name(adminContext);\n  await resetTestData();\n  await Cannot_Create_Contact_With_Long_First_Name(adminContext);\n  await resetTestData();\n  await Cannot_Create_Contact_With_First_Name_Containing_Number(adminContext);\n  await resetTestData();\n  await Cannot_Create_Contact_Without_Last_Name(adminContext);\n  await resetTestData();\n  await Cannot_Create_Contact_With_Long_Last_Name(adminContext);\n  await resetTestData();\n  await Cannot_Create_Contact_With_Last_Name_Containing_Number(adminContext);\n  await resetTestData();\n  await Cannot_Create_Contact_Without_Organization(adminContext);\n  await resetTestData();\n  await Cannot_Create_Contact_Without_Email(adminContext);\n  await resetTestData();\n  await Cannot_Create_Contact_Invalid_Email(adminContext);\n  await resetTestData();\n  await Cannot_Create_Second_Contact_With_Same_Email(adminContext);\n  await resetTestData();\n  await Can_Create_Contact(adminContext);\n  await resetTestData();\n  await Can_Update_Contact(adminContext);\n}\n\nasync function resetTestData() {\n  // Delete the test contacts.\n  await x.contactDAO\n    .where(foam.mlang.predicate.Eq.create({\n      arg1: net.nanopay.contacts.Contact.EMAIL,\n      arg2: 'devon@example.com'\n    }))\n    .removeAll_(x, 0, 1000, null, null);\n}\n\n/**\n * Utility method for tests that check if an error was thrown. \n */\nasync function Test_Throws(testText, expectedErrorMessage, fn) {\n  var threw = false;\n  var actualErrorMessage = '';\n  try {\n    await fn();\n  } catch(err) {\n    threw = true;\n    actualErrorMessage = err.message;\n  }\n  test(threw && actualErrorMessage === expectedErrorMessage, testText);\n  if ( threw && actualErrorMessage !== expectedErrorMessage ) {\n    print(`INFO: Expected to get '${expectedErrorMessage}' as the error message but got '${actualErrorMessage}' instead.`);\n  } else if ( ! threw  ) {\n    print(`INFO: Didn't throw an error.`);\n  }\n}\n\nasync function Cannot_Create_Contact_Without_First_Name(context) {\n  await Test_Throws(\n    'Cannot create a contact without `firstName`, a required field.',\n    'First name is required.',\n    async () => {\n      await context.user.contacts.put(net.nanopay.contacts.Contact.create({\n        email: 'devon@example.com',\n        lastName: 'Carlyle',\n        organization: 'ExampleCo'\n      }))\n    }\n  );\n}\n\nasync function Cannot_Create_Contact_With_Long_First_Name(context) {\n  await Test_Throws(\n    'Cannot create a contact with a first name longer than 70 characters.',\n    'First name cannot exceed 70 characters.',\n    async () => {\n      await context.user.contacts.put(net.nanopay.contacts.Contact.create({\n        email: 'devon@example.com',\n        firstName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n        lastName: 'Carlyle',\n        organization: 'ExampleCo'\n      }))\n    }\n  );\n}\n\nasync function Cannot_Create_Contact_With_First_Name_Containing_Number(context) {\n  await Test_Throws(\n    'Cannot create a contact with a first name that contains a number.',\n    'First name cannot contain numbers.',\n    async () => {\n      await context.user.contacts.put(net.nanopay.contacts.Contact.create({\n        email: 'devon@example.com',\n        firstName: '5up3rm4n',\n        lastName: 'Carlyle',\n        organization: 'ExampleCo'\n      }))\n    }\n  );\n}\n\nasync function Cannot_Create_Contact_Without_Last_Name(context) {\n  await Test_Throws(\n    'Cannot create a contact without `lastName`, a required field.',\n    'Last name is required.',\n    async () => {\n      await context.user.contacts.put(net.nanopay.contacts.Contact.create({\n        email: 'devon@example.com',\n        firstName: 'Devon',\n        organization: 'ExampleCo'\n      }))\n    }\n  );\n}\n\nasync function Cannot_Create_Contact_With_Long_Last_Name(context) {\n  await Test_Throws(\n    'Cannot create a contact with a last name longer than 70 characters.',\n    'Last name cannot exceed 70 characters.',\n    async () => {\n      await context.user.contacts.put(net.nanopay.contacts.Contact.create({\n        email: 'devon@example.com',\n        firstName: 'Devon',\n        lastName: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n        organization: 'ExampleCo'\n      }))\n    }\n  );\n}\n\nasync function Cannot_Create_Contact_With_Last_Name_Containing_Number(context) {\n  await Test_Throws(\n    'Cannot create a contact with a last name that contains a number.',\n    'Last name cannot contain numbers.',\n    async () => {\n      await context.user.contacts.put(net.nanopay.contacts.Contact.create({\n        email: 'devon@example.com',\n        firstName: 'Devon',\n        lastName: '5up3rm4n',\n        organization: 'ExampleCo'\n      }))\n    }\n  );\n}\n\nasync function Cannot_Create_Contact_Without_Organization(context) {\n  await Test_Throws(\n    'Cannot create a contact without `organization`, a required field.',\n    'Organization is required.',\n    async () => {\n      await context.user.contacts.put(net.nanopay.contacts.Contact.create({\n        email: 'devon@example.com',\n        firstName: 'Devon',\n        lastName: 'Carlyle'\n      }))\n    }\n  );\n}\n\nasync function Cannot_Create_Contact_Without_Email(context) {\n  await Test_Throws(\n    'Cannot create a contact without `email`, a required field.',\n    'Email is required.',\n    async () => {\n      await context.user.contacts.put(net.nanopay.contacts.Contact.create({\n        firstName: 'Devon',\n        lastName: 'Carlyle',\n        organization: 'ExampleCo'\n      }))\n    }\n  );\n}\n\nasync function Cannot_Create_Contact_Invalid_Email(context) {\n  await Test_Throws(\n    'Cannot create a contact with an empty string for an email address.',\n    'Email is required.',\n    async () => {\n      await context.user.contacts.put(net.nanopay.contacts.Contact.create({\n        email: '',\n        firstName: 'Devon',\n        lastName: 'Carlyle',\n        organization: 'ExampleCo'\n      }))\n    }\n  );\n  await Test_Throws(\n    'Cannot create a contact without anything before the @ in an email address.',\n    'Invalid email address.',\n    async () => {\n      await context.user.contacts.put(net.nanopay.contacts.Contact.create({\n        email: '@example.com',\n        firstName: 'Devon',\n        lastName: 'Carlyle',\n        organization: 'ExampleCo'\n      }))\n    }\n  );\n  await Test_Throws(\n    'Cannot create a contact with only a TLD in the email address.',\n    'Invalid email address.',\n    async () => {\n      await context.user.contacts.put(net.nanopay.contacts.Contact.create({\n        email: 'devon@.com',\n        firstName: 'Devon',\n        lastName: 'Carlyle',\n        organization: 'ExampleCo'\n      }))\n    }\n  );\n}\n\nasync function Cannot_Create_Second_Contact_With_Same_Email(context) {\n  await Test_Throws(\n    'Cannot create two contacts with the same email address.',\n    'You already have a contact with that email address.',\n    async () => {\n      await context.user.contacts.put(net.nanopay.contacts.Contact.create({\n        email: 'devon@example.com',\n        firstName: 'Devon',\n        lastName: 'Carlyle',\n        organization: 'ExampleCo'\n      }));\n      await context.user.contacts.put(net.nanopay.contacts.Contact.create({\n        email: 'devon@example.com',\n        firstName: 'Devon',\n        lastName: 'OtherGuy',\n        organization: 'ExampleCo'\n      }))\n    }\n  );\n}\n\nasync function Can_Create_Contact(context) {\n  var threw = false;\n  var result;\n  try {\n    result = await context.user.contacts.put(net.nanopay.contacts.Contact.create({\n      email: 'devon@example.com',\n      firstName: 'Devon',\n      lastName: 'Carlyle',\n      organization: 'ExampleCo'\n    }));\n  } catch (err) {\n    threw = true;\n  }\n  var passed = ! threw &&\n    result.email === 'devon@example.com' &&\n    result.firstName === 'Devon' &&\n    result.lastName === 'Carlyle' &&\n    result.organization === 'ExampleCo';\n  test(passed, `User in '${context.user.group}' group can create a contact.`);\n}\n\nasync function Can_Update_Contact(context) {\n  var threw = false;\n  var result = await context.user.contacts.put(net.nanopay.contacts.Contact.create({\n    email: 'devon@example.com',\n    firstName: 'Devon',\n    lastName: 'Carlyle',\n    organization: 'ExampleCo'\n  }));\n  try {\n    result.organization = 'Different';\n    result = await context.user.contacts.put(result);\n  } catch (err) {\n    threw = true;\n    print(err.message);\n  }\n  var passed = ! threw &&\n    result.email === 'devon@example.com' &&\n    result.firstName === 'Devon' &&\n    result.lastName === 'Carlyle' &&\n    result.organization === 'Different';\n  test(passed, `User in '${context.user.group}' group can update a contact.`);\n}\n"})
p({"class": "net.nanopay.contacts.AuthenticatedContactDAOTest", "id": "AuthenticatedContactDAOTest", "description": "Tests the functionality of the AuthenticatedContactDAO DAO decorator."})