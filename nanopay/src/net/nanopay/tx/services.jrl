p({
  "class": "foam.nanos.boot.NSpec",
  "name": "requestMoneyDAO",
  "serve": true,
  "serviceScript":
  """
    dao = new foam.dao.ValidatingDAO(x, null, new net.nanopay.tx.RequestMoneyValidator());
    dao = new net.nanopay.tx.RequestMoneyDAO(x, dao);

    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.RequestMoney.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .setJournalName("requestMoney")
      .setDecorator(dao)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.tx.RequestMoney\"}"
})
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localTransactionDAO",
  "lazy": false,
  "serviceScript":"""
    import net.nanopay.tx.model.Transaction;
    import foam.dao.MDAO;
    import foam.dao.DAO;
    import foam.nanos.analytics.DAOFoldManager;
    import foam.nanos.analytics.FoldManagerDAODecorator;

    MDAO mdao = new MDAO(Transaction.getOwnClassInfo());
    mdao.addIndex(new foam.core.PropertyInfo[] {Transaction.CREATED});
    mdao.addIndex(new foam.core.PropertyInfo[] {Transaction.STATUS});
    mdao.addIndex(new foam.core.PropertyInfo[] {Transaction.TYPE});
    mdao.addIndex(new foam.core.PropertyInfo[] {Transaction.PARENT});
    mdao.addIndex(new foam.core.PropertyInfo[] {Transaction.DESTINATION_ACCOUNT});
    mdao.addIndex(new foam.core.PropertyInfo[] {Transaction.SOURCE_ACCOUNT});
    mdao.addIndex(new foam.core.PropertyInfo[] {Transaction.LAST_STATUS_CHANGE});

    tdao = new DAOFoldManager.Builder(x)
      .setDao((DAO)x.get("accountBalanceHourlyCandlestickDAO"))
      .setPeriodLengthMs(60 * 60 * 1000)
      .build();
    tdao = new FoldManagerDAODecorator.Builder(x)
      .setDelegate(mdao)
      .setFm(tdao)
      .build();
    tdao = new net.nanopay.tx.TransactionDAO(x, tdao);
    tdao = new foam.dao.PMDAO.Builder(x)
      .setNSpec(new foam.nanos.boot.NSpec.Builder(x).setName("transactionDAO").build())
      .setDelegate(tdao)
      .build();
    inner = tdao;
    if ( "true".equals(System.getProperty("CLUSTER")) ) {
      inner = new foam.nanos.medusa.MedusaAdapterDAO.Builder(x)
        .setNSpec(new foam.nanos.boot.NSpec.Builder(x).setName("localTransactionDAO").build())
        .setDelegate(tdao)
        .build();
    } else {
      inner = new net.nanopay.security.HashingJDAO(x, "SHA-256", true, false, tdao, "transactions");
    }
    
    dao = new net.nanopay.tx.SaveChainedTransactionDAO.Builder(x)
      .setDelegate(new foam.dao.NullDAO(x, net.nanopay.tx.model.Transaction.getOwnClassInfo()))
      .build();
    dao = new net.nanopay.tx.CompletedTransactionDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.UpdateInvoiceTransactionDAO(x, dao);
    dao = new net.nanopay.payment.PADTypeCheckDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new foam.nanos.ruler.RulerDAO(x, dao, "localTransactionDAO");
    dao = new foam.dao.ValidatingDAO(x, dao, new net.nanopay.tx.TransactionValidator());
    dao = new net.nanopay.tx.planner.TransactionQuotingDAO(x, dao);
    dao = new net.nanopay.tx.SummaryTransactionDAO(x, dao);

    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.model.Transaction.getOwnClassInfo())
      .setMdao(tdao)
      .setInnerDAO(inner)
      .setDecorator(dao)
      .setPm(true)
      .setPipelinePm(true)
      .setGuid(false)
      .setContextualize(true)
      .setRuler(false)
      .setCluster(false)
      .build();
    """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"transactionDAO",
  "serve":true,
  "serviceScript":
  """
    return new net.nanopay.tx.AuthenticatedTransactionDAO(x,
      new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.model.Transaction.getOwnClassInfo())
      .setInnerDAO(x.get("localTransactionDAO"))
      .setDecorator(new foam.nanos.auth.PermissionedPropertyDAO(x, new foam.dao.NullDAO(x, net.nanopay.tx.model.Transaction.getOwnClassInfo())))
      .setAuthorizer(new foam.nanos.auth.AuthorizableAuthorizer("transaction"))
      .setPm(true)
      .setPipelinePm(true)
      .setEnableInterfaceDecorators(false)
      .setRuler(false)
      .setCluster(false)
      .setOrder(new foam.mlang.order.Comparator[] { new foam.mlang.order.Desc.Builder(x).setArg1(net.nanopay.tx.model.Transaction.CREATED).build() })
      .build());
  """,
  "client": "{\"of\":\"net.nanopay.tx.model.Transaction\", \"remoteListenerSupport\": false, \"serverBox\":{ \"class\":\"foam.box.SessionClientBox\", \"url\":\"service/transactionDAO\", \"delegate\":{ \"class\":\"foam.box.TimeoutBox\", \"timeout\":60000,\"delegate\":{\"class\":\"foam.box.HTTPBox\", \"url\":\"service/transactionDAO\"}}}}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "tableViewTransactionDAO",
  "lazy": false,
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.model.Transaction.getOwnClassInfo())
      .setInnerDAO(x.get("transactionDAO"))
      .setDecorator(new net.nanopay.tx.TransactionEntitiesDAO(x, new foam.dao.NullDAO(x, net.nanopay.tx.model.Transaction.getOwnClassInfo())))
      .setAuthorize(false)
      .setPm(true)
      .setPipelinePm(true)
      .setEnableInterfaceDecorators(false)
      .setOrder(new foam.mlang.order.Comparator[] { new foam.mlang.order.Desc.Builder(x).setArg1(net.nanopay.tx.model.Transaction.CREATED).build() })
      .setRuler(false)
      .setCluster(false)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.tx.model.Transaction\", \"remoteListenerSupport\": false, \"serverBox\":{ \"class\":\"foam.box.SessionClientBox\", \"url\":\"service/tableViewTransactionDAO\", \"delegate\":{ \"class\":\"foam.box.TimeoutBox\", \"timeout\":25000,\"delegate\":{\"class\":\"foam.box.HTTPBox\", \"url\":\"service/tableViewTransactionDAO\"}}}}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "summaryTransactionDAO",
  "lazy": false,
  "serve": true,
  "serviceScript":
  """
    dao = new foam.dao.FilteredDAO.Builder(x)
      .setPredicate(foam.mlang.MLang.INSTANCE_OF(net.nanopay.tx.SummaryTransaction.class))
      .setDelegate(x.get("transactionDAO"))
      .setOf(net.nanopay.tx.SummaryTransaction.getOwnClassInfo())
      .setPrimaryKey(net.nanopay.tx.SummaryTransaction.ID)
      .build();

    dao = new net.nanopay.tx.SummaryTransactionInnerDAO.Builder(x)
      .setDelegate(dao)
      .setOf(net.nanopay.tx.model.Transaction.getOwnClassInfo())
      .build();

    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.model.Transaction.getOwnClassInfo())
      .setInnerDAO(dao)
      .setAuthorize(false)
      .setPm(true)
      .setPipelinePm(true)
      .setEnableInterfaceDecorators(false)
      .setRuler(true)
      .build();
  """,
  "client":
    """
      {
        "of":"net.nanopay.tx.model.Transaction",
        "remoteListenerSupport": false,
        "serverBox":{
          "class":"foam.box.SessionClientBox",
          "url":"service/summaryTransactionDAO",
          "delegate":{
            "class":"foam.box.TimeoutBox",
            "timeout":25000,
            "delegate":{
              "class":"foam.box.HTTPBox",
              "url":"service/summaryTransactionDAO"
            }
          }
        }
      }
    """
})


p({"class":"foam.nanos.boot.NSpec", "name":"liquidityService",                   "serviceScript":"return new net.nanopay.liquidity.LiquidityService();"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountHierarchyService",
  "serve": true,
  "serviceClass": "net.nanopay.liquidity.tx.AccountHierarchyService",
  "boxClass": "net.nanopay.liquidity.tx.AccountHierarchySkeleton",
  "client":
    """
      {
        "class":"net.nanopay.liquidity.tx.ClientAccountHierarchyService",
        "delegate": {
          "class":"foam.box.SessionClientBox",
          "delegate": {
            "class":"foam.box.HTTPBox",
            "url":
            "service/accountHierarchyService"
          }
        }
      }
    """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "transactionPurposeDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.TransactionPurpose.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .setJournalName("transactionPurposes")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.tx.TransactionPurpose\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "transactionLimitDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.model.TransactionLimit.getOwnClassInfo())
      .setAuthorize(false)
      .setPm(true)
      .setPipelinePm(true)
      .setJournalName("transactionLimits")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.tx.model.TransactionLimit\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"userTransactionLimit",
  "serve":true,
  "boxClass":"net.nanopay.tx.UserTransactionLimitSkeleton",
  "serviceClass":"net.nanopay.tx.UserTransactionLimitService",
  "client":"{ \"class\":\"net.nanopay.tx.client.ClientUserTransactionLimitService\", \"delegate\": { \"class\":\"foam.box.HTTPBox\", \"url\":\"service/userTransactionLimit\" } }"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "pacsMsg",
  "parameters": true,
  "serviceScript": "return new net.nanopay.tx.PacsWebAgent()"
})
p({"class":"foam.nanos.boot.NSpec", "name":"transactionFeeDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"transactionFeeDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"transactionFees\").setOf(net.nanopay.tx.model.TransactionFee.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tx.model.TransactionFee\"}","description":"Fees or charges with using a particular rail or service"})
p({"class":"foam.nanos.boot.NSpec", "name":"lineItemTypeDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"lineItemTypeDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"lineItemTypes\").setOf(net.nanopay.tx.LineItemType.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tx.LineItemType\"}","description":"Type of service being invoiced for."})
p({"class":"foam.nanos.boot.NSpec", "name":"lineItemFeeDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"lineItemFeeDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"lineItemFees\").setOf(net.nanopay.tx.LineItemFee.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tx.LineItemFee\"}","description":"Fee to apply for a particular LineItem type."})
p({"class":"foam.nanos.boot.NSpec", "name":"lineItemTypeAccountDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"lineItemTypeAccountDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"lineItemTypeAccounts\").setOf(net.nanopay.tx.LineItemTypeAccount.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tx.LineItemTypeAccount\"}","description":"Deposit Account or user/payee for LineItem type."})
p({"class":"foam.nanos.boot.NSpec", "name":"taxService",                   "serve":true, "serviceScript":"return new net.nanopay.tax.TaxMockService(x);"})
p({"class":"foam.nanos.boot.NSpec", "name":"lineItemTaxDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"lineItemTaxDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"lineItemTax\").setOf(net.nanopay.tax.LineItemTax.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tax.LineItemTax\"}","description":"Tax to apply for a particular LineItem type, TaxCode, Country and Region."})
p({"class":"foam.nanos.boot.NSpec", "name":"lineItemTaxDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"lineItemTaxDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"lineItemTax\").setOf(net.nanopay.tax.LineItemTax.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tax.LineItemTax\"}","description":"Tax to apply for a particular LineItem type, TaxCode, Country and Region."})

// Reduce Managers
p({"class":"foam.nanos.boot.NSpec", "name":"accountBalanceMonthlyReduceManager",               "serve":true,  "serviceScript":"return new foam.nanos.analytics.DAOReduceManager.Builder(x).setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceWeeklyCandlestickDAO\")).setDestDAO((foam.dao.DAO) x.get(\"accountBalanceMonthlyCandlestickDAO\")).setPeriodLengthMs(30*7*24*60*60*1000).build();"})
p({"class":"foam.nanos.boot.NSpec", "name":"accountBalanceQuarterlyReduceManager",               "serve":true,  "serviceScript":"return new foam.nanos.analytics.DAOReduceManager.Builder(x).setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceMonthlyCandlestickDAO\")).setDestDAO((foam.dao.DAO) x.get(\"accountBalanceQuarterlyCandlestickDAO\")).setPeriodLengthMs(3*30*7*24*60*60*1000).build();"})
p({"class":"foam.nanos.boot.NSpec", "name":"accountBalanceAnnuallyReduceManager",               "serve":true,  "serviceScript":"return new foam.nanos.analytics.DAOReduceManager.Builder(x).setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceQuarterlyCandlestickDAO\")).setDestDAO((foam.dao.DAO) x.get(\"accountBalanceAnnuallyCandlestickDAO\")).setPeriodLengthMs(12*30*7*24*60*60*1000).build();"})

// Candlesticks
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountBalanceWeeklyCandlestickDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.analytics.Candlestick.getOwnClassInfo())
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.analytics.Candlestick\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountBalanceMonthlyCandlestickDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.analytics.Candlestick.getOwnClassInfo())
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.analytics.Candlestick\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountBalanceQuarterlyCandlestickDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.analytics.Candlestick.getOwnClassInfo())
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.analytics.Candlestick\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountBalanceAnnuallyCandlestickDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.analytics.Candlestick.getOwnClassInfo())
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.analytics.Candlestick\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountBalanceHourlyCandlestickDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setCluster(false)
      .setOf(foam.nanos.analytics.Candlestick.getOwnClassInfo())
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.analytics.Candlestick\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountBalanceDailyCandlestickDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.analytics.Candlestick.getOwnClassInfo())
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.analytics.Candlestick\"}"
})

p({"class": "foam.nanos.boot.NSpec","name": "accountBalanceDailyReduceManager","serviceScript":"""return new foam.nanos.analytics.DAOReduceManager.Builder(x)\n  .setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceHourlyCandlestickDAO\"))\n  .setDestDAO((foam.dao.DAO) x.get(\"accountBalanceDailyCandlestickDAO\"))\n  .setCloseTimeExpr(new foam.glang.EndOfDay.Builder(x)\n    .setDelegate(new foam.mlang.IdentityExpr.Builder(x).build())\n    .build())\n  .build();"""})
p({"class": "foam.nanos.boot.NSpec","name": "accountBalanceWeeklyReduceManager","serviceScript":"""return new foam.nanos.analytics.DAOReduceManager.Builder(x)\n  .setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceDailyCandlestickDAO\"))\n  .setDestDAO((foam.dao.DAO) x.get(\"accountBalanceWeeklyCandlestickDAO\"))\n  .setCloseTimeExpr(new foam.glang.EndOfWeek.Builder(x)\n    .setDelegate(new foam.mlang.IdentityExpr.Builder(x).build())\n    .build())\n  .build();"""})
p({"class": "foam.nanos.boot.NSpec","id": "accountBalanceMonthlyReduceManager","serviceScript":"""return new foam.nanos.analytics.DAOReduceManager.Builder(x)\n  .setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceDailyCandlestickDAO\"))\n  .setDestDAO((foam.dao.DAO) x.get(\"accountBalanceMonthlyCandlestickDAO\"))\n  .setCloseTimeExpr(new foam.glang.EndOfMonth.Builder(x)\n    .setDelegate(new foam.mlang.IdentityExpr.Builder(x).build())\n    .build())\n  .build();"""})
p({"class": "foam.nanos.boot.NSpec","id": "accountBalanceQuarterlyReduceManager","serviceScript":"""return new foam.nanos.analytics.DAOReduceManager.Builder(x)\n  .setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceMonthlyCandlestickDAO\"))\n  .setDestDAO((foam.dao.DAO) x.get(\"accountBalanceQuarterlyCandlestickDAO\"))\n  .setCloseTimeExpr(new foam.glang.EndOfQuarter.Builder(x)\n    .setDelegate(new foam.mlang.IdentityExpr.Builder(x).build())\n    .build())\n  .build();"""})
p({"class": "foam.nanos.boot.NSpec","id": "accountBalanceAnnuallyReduceManager","serviceScript":"""return new foam.nanos.analytics.DAOReduceManager.Builder(x)\n  .setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceQuarterlyCandlestickDAO\"))\n  .setDestDAO((foam.dao.DAO) x.get(\"accountBalanceAnnuallyCandlestickDAO\"))\n  .setCloseTimeExpr(new foam.glang.EndOfYear.Builder(x)\n    .setDelegate(new foam.mlang.IdentityExpr.Builder(x).build())\n    .build())\n  .build();"""})

p({"class":"foam.nanos.boot.NSpec", "name":"afexTradeResponseDAO",                 "lazy":false,  "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setOf(net.nanopay.fx.afex.CreateTradeResponse.getOwnClassInfo()).setSeqNo(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"afexTradeResponse\").build();","client":"{\"of\":\"net.nanopay.fx.afex.CreateTradeResponse\"}" })

p({"class":"foam.nanos.boot.NSpec","name":"padTypeDAO",                      "lazy":false,  "serve":true, "serviceScript":"return new foam.dao.SequenceNumberDAO(new foam.dao.java.JDAO(x, net.nanopay.payment.PADType.getOwnClassInfo(), \"PADTypes\"));", "client":"{\"of\":\"net.nanopay.payment.PADType\"}"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "purposeCodeDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(false)
      .setPm(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("purposeCodes")
      .setPipelinePm(true)
      .setOf(net.nanopay.tx.PurposeCode.getOwnClassInfo())
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.tx.PurposeCode\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "purposeGroupDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(false)
      .setPm(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("purposeGroups")
      .setPipelinePm(true)
      .setOf(net.nanopay.tx.PurposeGroup.getOwnClassInfo())
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.tx.PurposeGroup\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"transactionEventDAO",
  "lazy":false,
  "serve":true,
  "client":"{\"of\":\"net.nanopay.tx.TransactionEvent\"}",
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.TransactionEvent.getOwnClassInfo())
      .setSeqNo(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("transactionEvent")
      .build();
  """
})
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "exchangeRateService",
  "serve": true,
  "serviceClass": "net.nanopay.fx.ExchangeRateService",
  "boxClass": "net.nanopay.fx.ExchangeRateServiceInterfaceSkeleton",
  "client":
    """
      {
        "class":"net.nanopay.fx.ExchangeRateService",
        "delegate": {
          "class":"foam.box.SessionClientBox",
          "delegate": {
            "class":"foam.box.HTTPBox",
            "url":
            "service/exchangeRateService"
          }
        }
      }
    """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name": "eftFileDAO",
  "lazy": false,
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setSeqNo(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("eftFile")
      .setOf(net.nanopay.tx.cico.EFTFile.getOwnClassInfo())
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.tx.cico.EFTFile\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "transactionLimitService",
  "serve": true,
  "authenticate": true,
  "boxClass":"net.nanopay.tx.TransactionLimitServiceInterfaceSkeleton",
  "serviceClass": "net.nanopay.tx.TransactionLimitService",
  "client":
    """
      {
        "class":"net.nanopay.tx.client.ClientTransactionLimitService",
        "delegate": {
          "class":"foam.box.SessionClientBox",
          "delegate": {
            "class":"foam.box.HTTPBox",
            "url":
            "service/transactionLimitService"
          }
        }
      }
    """
})
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "ibanDAO",
  "serve": true,
  "serviceScript":
  """

    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.IBAN.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .setJournalName("IBAN")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.tx.IBAN\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "errorCodeDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.integration.ErrorCode.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .setJournalName("errorCodes")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.integration.ErrorCode\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localErrorFeeDAO",
  "lazy": false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.errorfee.ErrorFee.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .setJournalName("errorFees")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "errorFeeDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.errorfee.ErrorFee.getOwnClassInfo())
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("errorFeeDAO"))
      .setInnerDAO(x.get("localErrorFeeDAO")) 
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.tx.errorfee.ErrorFee\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "errorBillingService",
  "serve": true,
  "serviceClass": "net.nanopay.tx.errorfee.ErrorBillingService",
  "boxClass": "net.nanopay.tx.errorfee.ErrorBillingSkeleton",
  "client":
    """
      {
        "class":"net.nanopay.tx.errorfee.ClientErrorBillingService",
        "delegate": {
          "class":"foam.box.SessionClientBox",
          "delegate": {
            "class":"foam.box.HTTPBox",
            "url":
            "service/errorBillingService"
          }
        }
      }
    """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "nanopayChargeDateService",
  "lazy": false,
  "serviceClass": "net.nanopay.tx.errorfee.ChargeDateService"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "chargeDateService",
  "lazy": false,
  "serviceClass": "net.nanopay.tx.errorfee.ChargeDateService"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "natureCodeDAO",
  "lazy": false,
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setInnerDAO(x.get("localCapabilityDAO"))
      .setValidated(true)
      .setDecorator(
        new foam.dao.FilteredDAO.Builder(x)
          .setPredicate(foam.mlang.MLang.INSTANCE_OF(net.nanopay.country.br.NatureCode.class))
          .setDelegate(new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.country.br.NatureCode.getOwnClassInfo()).build())
        .build())
      .setOf(net.nanopay.country.br.NatureCode.getOwnClassInfo())
      .build();
  """,
  "client":
    """
      {
        "of":"net.nanopay.country.br.NatureCode"
      }
    """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "natureCodeDataDAO",
  "lazy": false,
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("natureCodeData")
      .setOf(net.nanopay.country.br.NatureCodeData.getOwnClassInfo())
      .build();
  """,
  "client":
    """
      {
        "of":"net.nanopay.country.br.NatureCodeData"
      }
    """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "NatureCodePaymentProviderJunctionDAO",
  "lazy": false,
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("natureCodePaymentProviderJunctionDAO")
      .setOf(net.nanopay.country.br.NatureCodePaymentProviderJunction.getOwnClassInfo())
      .build();
  """,
  "client":
    """
      {
        "of":"net.nanopay.country.br.NatureCodePaymentProviderJunction"
      }
    """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "TransactionReversalDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setNullify(true)
      .setAuthorize(false)
      .setOf(net.nanopay.tx.ReversalRequest.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .build();
  """,
  "client":
    """
      {
        "of":"net.nanopay.tx.ReversalRequest"
      }
    """
})
