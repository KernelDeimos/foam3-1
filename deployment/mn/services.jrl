//Medusa Node
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"nSpecDAO",
  "serve":true,
  "authenticate": false,
  "serviceClass":"foam.dao.ProxyDAO",
  "client":"{\"of\":\"foam.nanos.boot.NSpec\",\"cache\":true}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"http",
  "lazy":false,
  "service":{
    "class":"foam.nanos.jetty.HttpServer",
    "port":8080,
    "forwardedForProxyWhitelist":[],
    "welcomeFiles": ["welcome"],
    "servletMappings": [{
      "class": "foam.nanos.servlet.ServletMapping",
      "servletObject": {
        "class": "foam.nanos.servlet.VirtualHostRoutingServlet",
        "hostMapping": {
          "ablii": "/ablii.html",
          "localhost": "/index.html"
        },
        "defaultHost": "localhost"
      },
      "pathSpec": "/welcome"
    }, {
      "class": "foam.nanos.servlet.ServletMapping",
      "className": "foam.nanos.http.NanoRouter",
      "pathSpec": "/service/*"
    }, {
      "class": "foam.nanos.servlet.ServletMapping",
      "className": "foam.nanos.servlet.ResourceImageServlet",
      "pathSpec": "/images/*",
      "initParameters": {
        "paths": "images"
      }
    }, {
      "class": "foam.nanos.servlet.ServletMapping",
      "className": "org.eclipse.jetty.servlet.DefaultServlet",
      "pathSpec": "/*",
      "initParameters": {
        "pathInfoOnly": "true",
        "welcomeServlets": "true",
        "dirAllowed": "false"
      }
    }],
    "errorMappings": [{
      "class": "foam.nanos.servlet.ErrorPageMapping",
      "errorCode": 404,
      "location": "/errorPage.html"
    }, {
      "class": "foam.nanos.servlet.ErrorPageMapping",
      "exceptionType": "javax.ws.rs.NotAuthorizedException",
      "location": "/unauthorizedAccess.html"
    }, {
      "class": "foam.nanos.servlet.ErrorPageMapping",
      "exceptionType": "java.lang.Throwable",
      "location": "/errorPage.html"
    }],
    "filterMappings": [{
      "class": "foam.nanos.servlet.FilterMapping",
      "filterClass": "net.nanopay.security.csp.CSPFilter",
      "pathSpec": "/*",
      "initParameters": {
        "CONTENT_SECURITY_POLICY": """
          default-src 'none';
          child-src 'self';
          worker-src 'self';
          connect-src 'self' data: blob: filesystem: ws:;
          script-src 'self' https://cdn.plaid.com/link/v2/stable/link-initialize.js 'unsafe-eval' 'sha256-HY1JzEwuxkis4xx0ggY23gbYY/MCEAE1T6+OQnWS2vA=' 'sha256-NiNrLgJ8wbIXIi5saiR3XTd1Mxm4k0nju66GJsw4b9U=' 'sha256-FLYDXBkz4oo/H5jEfYXqAGYUwERY44OO1yznaMCdMiU=' 'sha256-G3UfiJBy6rwOk3glkBQuQDFA7IoCtiOT56gTh+IfNF0=';
          style-src 'self' https://fonts.googleapis.com/css https://fonts.googleapis.com/icon data: chrome-extension-resource: 'unsafe-inline';
          font-src 'self' https://fonts.gstatic.com data: chrome-extension-resource:;
          img-src 'self' data: blob: filesystem:;
          media-src * data: blob: filesystem:;
          object-src 'self' data: blob: filesystem:;
          frame-src 'self' https://cdn.plaid.com/link/ nanopay.net nanopay.net data: chrome-extension-resource:;
          report-uri /service/CSPReportWebAgent;
        """
      }
    }]
  }
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"tcpServer",
  "lazy":false,
  "serve":true,
  "serviceClass":"foam.nanos.mrac.TCPNioServer"
})

p({"class":"foam.nanos.boot.NSpec", "name":"AuthenticatedNSpecDAO",              "serve":true,  "serviceClass":"foam.dao.ProxyDAO", "client":"{\"of\":\"foam.nanos.boot.NSpec\",\"cache\":true}"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "auth",
  "serve": true,
  "authenticate": false,
  "boxClass": "foam.nanos.auth.AuthServiceSkeleton",
  "serviceScript": """
    return new foam.nanos.auth.SystemAuthService.Builder(x)
      .setDelegate(new foam.nanos.auth.twofactor.TwoFactorAuthService.Builder(x)
      .setDelegate(new foam.nanos.auth.PasswordExpiryAuthService.Builder(x)
      .setDelegate(new foam.nanos.auth.EnabledCheckAuthService.Builder(x)
      .setDelegate(new foam.nanos.auth.CachingAuthService(new foam.nanos.auth.UserAndGroupAuthService(x)))
      .build()).build()).build()).build();
  """,
  "client": "{\"class\":\"foam.nanos.auth.CachedAuthServiceProxy\",\"delegate\":{\"class\":\"foam.nanos.auth.ClientLoginAuthService\"}}"
})

//Medusa Node Port
p({"class":"foam.nanos.boot.NSpec", "name":"singleJournal", "authenticate":false, "boxClass": "foam.dao.DAOSkeleton",          "lazy":false,  "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setRuler(false).setPermissioned(false).setGuid(false).setAuthorize(false).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"singleJournals\").setMedusaNode(true).setOf(foam.nanos.mrac.MedusaEntry.getOwnClassInfo()).build();", "client":"{\"of\":\"foam.nanos.mrac.MedusaEntry\", \"remoteListenerSupport\": false}"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "MNService",
  "serve": true,
  "authenticate": false,
  "boxClass": "foam.nanos.mrac.MNServiceSkeleton",
  "serviceScript": """
    return new foam.nanos.mrac.MNServiceImpl();
  """,
  "client": """
    {
      "class": "foam.nanos.auth.ClientLoginAuthService"
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "entryRecordDAO",
  "lazy": false,
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO
      .Builder(x)
      .setRuler(false)
      .setAuthorize(false)
      .setSeqNo(true)
      .setCluster(false)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("entryRecords")
      .setOf(foam.nanos.mrac.EntryRecord.getOwnClassInfo())
      .build();
  """,
  "client": """
    {
      "of": "foam.nanos.mrac.EntryRecord"
    }
  """
})

p({"class":"foam.nanos.boot.NSpec","name":"appConfig",                         "lazy":false, "service":{"class":"foam.nanos.app.AppConfig"}})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "ping",
  "lazy": "false",
  "authenticate": false,
  "serviceClass": "foam.nanos.http.PingService"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"scriptDAO",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setGuid(true)
      .setOf(foam.nanos.script.Script.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("scripts")
      .setDecorator(new foam.nanos.script.ScriptRunnerDAO(null))
      .setOrder(new foam.core.PropertyInfo[] {foam.nanos.script.Script.ID})
      .setIndex(new foam.core.PropertyInfo[] {foam.nanos.script.Script.ID})
      .build();
  """,
  "client":"{\"of\":\"foam.nanos.script.Script\"}"
})
