p({"class":"foam.nanos.test.Test","passed":8,"failed":0,"id":"Account Balance Dashboard Test","enabled":true,"description":"","lastRun":"2018-08-29T21:15:20.345Z","lastDuration":79,"server":true,"status":1,"code":"userDAO        = x.get(\"userDAO\");\naccountDAO     = x.get(\"accountDAO\");\ninstitutionDAO = x.get(\"institutionDAO\");\ntransactionDAO = x.get(\"localTransactionDAO\");\nbalanceDAO     = x.get(\"balanceDAO\");\nliquidityDAO   = x.get(\"liquiditySettingsDAO\");\nquoteDAO       = x.get(\"localTransactionQuotePlanDAO\");\n\nRandom ran = new Random();\n\n//Create a Admin User\nuser = new foam.nanos.auth.User();\nuser.setId(Long.valueOf(1000));\nuser.setGroup(\"admin\");\nuser.setOrganization(\"Admin\");\nuser.setEmailVerified(true);\nuser.setFirstName(\"AD\");\nuser.setLastName(\"MIN\");\nuser.setEmail(\"ad@mins.com\");\nuserDAO.put(user);\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(net.nanopay.account.DigitalAccount.findDefault(x,user,\"CAD\").getId());\nliquidityDAO.put(ls);\n\n//Create a Test User\nuser = new foam.nanos.auth.User();\nuser.setId(Long.valueOf(950));\nuser.setGroup(\"business\");\nuser.setOrganization(\"Balony\");\nuser.setEmailVerified(true);\nuser.setFirstName(\"test1\");\nuser.setLastName(\"TEST\");\nuser.setEmail(\"test1@t.com\");\nuserDAO.put(user);\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(net.nanopay.account.DigitalAccount.findDefault(x,user,\"CAD\").getId());\nliquidityDAO.put(ls);\n\n//Create a Test User\nuser = new foam.nanos.auth.User();\nuser.setId(Long.valueOf(955));\nuser.setGroup(\"business\");\nuser.setOrganization(\"Balony\");\nuser.setEmailVerified(true);\nuser.setFirstName(\"test2\");\nuser.setLastName(\"TEST\");\nuser.setEmail(\"test2@t.com\");\nuserDAO.put(user);\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(net.nanopay.account.DigitalAccount.findDefault(x,user,\"CAD\").getId());\nliquidityDAO.put(ls);\n\n//Grab Users for test\ntestDigital1        =(foam.nanos.auth.User) userDAO.find(950);\ntestDigital2        =(foam.nanos.auth.User) userDAO.find(955);\nadmin               =(foam.nanos.auth.User) userDAO.find(1000);\n\n//Grab Digital Accounts for test\nuserDigitalAccount  = net.nanopay.account.DigitalAccount.findDefault(x,admin,\"CAD\");\ntestDigitalAccount1 = net.nanopay.account.DigitalAccount.findDefault(x,testDigital1,\"CAD\");\ntestDigitalAccount2 = net.nanopay.account.DigitalAccount.findDefault(x,testDigital2,\"CAD\");\n\n//Create a bank account to User 1350\naccount = new  net.nanopay.bank.CABankAccount();\naccount.setAccountNumber(\"\"+(ran.nextInt(1000000)+10000));\naccount.setInstitutionNumber(\"\"+(ran.nextInt(899) + 100));\naccount.setBranchId(\"\"+(ran.nextInt(89999) + 10000));\naccount.setOwner(admin.getId());\naccount.setName(\"\"+ran.nextInt(1000));\naccount.setStatus(net.nanopay.bank.BankAccountStatus.VERIFIED);\naccount.setDenomination(\"CAD\");\naccount.setId(1351);\naccountDAO.put(account);\n\n//Cashin to User 1350\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(userDigitalAccount.getId());\ntransaction.setSourceAccount(account.getId());\ntransaction.setAmount(300000);\ntransaction.setStatus(net.nanopay.tx.model.TransactionStatus.COMPLETED);\n//transactionDAO.put(transaction);\nquote = new net.nanopay.tx.TransactionQuote.Builder(x).setRequestTransaction(transaction).build();\nquote = quoteDAO.put(quote);\ntransactionDAO.put(quote.getPlan().getTransaction());\n\n// Transfer from user 1350 -> 950\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(testDigitalAccount1.getId());\ntransaction.setSourceAccount(userDigitalAccount.getId());\ntransaction.setAmount(100000);\ntransaction.setType(net.nanopay.tx.TransactionType.NONE);\ntransaction.setStatus(net.nanopay.tx.model.TransactionStatus.COMPLETED);\n//transactionDAO.put(transaction);\nquote = new net.nanopay.tx.TransactionQuote.Builder(x).setRequestTransaction(transaction).build();\nquote = quoteDAO.put(quote);\ntransactionDAO.put(quote.getPlan().getTransaction());\ntest(testDigitalAccount1.findBalance(x)== 100000,\"Expected:100000 Result:\"+testDigitalAccount1.findBalance(x));\n\n/// Transfer from user 1350 -> 955\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(testDigitalAccount2.getId());\ntransaction.setSourceAccount(userDigitalAccount.getId());\ntransaction.setAmount(100000);\ntransaction.setType(net.nanopay.tx.TransactionType.NONE);\ntransaction.setStatus(net.nanopay.tx.model.TransactionStatus.COMPLETED);\n//transactionDAO.put(transaction);\nquote = new net.nanopay.tx.TransactionQuote.Builder(x).setRequestTransaction(transaction).build();\nquote = quoteDAO.put(quote);\ntransactionDAO.put(quote.getPlan().getTransaction());\ntest( testDigitalAccount2.findBalance(x)== 100000,\"Expected:100000 Result:\"+testDigitalAccount2.findBalance(x));\n\n// Transfer from user 950 -> 955\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(testDigitalAccount2.getId());\ntransaction.setSourceAccount(testDigitalAccount1.getId());\ntransaction.setAmount(10000);\ntransaction.setType(net.nanopay.tx.TransactionType.NONE);\ntransaction.setStatus(net.nanopay.tx.model.TransactionStatus.COMPLETED);\n//transactionDAO.put(transaction);\nquote = new net.nanopay.tx.TransactionQuote.Builder(x).setRequestTransaction(transaction).build();\nquote = quoteDAO.put(quote);\ntransactionDAO.put(quote.getPlan().getTransaction());\n\ntest(testDigitalAccount2.findBalance(x) == 110000,\"Expected:110000 Result:\"+testDigitalAccount2.findBalance(x));\ntest(testDigitalAccount1.findBalance(x) == 90000,\"Expected:90000 Result:\"+testDigitalAccount1.findBalance(x));\n\n// Transfer from user 955 -> 950\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(testDigitalAccount1.getId());\ntransaction.setSourceAccount(testDigitalAccount2.getId());\ntransaction.setAmount(50000);\ntransaction.setType(net.nanopay.tx.TransactionType.NONE);\ntransaction.setStatus(net.nanopay.tx.model.TransactionStatus.COMPLETED);\n//transactionDAO.put(transaction);\nquote = new net.nanopay.tx.TransactionQuote.Builder(x).setRequestTransaction(transaction).build();\nquote = quoteDAO.put(quote);\ntransactionDAO.put(quote.getPlan().getTransaction());\n\ntest(testDigitalAccount2.findBalance(x) == 60000,\"Expected:60000 Result:\"+testDigitalAccount2.findBalance(x));\ntest(testDigitalAccount1.findBalance(x) == 140000,\"Expected:140000 Result:\"+testDigitalAccount1.findBalance(x));\n\n// Clear test amounts from user 955 -> 1350\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(userDigitalAccount.getId());\ntransaction.setSourceAccount(testDigitalAccount2.getId());\ntransaction.setAmount(testDigitalAccount2.findBalance(x));\ntransaction.setType(net.nanopay.tx.TransactionType.NONE);\ntransaction.setStatus(net.nanopay.tx.model.TransactionStatus.COMPLETED);\n//transactionDAO.put(transaction);\nquote = new net.nanopay.tx.TransactionQuote.Builder(x).setRequestTransaction(transaction).build();\nquote = quoteDAO.put(quote);\ntransactionDAO.put(quote.getPlan().getTransaction());\ntest( testDigitalAccount2.findBalance(x)== 0,\"Expected:0 Result:\"+testDigitalAccount2.findBalance(x));\n\n// Clear test amounts from user 950 -> 1350\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(userDigitalAccount.getId());\ntransaction.setSourceAccount(testDigitalAccount1.getId());\ntransaction.setAmount(testDigitalAccount1.findBalance(x));\ntransaction.setType(net.nanopay.tx.TransactionType.NONE);\ntransaction.setStatus(net.nanopay.tx.model.TransactionStatus.COMPLETED);\n//transactionDAO.put(transaction);\nquote = new net.nanopay.tx.TransactionQuote.Builder(x).setRequestTransaction(transaction).build();\nquote = quoteDAO.put(quote);\ntransactionDAO.put(quote.getPlan().getTransaction());\ntest( testDigitalAccount2.findBalance(x)== 0,\"Expected:0 Result:\"+testDigitalAccount1.findBalance(x));","output":"SUCCESS: Expected:100000 Result:100000\nSUCCESS: Expected:100000 Result:100000\nSUCCESS: Expected:110000 Result:110000\nSUCCESS: Expected:90000 Result:90000\nSUCCESS: Expected:60000 Result:60000\nSUCCESS: Expected:140000 Result:140000\nSUCCESS: Expected:0 Result:0\nSUCCESS: Expected:0 Result:0\n","notes":""})
