foam.CLASS({
  package: 'net.nanopay.sme.ui',
  name: 'PersonalSettingsView',
  extends: 'foam.u2.Controller',

  documentation: 'Personal settings page for sme',

  imports: [
    'agent',
    'auth',
    'ctrl',
    'notify',
    'stack',
    'twofactor',
    'user'
  ],

  requires: [
    'foam.u2.dialog.Popup',
    'net.nanopay.ui.ExpandContainer',
    'net.nanopay.ui.NewPasswordView'
  ],

  css: `
    ^ {
      margin: auto;
      max-width: 1100px;
    }
    ^password-wrapper {
      vertical-align: top;
      width: 300px;
      display: inline-block;
      margin-right: 50px;
    }
    ^change-password-card {
      padding: 24px;
      min-width: 350px;
    }
    ^ .input-field {
      background: white;
    }
    ^two-factor-card {
      padding: 24px;
      min-width: 350px;
    }
    ^two-factor-instr {
      margin: 0 auto;
    }
    ^two-factor-instr-left {
      display: inline-block;
      width: 360px;
    }
    ^step-1 span {
      font-family: Lato;
      font-size: 14px;
      font-weight: normal;
      font-style: normal;
      font-stretch: normal;
      line-height: 1.5;
      letter-spacing: normal;
      color: #8e9090;
    }
    ^two-factor-link {
      color: #604aff;
      display: inline-block;
      margin-top: 8px;
      text-decoration: none;
    }
    ^step-2 {
      margin-top: 32px;
    }
    ^step-2 span {
      font-family: Lato;
      font-size: 14px;
      font-weight: normal;
      font-style: normal;
      font-stretch: normal;
      line-height: 1.5;
      letter-spacing: normal;
      color: #8e9090;
    }
    ^two-factor-instr-right {
      display: inline-block;
      vertical-align: top;
      margin-top: 30px;
    }
    ^two-factor-qr-code {
      display: inline-block;
      width: 141px;
      height: 141px;
      padding-right: 32px;
    }
    ^two-factor-enable {
      display: inline-block;
      vertical-align: top;
      width: 325px;

    }
    ^two-factor-disable {
      display: flex;
      flex-direction: row;
    }
    ^status-container {
      flex-direction: column;
    }
    ^status {
      font-size: 14px;
      line-height: 1.5;
      color: #2b2b2b;
    }
    ^two-factor-enabled {
      font-size: 11px;
      line-height: 1.36;
      color: #03cf1f;
    }
    ^two-factor-disabled {
      font-size: 11px;
      line-height: 1.36;
      color: #f91c1c;
    }
    ^enter-validation-code {
      color: #2b2b2b;
      font-size: 12px;
      font-weight: 600;
      margin-bottom: 8px;
    }
    ^ .property-twoFactorToken {
      width: 219px;
    }
    ^ .net-nanopay-ui-ActionView-enableTwoFactor {
      width: 96px;
      margin-left: 8px;
    }
    ^ .net-nanopay-ui-ActionView-disableTwoFactor {
      width: 96px;
      color: #f91c1c;
      background-color: transparent;
      border: 1px solid #f91c1c;
      margin-left: auto;
    }
    ^ .net-nanopay-ui-ActionView-disableTwoFactor:hover {
      color: #f91c1c;
      background-color: transparent !important;
      border: 1px solid #f91c1c;
    }
    ^ .validation-input {
      margin-top: 42px;
    }
    @media only screen and (max-width: 767px) {
      ^ .validation-input {
        margin-top: 15px;
      }
      ^two-factor-enable {
        margin-top: 15px;
      }

    }
    @media only screen and (min-width: 1313px) {
      ^two-factor-instr-right {
        margin-left: 110px;
      }
  `,

  constants: [
    {
      type: 'String',
      name: 'IOS_LINK',
      value: 'https://itunes.apple.com/ca/app/google-authenticator/id388497605?mt=8'
    },
    {
      type: 'String',
      name: 'ANDROID_LINK',
      value: 'https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en'
    },
  ],

  properties: [
    {
      Class: 'Int',
      name: 'passwordStrength',
      value: 0
    },
    {
      class: 'String',
      name: 'originalPassword',
      view: { class: 'foam.u2.view.PasswordView' }
    },
    {
      class: 'String',
      name: 'newPassword',
      view: { class: 'net.nanopay.ui.NewPasswordView' }
    },
    {
      class: 'String',
      name: 'confirmPassword',
      view: { class: 'foam.u2.view.PasswordView' }
    },
    {
      class: 'String',
      name: 'twoFactorQrCode',
      documentation: 'Two-factor authentication QR code string'
    },
    {
      class: 'String',
      name: 'twoFactorToken',
      documentation: 'Two-factor token generated by authenticator app',
    }
  ],

  messages: [
    { name: 'TITLE', message: 'Personal Settings' },
    { name: 'CHANGE_PASSWORD_SUBTITLE', message: 'Change Password' },
    { name: 'PASSWORD_STRENGTH_ERROR', message: 'Password is not strong enough.' },
    { name: 'emptyOriginal', message: 'Please enter your original password' },
    { name: 'emptyPassword', message: 'Please enter your new password' },
    { name: 'emptyConfirmation', message: 'Please re-enter your new password' },
    { name: 'passwordMismatch', message: 'Passwords do not match' },
    { name: 'passwordSuccess', message: 'Password successfully updated' },
    { name: 'TWO_FACTOR_SUBTITLE', message: 'Two-factor Authentication' },
    { name: 'TwoFactorInstr1', message: 'Download the authenticator app on your mobile device' },
    { name: 'TwoFactorInstr2', message: 'Open the authenticator app on your mobile device and scan the QR code to retrieve your validation code then enter it in into the field on the right.' },
    { name: 'EnableTwoFactor', message: 'Enter validation code' },
    { name: 'IOSName', message: 'iOS authenticator download' },
    { name: 'AndroidName', message: 'Android authenticator download' },
    { name: 'TwoFactorNoTokenError', message: 'Please enter a verification token.' },
    { name: 'TwoFactorEnableSuccess', message: 'Two-factor authentication enabled.' },
    { name: 'TwoFactorEnableError', message: 'Could not enable two-factor authentication. Please try again.' },
    { name: 'StepOne', message: 'Step 1' },
    { name: 'StepTwo', message: 'Step 2' },
    { name: 'EnterCode', message: 'Enter code' },
    { name: 'Status', message: 'Status' },
    { name: 'Enabled', message: '• Enabled' },
    { name: 'Disabled', message: '• Disabled' }
  ],

  methods: [
    function initE() {
      this
      .addClass(this.myClass())
      .start('h1').add(this.TITLE).end()

      .start().addClass('card').addClass(this.myClass('change-password-card'))
        .start()
          .addClass('sub-heading')
          .add(this.CHANGE_PASSWORD_SUBTITLE)
        .end()
        .start().addClass(this.myClass('change-password-content'))
          .start().addClass('input-wrapper')
            .addClass(this.myClass('password-wrapper'))
            .start().add('Original Password').addClass('input-label').end()
            .start(this.ORIGINAL_PASSWORD).end()
          .end()
          .start().addClass('input-wrapper')
            .addClass(this.myClass('password-wrapper'))
            .start().add('New Password').addClass('input-label').end()
            .start(this.NEW_PASSWORD, {
              passwordStrength$: this.passwordStrength$
            })
            .end()
          .end()
          .start().addClass('input-wrapper')
            .addClass(this.myClass('password-wrapper'))
            .start().add('Confirm Password').addClass('input-label').end()
            .start(this.CONFIRM_PASSWORD).end()
          .end()
        .end()
        .start(this.UPDATE_PASSWORD)
          .addClass('input-wrapper')
          .addClass('sme').addClass('button').addClass('primary')
        .end()
      .end()

      .br()

      .start().addClass('card').addClass(this.myClass('two-factor-card'))
        .start()
          .addClass('sub-heading')
          .add(this.TWO_FACTOR_SUBTITLE)
        .end()
        .add(this.slot(function(twoFactorEnabled) {
          if ( ! twoFactorEnabled ) {
            // two factor disabled
            var self = this;
            this.twofactor.generateKey(null, true)
            .then(function(qrCode) {
              self.twoFactorQrCode = qrCode;
            });

            return this.E()
              .br()
              .start().addClass(this.myClass('two-factor-instr'))
                .start().addClass(this.myClass('two-factor-instr-left'))
                  .start().addClass(this.myClass('step-1'))
                    .start('b').add(this.StepOne).end()
                    .br()
                    .start('span').add(this.TwoFactorInstr1).end()
                    .br()
                    .start('a').addClass(this.myClass('two-factor-link'))
                      .add(this.IOSName)
                      .attrs({ href: this.IOS_LINK, target: '_blank' })
                    .end()
                    .br()
                    .start('a').addClass(this.myClass('two-factor-link'))
                      .add(this.AndroidName)
                      .attrs({ href: this.ANDROID_LINK, target: '_blank' })
                    .end()
                  .end()
                  .start().addClass(this.myClass('step-2'))
                    .start('b').add(this.StepTwo).end()
                    .br()
                    .start('span').add(this.TwoFactorInstr2).end()
                  .end()
                .end()

                .start().addClass(this.myClass('two-factor-instr-right'))
                  .start().addClass(this.myClass('two-factor-qr-code'))
                    .start('img').attrs({ src: this.twoFactorQrCode$ }).end()
                  .end()

                  .start().addClass(this.myClass('two-factor-enable'))
                    .start('b').addClass(this.myClass('status'))
                      .add(this.Status)
                    .end()
                    .start().addClass(this.myClass('two-factor-disabled'))
                      .add(this.Disabled)
                    .end()

                    .start().addClass('validation-input')
                      .start().addClass(this.myClass('enter-validation-code'))
                        .add(this.EnableTwoFactor)
                      .end()
                      .start(this.TWO_FACTOR_TOKEN)
                        .attrs({ placeholder: this.EnterCode })
                      .end()
                      .start(this.ENABLE_TWO_FACTOR)
                        .addClass('sme').addClass('button').addClass('primary')
                      .end()
                    .end()
                  .end()
                .end()
              .end();
          } else {
            // two factor enabled
            return this.E()
              .br()
              .start().addClass(this.myClass('two-factor-disable'))
                .start().addClass(this.myClass('status-container'))
                  .start('b').addClass(this.myClass('status'))
                    .add(this.Status)
                  .end()
                  .start().addClass(this.myClass('two-factor-enabled'))
                    .add(this.Enabled)
                  .end()
                .end()
                .start(this.DISABLE_TWO_FACTOR).end()
              .end();
          }
        }, this.agent.twoFactorEnabled$))
      .end();
    }
  ],

  actions: [
    {
      name: 'updatePassword',
      label: 'Update',
      code: function(X) {
        var self = this;

        // check if original password entered
        if ( ! this.originalPassword ) {
          this.ctrl.notify(this.emptyOriginal, 'error');
          return;
        }

        // validate new password
        if ( ! this.newPassword ) {
          this.ctrl.notify(this.emptyPassword, 'error');
          return;
        }

        if ( this.passwordStrength < 3 ) {
          this.ctrl.notify(this.PASSWORD_STRENGTH_ERROR, 'error');
          return false;
        }

        // check if confirmation entered
        if ( ! this.confirmPassword ) {
          this.ctrl.notify(this.emptyConfirmation, 'error');
          return;
        }

        // check if passwords match
        if ( ! this.confirmPassword.trim() || this.confirmPassword !== this.newPassword ) {
          this.ctrl.notify(this.passwordMismatch, 'error');
          return;
        }

        // update password
        this.auth.updatePassword(null, this.originalPassword, this.newPassword)
          .then(function(result) {
            // copy new user, clear password fields, show success
            self.user.copyFrom(result);
            self.originalPassword = null;
            self.newPassword = null;
            self.confirmPassword = null;
            self.ctrl.notify(self.passwordSuccess);
          })
          .catch(function(err) {
            self.ctrl.notify(err.message, 'error');
          });
      }
    },
    {
      name: 'enableTwoFactor',
      label: 'Enable',
      code: function(X) {
        var self = this;

        if ( ! this.twoFactorToken ) {
          this.ctrl.notify(this.TwoFactorNoTokenError, 'error' );
          return;
        }

        this.twofactor.verifyToken(null, this.twoFactorToken)
        .then(function(result) {
          if ( ! result ) {
            self.ctrl.notify(self.TwoFactorEnableError, 'error');
            return;
          }

          self.twoFactorToken = null;
          self.agent.twoFactorEnabled = true;
          self.ctrl.notify(self.TwoFactorEnableSuccess);
        })
        .catch(function(err) {
          console.warn(err);
          self.ctrl.notify(self.TwoFactorEnableError, 'error');
        });
      }
    },
    {
      name: 'disableTwoFactor',
      label: 'Disable',
      code: function() {
        this.add(this.Popup.create().tag({
          class: 'net.nanopay.sme.ui.ConfirmDisable2FAModal',
        }));
      }
    }
  ]
});
