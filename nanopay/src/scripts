p({"class":"foam.nanos.script.Script","id":"createInvoices","description":"Create Test Data","server":false,"scheduled":false,"code":" var MS_PER_DAY = 1000 * 3600 * 24;\nvar invoiceDAO = x.invoiceDAO;\n\nthis.__context__.userDAO.select().then(function (bs) {\nvar l = bs.array.length;\nfor ( var i = 0 ; i < 1000 ; i++ ) {\nvar fi = Math.floor(Math.random()*l);\nvar ti = Math.floor(Math.random()*l);\nvar dd = new Date(Date.now() - 2*360*MS_PER_DAY*(Math.random()-0.1));\nvar amount = Math.floor(Math.pow(10,3+Math.random()*4))/100;\n\nif ( ti === fi ) continue;\nvar inv = net.nanopay.invoice.model.Invoice.create({\ndraft:            Math.random()<0.002,\ninvoiceNumber:    10000+i,\npurchaseOrder:    10000+i,\npayerId:   bs.array[fi].id,\npayeeId:   bs.array[ti].id,\n// fromBusinessName: bs.array[fi-100].name,\n// toBusinessName:   bs.array[ti-100].name,\ndueDate:        dd,\namount:           amount\n},x);\n\nif ( Math.random() < 0.005 ) {\ninv.paymentId = -1;\n} else if ( Math.random() < 0.97 ) {\ninv.paymentDate = new Date(inv.dueDate.getTime() - ( 7 + Math.random() * 60 ) * MS_PER_DAY);\nif ( inv.paymentDate < Date.now() ) {\ninv.paymentId = inv.invoiceNumber;\n}\n}\n\nconsole.log(inv.stringify());\ninvoiceDAO.put(inv);\n}\n\n});","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"createUsers","enabled":false,"description":"Create test Users","lastDuration":0,"server":false,"scheduled":false,"code":"var lastNames = [\n'Martin',\n'Jacobs',\n'Yang',\n'Smith',\n'Johnson',\n'Williams',\n'Jones',\n'Brown',\n'Davis',\n'Miller',\n'Wilson',\n'Moore',\n'Taylor',\n'Anderson',\n'Thomas',\n'Jackson',\n'White',\n'Harris',\n'Martin',\n'Thompson',\n'Garcia',\n'Martinez',\n'Robinson',\n'Clark',\n'Rodrigues',\n'Lewis',\n'Lee',\n'Walker',\n'Hall',\n'Allen',\n'Young',\n'Hernandez',\n'King',\n'Wright',\n'Lopez',\n'Hill',\n'Scott',\n'Green',\n'Adams',\n'Baker',\n'Gonzalez',\n'Nelson',\n'Carter',\n'Mitchell',\n'Perez',\n'Roberts',\n'Turner',\n'Phillips',\n'Campbell',\n'Parker',\n'Evans',\n'Edwards',\n'Collins',\n'Stewart',\n'Sanchez',\n'Morris',\n'Rogers',\n'Reed',\n'Cook',\n'Morgan',\n'Bell',\n'Murphy',\n'Bailey',\n'Rivera',\n'Cooper',\n'Richardson',\n'Cox',\n'Howard',\n'Ward',\n'Torres',\n'Peterson',\n'Gray',\n'Ramirez',\n'James',\n'Watson',\n'Brooks',\n'Kelly',\n'Sanders',\n'Price',\n'Bennett',\n'Wood'\n];\nvar firstNames = [\n'Ricky',\n'Sophia',\n'Jian',\n'Jackson',\n'Emma',\n'Aiden',\n'Olivia',\n'Lucas',\n'Ava',\n'Liam',\n'Mia',\n'Noah',\n'Isabella',\n'Ethan',\n'Riley',\n'Mason',\n'Aria',\n'Caden',\n'Zoe',\n'Oliver',\n'Charlotte',\n'Elijah',\n'Lily',\n'Grayson',\n'Layla',\n'Jacob',\n'Amelia',\n'Michael',\n'Emily',\n'Benjamin',\n'Madelyn',\n'Carter',\n'Aubrey',\n'James',\n'Adalyn',\n'Jayden',\n'Madison',\n'Alexander',\n'Harper',\n'Caleb',\n'Abigail',\n'Ryan',\n'Aaliyah',\n'Luke',\n'Avery',\n'Daniel',\n'Evelyn',\n'Jack',\n'Kaylee',\n'William',\n'Ella',\n'Owen',\n'Ellie',\n'Gabriel',\n'Scarlett',\n'Matthew',\n'Arianna',\n'Connor',\n'Hailey',\n'Jayce',\n'Nora',\n'Isaac',\n'Addison',\n'Sebastian',\n'Brooklyn',\n'Henry',\n'Hannah',\n'Muhammad',\n'Mila',\n'Cameron',\n'Leah',\n'Wyatt',\n'Elizabeth',\n'Dylan',\n'Sarah',\n'Nathan',\n'Eliana',\n'Nicholas'\n];\n\n\n[\n'AAA CAD Business',\n'ABC Engineering',\n'Ali Designs',\n'Betasoloin',\n'Betatech',\n'Bioholding',\n'Bioplex',\n'Blackzim',\n'Cancity',\n'Codehow',\n'Condax',\n'Conecom',\n'Dalttechnology',\n'dambase',\n'Domzoom',\n'Doncon',\n'Donquadtech',\n'Dontechi',\n'Donware',\n'Fasehatice',\n'Faxquote',\n'Finhigh',\n'Finjob',\n'Funholding',\n'Ganjaflex',\n'Gogozoom',\n'Golddex',\n'Goodsilron',\n'Green-Plus',\n'Groovestreet',\n'Hatfan',\n'Hottechi',\n'Inity',\n'Isdom',\n'Iselectrics',\n'J-Texon',\n'Kan-code',\n'Kinnamplus',\n'Konex',\n'Konmatfix',\n'Labdrill',\n'Lexiqvolax',\n'Mathtouch',\n'Nam-zim',\n'Newex',\n'Ontomedia',\n'Openlane',\n'Opentech',\n'Plexzap',\n'Plusstrip',\n'Plussunin',\n'Rangreen',\n'Rantouch',\n'Ron-tech',\n'Rundofase',\n'Scotfind',\n'Scottech',\n'Silis',\n'Singletechno',\n'Sonron',\n'Stanredtax',\n'Statholdings',\n'Streethex',\n'Sumace',\n'Sunnamplex',\n'Toughzap',\n'Treequote',\n'Warephase',\n'Xx-holding',\n'Xx-zobam',\n'Y-corporation',\n'year-job',\n'Yearin',\n'Zathunicon',\n'Zencorporation',\n'Zoomit',\n'Zotware',\n'Zumgoity'\n].forEach(function (name, i) {\nvar user = foam.nanos.auth.User.create({ id: 100+i, group: 'shopper', organization: name, verifiedEmail: true, firstName: firstNames[i], lastName: lastNames[i], email: 'person' + i + '@nanopay.net'});\nconsole.log(user.stringify());\nx.userDAO.put(user);\n})\n","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"CC Merch2 Email","description":"","lastRun":"2017-11-27T21:57:37.950Z","server":true,"scheduled":false,"code":"email = x.get(\"email\");\nemail.setUsername(\"nanopay.email@gmail.com\");\nemail.setPassword(\"smt5s3ndr\");\n\nmessage = new foam.nanos.notification.email.EmailMessage();\nmessage.setFrom(\"info@nanopay.net\");\nmessage.setReplyTo(\"noreply@nanopay.net\");\nmessage.setTo(new String[] { \"\" });\nmessage.setSubject(\"test\");\n\nmap = new java.util.HashMap();\nmap.put(\"name\", \"Mike\");\nmap.put(\"money\", \"$1,000\");\nmap.put(\"email\", \"mike@gmail.com\");\n\ntest(email.sendEmailFromTemplate(message, \"cc-template-invite/merc2\", map), \"email template test\");","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"CC Shopper Email","description":"","lastRun":"2017-11-27T21:57:40.527Z","server":true,"scheduled":false,"code":"email = x.get(\"email\");\nemail.setUsername(\"nanopay.email@gmail.com\");\nemail.setPassword(\"smt5s3ndr\");\n\nmessage = new foam.nanos.notification.email.EmailMessage();\nmessage.setFrom(\"info@nanopay.net\");\nmessage.setReplyTo(\"noreply@nanopay.net\");\nmessage.setTo(new String[] { \"\" });\nmessage.setSubject(\"test\");\n\nmap = new java.util.HashMap();\nmap.put(\"name\", \"Mike\");\nmap.put(\"money\", \"$1,000\");\nmap.put(\"email\", \"mike@gmail.com\");\n\ntest(email.sendEmailFromTemplate(message, \"cc-template-invite/shopper\", map), \"email template test\");","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"CC Merch1 Email","description":"","lastRun":"2017-11-27T21:57:39.558Z","server":true,"scheduled":false,"code":"email = x.get(\"email\");\nemail.setUsername(\"nanopay.email@gmail.com\");\nemail.setPassword(\"smt5s3ndr\");\n\nmessage = new foam.nanos.notification.email.EmailMessage();\nmessage.setFrom(\"info@nanopay.net\");\nmessage.setReplyTo(\"noreply@nanopay.net\");\nmessage.setTo(new String[] { \"\" });\nmessage.setSubject(\"test\");\n\nmap = new java.util.HashMap();\nmap.put(\"name\", \"Mike\");\nmap.put(\"money\", \"$1,000\");\nmap.put(\"email\", \"mike@gmail.com\");\n\ntest(email.sendEmailFromTemplate(message, \"cc-template-invite/merc1\", map), \"email template test\");","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"createOneUserPerGroup","description":"Create one sample user per group for testing purposes.","lastRun":"2017-12-03T18:00:46.805Z","server":true,"scheduled":false,"code":"import foam.nanos.auth.*;\n\nuserDAO = x.get(\"userDAO\");\ngroupDAO = x.get(\"groupDAO\");\n\ngroups = groupDAO.select().getArray();\n\nfor ( i = 0 ; i < groups.size() ; i++ ) {\ngroup = groups.get(i);\nuser = new User();\nuser.setGroup(group.getId());\nuser.setFirstName(group.getId());\nuser.setEmailVerified(true);\nuser.setEmail(group.getId() + \"@nanopay.net\");\nuser.setPassword(group.getId() + \"Ab1\");\nprint(user.getFirstName());\ntry { userDAO.put(user); } catch (Throwable t) { t.printStackTrace(); }\n}","output":"0\nccMerchant\nccAdmin\ntester\nadmin\nccShopper\n","notes":""})
p({"class":"foam.nanos.script.Script","id":"CC Reset Email","description":"","lastRun":"2017-12-05T21:58:16.190Z","server":true,"scheduled":false,"code":"email = x.get(\"email\");\nemail.setUsername(\"nanopay.email@gmail.com\");\nemail.setPassword(\"smt5s3ndr\");\n\nmessage = new foam.nanos.notification.email.EmailMessage();\nmessage.setFrom(\"info@nanopay.net\");\nmessage.setReplyTo(\"noreply@nanopay.net\");\nmessage.setTo(new String[] { \"\" });\nmessage.setSubject(\"test\");\n\nmap = new java.util.HashMap();\nmap.put(\"name\", \"Mike\");\n//needs valid reset link\nmap.put(\"link\", \"http://www.google.ca\");\n\ntest(email.sendEmailFromTemplate(message, \"cc-reset-password\", map), \"email template test\");","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"sftp","description":"sftp","lastRun":"2017-12-04T21:23:18.148Z","server":true,"scheduled":false,"code":"var sftp = x.get(\"alternaSftp\");\n\nsftp.sendCICOFile();","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"showRandomDepositAmounts","description":"Show random bank account deposit amounts.","code":"dao = x.get(\"localAccountDAO\");\na = dao.select().getArray();\n\nfor ( int i = 0 ; i < a.size() ; i++ ) {\n  account = a.get(i);\n  if ( account instanceof net.nanopay.bank.BankAccount ) {\n    amount = account.getRandomDepositAmount();\n    amountFormatted = amount >= 10 ? amount.toString() : \"0\" + amount.toString();\n    print(account.getName() + \" [id = \" + account.getId() + \"]\" + \": $0.\" + amountFormatted);\n  }\n}\n"})
p({"class":"foam.nanos.script.Script","id":"createMissingUserAccounts","description":"Create Balance for Users who don't already have one.","lastRun":"2017-12-12T20:21:12.903Z","server":true,"scheduled":false,"code":"userDAO = x.get(\"userDAO\");\nbalanceDAO = x.get(\"localBalanceDAO\");\n\nusers = userDAO.select().getArray();\n\nfor ( int i = 0 ; i < users.size() ; i++ ) {\nuser = users.get(i);\naccount = balanceDAO.find(user.getId());\n\nif ( account == null ) {\naccount = new net.nanopay.account.Balance();\naccount.setId(user.getId());\naccount.setOwner(user.getId());\nprint(\"creating \" + user.getId());\nbalanceDAO.put(account);\n}\n}\n\nprint(\"done\");","output":"creating 1345\ncreating 1346\ncreating 1347\ncreating 1348\ncreating 1349\ncreating 1350\ncreating 1354\ncreating 1356\ncreating 1006\ncreating 1007\ncreating 1008\ncreating 1009\ndone\n","notes":""})
p({"class":"foam.nanos.script.Script","id":"createTestTransactions","description":"Creates test transactions to and from users","lastRun":"2017-12-21T22:02:52.502Z","server":true,"scheduled":false,"code":"balanceDAO = x.get(\"localBalanceDAO\");\ntransactionDAO = x.get(\"localTransactionDAO\");\nuserDAO = x.get(\"userDAO\");\n\nusers = userDAO.select().getArray();\n\naccounts = balanceDAO.select().getArray();\n\nfor ( int i = 0 ; i < accounts.size() ; i++ ) {\naccount = accounts.get(i);\naccount.setBalance(1000000);\nprint(\"Balance set to 1000000 for account with id: \" + account.getId());\n}\n\nfor ( int i = 0 ; i < users.size() ; i++ ) {\nuser = users.get(i);\naccount = balanceDAO.find(user.getId());\nif ( account == null ) {\naccount = new net.nanopay.account.Balance();\naccount.setId(user.getId());\naccount.setOwner(user.getId());\naccount.setBalance(1000000);\nprint(\"creating account for user with ID: \" + user.getId());\nbalanceDAO.put(account);\n}\n}\n\nfor ( int i = 0; i < 500 ; i++ ) {\nfi = (int) (Math.random()*users.size());\nti = (int) (Math.random()*users.size());\namount = (int) ((Math.random() + 0.1) * 10000);\nif ( users.get(ti).id != users.get(fi).id ) {\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setPayeeId(users.get(ti).id);\ntransaction.setPayerId(users.get(fi).id);\ntransaction.setAmount(amount);\nprint(\"sending \" + amount + \" to user with ID: \" + users.get(ti).id);\ntransactionDAO.put(transaction);\n}\n}\n\nprint(\"Done\"); ","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"benchmarkTransactions","lastRun":"2018-01-22T13:43:55.407Z","lastDuration":135,"scheduled":false,"code":"x.get(\"transactionDAO\").removeAll();\nx.get(\"transactionLimitDAO\").removeAll();\nbalanceDAO = x.get(\"localBalanceDAO\");\ntransactionDAO = x.get(\"localTransactionDAO\");\nuserDAO = x.get(\"userDAO\");\n\nusers = userDAO.select().getArray();\n\naccounts = balanceDAO.select().getArray();\n\nfor ( int i = 0 ; i < accounts.size() ; i++ ) {\naccount = accounts.get(i);\naccount.setBalance(1000000);\n//print(\"Balance set to 1000000 for account with id: \" + account.getId());\n}\n\nfor ( int i = 0 ; i < users.size() ; i++ ) {\nuser = users.get(i);\naccount = balanceDAO.find(user.getId());\nif ( account == null ) {\naccount = new net.nanopay.account.Balance();\naccount.setId(user.getId());\naccount.setOwner(user.getId());\n}\naccount.setBalance(1000000);\n//print(\"creating account for user with ID: \" + user.getId());\nbalanceDAO.put(account);\n}\n\npm = new foam.nanos.pm.PM(Object.class, \"Create 10k txns\");\nfor ( int i = 0; i < 1000 ; i++ ) {\nfi = (int) (Math.random()*users.size());\nti = (int) (Math.random()*users.size());\namount = (int) ((Math.random() + 0.1) * 10000);\namount = 1;\nif ( users.get(ti).id != users.get(fi).id ) {\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setPayeeId(users.get(ti).id);\ntransaction.setPayerId(users.get(fi).id);\ntransaction.setAmount(amount);\n// print(\"sending \" + amount + \" to user with ID: \" + users.get(ti).id);\n// transactionDAO.put(transaction);\n}\n}\n\npm.log(x);\nprint(\"Done\"); \n\n","output":"Done\n"})
p({"class":"foam.nanos.script.Script","id":"benchmarkRSASignatureGeneration","description":"Concurrent RSA Signature Generation Benchmark","code":"import foam.nanos.bench.*;\nimport net.nanopay.bench.*;\n\nx = x.put(\"pmLogger\", null);\nb = new SignatureGenerationBenchmark(\"RSA\", \"SHA256\");\nbuilder = new BenchmarkRunner.Builder(x).setThreadCount(2).setInvocationCount(10000).setBenchmark(b);\nrunner = builder.build();\nrunner.execute(x);"})
p({"class":"foam.nanos.script.Script","id":"benchmarkRSASignatureVerification","description":"Concurrent RSA Signature Verification Benchmark","code":"import foam.nanos.bench.*;\nimport net.nanopay.bench.*;\n\nx = x.put(\"pmLogger\", null);\nb = new SignatureVerificationBenchmark(\"RSA\", \"SHA256\");\nbuilder = new BenchmarkRunner.Builder(x).setThreadCount(2).setInvocationCount(10000).setBenchmark(b);\nrunner = builder.build();\nrunner.execute(x);"})
p({"class":"foam.nanos.script.Script","id":"benchmarkECSignatureGeneration","description":"Concurrent EC Signature Generation Benchmark","code":"import foam.nanos.bench.*;\nimport net.nanopay.bench.*;\n\nx = x.put(\"pmLogger\", null);\nb = new SignatureGenerationBenchmark(\"EC\", \"SHA256\");\nbuilder = new BenchmarkRunner.Builder(x).setThreadCount(2).setInvocationCount(10000).setBenchmark(b);\nrunner = builder.build();\nrunner.execute(x);"})
p({"class":"foam.nanos.script.Script","id":"benchmarkECSignatureVerification","description":"Concurrent EC Signature Verification Benchmark","code":"import foam.nanos.bench.*;\nimport net.nanopay.bench.*;\n\nx = x.put(\"pmLogger\", null);\nb = new SignatureVerificationBenchmark(\"EC\", \"SHA256\");\nbuilder = new BenchmarkRunner.Builder(x).setThreadCount(2).setInvocationCount(10000).setBenchmark(b);\nrunner = builder.build();\nrunner.execute(x);"})
p({"class":"foam.nanos.script.Script","id":"HashingJDAO","description":"Tests the HashingJDAO","code":"balanceDAO = x.get(\"localBalanceDAO\");\ntransactionDAO = x.get(\"hashingTxnDAO\");\nuserDAO = x.get(\"userDAO\");\n\nusers = userDAO.select().getArray();\n\naccounts = balanceDAO.select().getArray();\n\nfor ( int i = 0 ; i < accounts.size() ; i++ ) {\naccount = accounts.get(i);\naccount.setBalance(1000000);\nprint(\"Balance set to 1000000 for account with id: \" + account.getId());\n}\n\nfor ( int i = 0 ; i < users.size() ; i++ ) {\nuser = users.get(i);\naccount = balanceDAO.find(user.getId());\nif ( account == null ) {\naccount = new net.nanopay.account.Balance();\naccount.setId(user.getId());\naccount.setOwner(user.getId());\naccount.setBalance(1000000);\nprint(\"creating account for user with ID: \" + user.getId());\nbalanceDAO.put(account);\n}\n}\n\nfor ( int i = 0; i < 500 ; i++ ) {\nfi = (int) (Math.random()*users.size());\nti = (int) (Math.random()*users.size());\namount = (int) ((Math.random() + 0.1) * 10000);\nif ( users.get(ti).id != users.get(fi).id ) {\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setPayeeId(users.get(ti).id);\ntransaction.setPayerId(users.get(fi).id);\ntransaction.setAmount(amount);\nprint(\"sending \" + amount + \" to user with ID: \" + users.get(ti).id);\ntransactionDAO.put(transaction);\n}\n}\n\nprint(\"Done\"); "})
p({"class":"foam.nanos.script.Script","id":"RollingHashingJDAO","description":"Tests the RollingHashingJDAO","code":"balanceDAO = x.get(\"localBalanceDAO\");\ntransactionDAO = x.get(\"rollingHashingTxnDAO\");\nuserDAO = x.get(\"userDAO\");\n\nusers = userDAO.select().getArray();\n\naccounts = balanceDAO.select().getArray();\n\nfor ( int i = 0 ; i < accounts.size() ; i++ ) {\naccount = accounts.get(i);\naccount.setBalance(1000000);\nprint(\"Balance set to 1000000 for account with id: \" + account.getId());\n}\n\nfor ( int i = 0 ; i < users.size() ; i++ ) {\nuser = users.get(i);\naccount = balanceDAO.find(user.getId());\nif ( account == null ) {\naccount = new net.nanopay.account.Balance();\naccount.setId(user.getId());\naccount.setOwner(user.getId());\naccount.setBalance(1000000);\nprint(\"creating account for user with ID: \" + user.getId());\nbalanceDAO.put(account);\n}\n}\n\nfor ( int i = 0; i < 500 ; i++ ) {\nfi = (int) (Math.random()*users.size());\nti = (int) (Math.random()*users.size());\namount = (int) ((Math.random() + 0.1) * 10000);\nif ( users.get(ti).id != users.get(fi).id ) {\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setPayeeId(users.get(ti).id);\ntransaction.setPayerId(users.get(fi).id);\ntransaction.setAmount(amount);\nprint(\"sending \" + amount + \" to user with ID: \" + users.get(ti).id);\ntransactionDAO.put(transaction);\n}\n}\n\nprint(\"Done\"); "})
p({"class":"foam.nanos.script.Script","id":"TransactionHashingAndSigning","description":"Demonstrates the rolling hashing functionality as well as signature generation and verification","code":"import foam.nanos.bench.Benchmark;\nimport java.math.BigInteger;\nimport java.security.*;\nimport java.security.spec.*;\nimport org.bouncycastle.util.encoders.Hex;\n\n// generate keypair\nsrand = SecureRandom.getInstance(\"SHA1PRNG\");\nkeygen = KeyPairGenerator.getInstance(\"RSA\");\nspec = new RSAKeyGenParameterSpec(2048, new BigInteger(\"10001\", 16));\nkeygen.initialize(spec, srand);\nkeypair = keygen.generateKeyPair();\n\nt1 = new net.nanopay.tx.model.Transaction();\nt1.setPayerId(1000);\nt1.setPayeeId(9999);\nt1.setAmount(100);\nt1.setDate(new java.util.Date(1517587648897L));\n\n// hash transaction\nh1 = t1.hash();\nprint(\"transaction hash 1: \" + Hex.toHexString(h1));\n\nt2 = new net.nanopay.tx.model.Transaction();\nt2.setPayerId(9999);\nt2.setPayeeId(1000);\nt2.setAmount(2000);\nt2.setDate(new java.util.Date(1517587648900L));\n\n// hash transaction on it's own, and with old transaction\nh2 = t2.hash();\nh3 = t2.hash(h1);\nprint(\"transaction hash 2: \" + Hex.toHexString(h2));\nprint(\"rolled hash of transaction 1 & 2: \" + Hex.toHexString(h3));\n\ns1 = t1.sign(keypair.getPrivate());\nprint(\"transaction 1 signature: \" + Hex.toHexString(s1));\nprint(\"verify transaction 1 signature: \" + t1.verify(s1, keypair.getPublic()));"})
p({"class":"foam.nanos.script.Script","id":"UserHashingAndSigning","description":"Demonstrates the rolling hashing functionality as well as signature generation and verification","code":"import foam.nanos.bench.Benchmark;\nimport java.math.BigInteger;\nimport java.security.*;\nimport java.security.spec.*;\nimport org.bouncycastle.util.encoders.Hex;\n\n// generate keypair\nsrand = SecureRandom.getInstance(\"SHA1PRNG\");\nkeygen = KeyPairGenerator.getInstance(\"RSA\");\nspec = new RSAKeyGenParameterSpec(2048, new BigInteger(\"10001\", 16));\nkeygen.initialize(spec, srand);\nkeypair = keygen.generateKeyPair();\n\nu1 = new foam.nanos.auth.User();\nu1.setId(1000);\nu1.setFirstName(\"Test\");\nu1.setLastName(\"User 1\");\nu1.setEmail(\"test1@nanopay.net\");\nu1.setType(\"Business\");\nu1.setBirthday(new java.util.Date(1265068800L));\n\n// hash user\nh1 = u1.hash();\nprint(\"user hash 1: \" + Hex.toHexString(h1));\n\nu2 = new foam.nanos.auth.User();\nu2.setId(1000);\nu2.setFirstName(\"Test\");\nu2.setLastName(\"User 2\");\nu2.setEmail(\"test2@nanopay.net\");\nu2.setType(\"Business\");\nu2.setBirthday(new java.util.Date(1265068900L));\n\n// hash transaction on it's own, and with old transaction\nh2 = u2.hash();\nh3 = u2.hash(h1);\nprint(\"transaction hash 2: \" + Hex.toHexString(h2));\nprint(\"rolled hash of transaction 1 & 2: \" + Hex.toHexString(h3));\n\ns1 = u1.sign(keypair.getPrivate());\nprint(\"user 1 signature: \" + Hex.toHexString(s1));\nprint(\"verify user 1 signature: \" + u1.verify(s1, keypair.getPublic()));"})
p({"class":"foam.nanos.script.Script","id":"SigningJDAO","description":"Test the SigningJDAO","code":"balanceDAO = x.get(\"localBalanceDAO\");\ntransactionDAO = x.get(\"signingTxnDAO\");\nuserDAO = x.get(\"userDAO\");\n\nusers = userDAO.select().getArray();\n\nbalances = balanceDAO.select().getArray();\n\nfor ( int i = 0 ; i < balances.size() ; i++ ) {\nbalance = balances.get(i);\nbalance.setBalance(1000000);\nprint(\"Balance set to 1000000 for balance with id: \" + balance.getId());\n}\n\nfor ( int i = 0 ; i < users.size() ; i++ ) {\nuser = users.get(i);\nbalance = balanceDAO.find(user.getId());\nif ( balance == null ) {\nbalance = new net.nanopay.model.Balance();\nbalance.setId(user.getId());\nbalance.setOwner(user.getId());\nbalance.setBalance(1000000);\nprint(\"creating balance for user with ID: \" + user.getId());\nbalanceDAO.put(balance);\n}\n}\n\nfor ( int i = 0; i < 500 ; i++ ) {\nfi = (int) (Math.random()*users.size());\nti = (int) (Math.random()*users.size());\namount = (int) ((Math.random() + 0.1) * 10000);\nif ( users.get(ti).id != users.get(fi).id ) {\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setPayeeId(users.get(ti).id);\ntransaction.setPayerId(users.get(fi).id);\ntransaction.setAmount(amount);\nprint(\"sending \" + amount + \" to user with ID: \" + users.get(ti).id);\ntransactionDAO.put(transaction);\n}\n}\n\nprint(\"Done\"); "})
p({"class":"foam.nanos.script.Script","id":"emailVerified","description":"Verifies user emails","lastRun":"2018-04-21T16:10:27.397Z","lastDuration":154,"code":"userDAO = x.get(\"localUserDAO\");\n\nusers = userDAO.select().getArray();\n\nfor ( int i = 0 ; i < users.size() ; i++ ) {\n  user = users.get(i);\n  user.setEmailVerified(true);\n  userDAO.put(user);\n}\n\nprint(\"done.\");","output":"done\n"})
p({"class":"foam.nanos.script.Script","id":"fixUserServiceProviders","enabled":true,"description":"Fixes the users service providers based on their group","lastDuration":0,"server":true,"status":1,"code":"userDAO = x.get(\"localUserDAO\");\nusers = userDAO.select().getArray();\n\nfor ( int i = 0 ; i < users.size() ; i++ ) {\n  user = users.get(i);\n  if ( \"ccShopper\".equals(user.getGroup()) || \"ccMerchant\".equals(user.getGroup()) || \"ccAdmin\".equals(user.getGroup()) ) {\n    user.setSpid(\"connected-city\");\n  } else {\n    user.setSpid(\"nanopay\");\n  }\n  userDAO.put(user);\n}\n\nprint(\"done\");","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"onboardUsers","enabled":false,"description":"Updates all users so that it appears they have gone through onboarding process","lastDuration":0,"server":true,"status":1,"code":"userDAO = x.get(\"localUserDAO\");\n\nusers = userDAO.select().getArray();\n\nfor ( int i = 0 ; i < users.size() ; i++ ) {\nuser = users.get(i);\nuser.setStatus(net.nanopay.admin.model.AccountStatus.ACTIVE);\nuser.setCompliance(net.nanopay.admin.model.ComplianceStatus.PASSED);\nuser.setOnboarded(true);\nuser.setCreatedPwd(true);\nuserDAO.put(user);\n}\n\nprint(\"done\");","output":"","notes":"To be run once on Production"})
p({"class":"foam.nanos.script.Script","id":"statusUpdate","description":"Updates the account status and compliance status to active and passed","code":"userDAO = x.get(\"localUserDAO\");\n\nusers = userDAO.select().getArray();\n\nfor ( int i = 0 ; i < users.size() ; i++ ) {\nuser = users.get(i);\nuser.setStatus(net.nanopay.admin.model.AccountStatus.ACTIVE);\nuser.setCompliance(net.nanopay.admin.model.ComplianceStatus.PASSED);\nuser.setOnboarded(true);\nuserDAO.put(user);\n}\n\nprint(\"done\");"})
p({"class":"foam.nanos.script.Script","id":"Test Email","lastRun":"2018-05-09T18:01:51.784Z","lastDuration":33,"scheduled":false,"code":"email = x.get(\"email\");\nuser = x.get(\"user\");\n\nmessage = new foam.nanos.notification.email.EmailMessage();\nmessage.setTo(new String[] { user.getEmail() });\nmap = new java.util.HashMap();\n\nmap.put(\"content\", user.getFirstName());\ntest(email.sendEmailFromTemplate(user, message, \"testEmail\", map), \"email template test\");\nprint(\"DONE\");"})
p({"class":"foam.nanos.script.Script","id":"encryptUsers","description":"Puts all existing users into the encrypted user dao","lastDuration":0,"server":true,"status":1,"code":"userDAO = x.get(\"localUserDAO\");\nencryptedUserDAO = x.get(\"encryptedUserDAO\");\n\nusers = userDAO.select().getArray();\n\nfor ( int i = 0 ; i < users.size() ; i++ ) {\nencryptedUserDAO.put(users.get(i));\n}\n\nprint(\"done\");","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"encryptBankAccounts","description":"Puts all existing bank accounts into the encrypted bank account dao","lastDuration":0,"server":true,"status":1,"code":"bankAccountDAO= x.get(\"localAccountDAO\");\nencryptedBankAccountDAO = x.get(\"encryptedBankAccountDAO\");\n\nbanks = accountDAO.select().getArray();\n\nfor ( int i = 0 ; i < banks.size() ; i++ ) {\nencryptedBankAccountDAO.put(banks.get(i));\n}\n\nprint(\"done\");","output":"","notes":""})
//p({"class":"foam.nanos.script.Script","id":"encryptBankAccounts","description":"Puts all existing bank accounts into the encrypted bank account dao","lastDuration":0,"server":true,"status":1,"code":"bankAccountDAO= x.get(\"localBankAccountDAO\");\nencryptedBankAccountDAO = x.get(\"encryptedBankAccountDAO\");\n\nbanks = bankAccountDAO.select().getArray();\n\nfor ( int i = 0 ; i < banks.size() ; i++ ) {\nencryptedBankAccountDAO.put(banks.get(i));\n}\n\nprint(\"done\");","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"fixPasswordExpiry","enabled":false,"description":"Updates all users so that password expiry is null","lastDuration":0,"server":true,"status":1,"code":"userDAO = x.get(\"localUserDAO\");\n\nusers = userDAO.select().getArray();\n\nfor ( int i = 0 ; i < users.size() ; i++ ) {\nuser = users.get(i);\nuser.setPasswordExpiry(null);\nuserDAO.put(user);\n}\n\nprint(\"done\");","output":""})
p({"class":"foam.nanos.script.Script","id":"Migrate BusinessAddress address2 -> suite","description":"Migrate current user businessAddress address2 data to suite.","code":"userDAO = x.get(\"localUserDAO\");\n\nusers = userDAO.select().getArray();\n\nfor ( int i = 0 ; i < users.size() ; i++ ) {\nuser = users.get(i);\nuser = user.fclone();\naddress = user.getBusinessAddress();\nif ( address != null ) {\naddress2 = address.getAddress2();\naddress.setSuite(address2);\naddress.setAddress2(\"\");\nuser.setBusinessAddress(address);\nuserDAO.put(user);\n}\n}\n\nprint(\"Migration complete.\");\n"})
p({"class":"foam.nanos.script.Script","id":"TestReporter","description":"Generate a report on the number of tests and post it to a Slack channel.","code":"reporter = new net.nanopay.test.TestsReporter();\nreporter.generateNewReport(x);"})
p({"class":"foam.nanos.script.Script","id":"Set destinationCurrency on existing invoices","code":"invoiceDAO = x.get(\"invoiceDAO\");\n\ninvoices = invoiceDAO.select().getArray();\n\nfor ( int i = 0; i < invoices.size(); i++ ) {\ninvoice = invoices.get(i);\nif (invoice.getDestinationCurrency() == null){\ninvoice.setDestinationCurrency(\"CAD\");\ninvoiceDAO.put(invoice);\n}\n}\n\nprint(\"Done.\");"})
p({"class":"foam.nanos.script.Script","id":"Transactions Script: Create","enabled":false,"code":"userDAO             = x.get(\"userDAO\");\naccountDAO          = x.get(\"accountDAO\");\ninstitutionDAO      = x.get(\"institutionDAO\");\ntransactionDAO      = x.get(\"localTransactionDAO\");\nbalanceDAO          = x.get(\"balanceDAO\");\nliquidityDAO        = x.get(\"liquiditySettingsDAO\");\nRandom ran          = new Random();\n\n//Create a Admin User\nuser = new foam.nanos.auth.User();\nuser.setId(Long.valueOf(9999));\nuser.setGroup(\"admin\");\nuser.setOrganization(\"Admin\");\nuser.setEmailVerified(true);\nuser.setFirstName(\"AD\");\nuser.setLastName(\"MIN\");\nuser.setEmail(\"ad@min.com\");\nuserDAO.put(user);\nadmin = (foam.nanos.auth.User) userDAO.find(9999);\nuserDigitalAccount  = net.nanopay.account.DigitalAccount.findDefault(x,admin,\"CAD\");\nls = new net.nanopay.liquidity.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(userDigitalAccount.getId());\nliquidityDAO.put(ls);\n\n//Create a bank account to User 9999\naccount = new  net.nanopay.bank.BankAccount();\naccount.setAccountNumber(\"\"+(ran.nextInt(1000000)+10000));\naccount.setInstitution(Long.valueOf(ran.nextInt(99)+1));\naccount.setOwner(admin.getId());\naccount.setName(\"\"+ran.nextInt(1000));\naccount.setStatus(net.nanopay.bank.BankAccountStatus.VERIFIED);\naccount.setDenomination(\"CAD\");\naccount.setId(1351);\naccountDAO.put(account);\nprint(\"Account made\");\n\n//Cashin to User 1000\nfor( int i = 0 ; i< 100 ; i++ ) {\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(userDigitalAccount.getId());\ntransaction.setSourceAccount(1351);\ntransaction.setAmount(1000000);\\ntransaction.setStatus(net.nanopay.tx.model.TransactionStatus.COMPLETED);\ntransactionDAO.put(transaction);\n}\nprint(\"CashIn made\");\n\n//Create 1000 users and transfer some DC  \nfor ( int i = 3000 ; i < 4000 ; i++ ) {\nuser = new foam.nanos.auth.User();\nuser.setId(Long.valueOf(i));\nuser.setGroup(\"business\");\nuser.setOrganization(\"Balony\");\nuser.setEmailVerified(true);\nuser.setFirstName(\"account\");\nuser.setLastName(\"\"+i);\nuser.setEmail(\"test\"+i+\"@t.com\");\nuserDAO.put(user);\ndA = net.nanopay.account.DigitalAccount.findDefault(x,user,\"CAD\");\nls = new net.nanopay.liquidity.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(dA.getId());\nliquidityDAO.put(ls);\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(dA.getId());\ntransaction.setSourceAccount(userDigitalAccount.getId());\ntransaction.setAmount(100000);\ntransaction.setStatus(net.nanopay.tx.model.TransactionStatus.COMPLETED);\ntransactionDAO.put(transaction);\n}\nprint(\"DONE\");"})
p({"class":"foam.nanos.script.Script","id":"Transactions Script: Transfer","enabled":false,"code":"userDAO        = x.get(\"userDAO\");\naccountDAO     = x.get(\"accountDAO\");\ninstitutionDAO = x.get(\"institutionDAO\");\ntransactionDAO = x.get(\"localTransactionDAO\");\nbalanceDAO     = x.get(\"balanceDAO\");\nRandom ran = new Random();\n\n// Creates x transactions between created accounts\nfor ( int i = 0 ; i<1000 ; i++ )\n{\nuser1 = (foam.nanos.auth.User) userDAO.find(Long.valueOf(ran.nextInt(1000)+3000));\nuser2 = (foam.nanos.auth.User) userDAO.find(Long.valueOf(ran.nextInt(1000)+3000));\nif ( user1.getId() == user2.getId()){\ni--;\ncontinue;\n}\naccount1 = net.nanopay.account.DigitalAccount.findDefault(x,user1,\"CAD\");\naccount2 = net.nanopay.account.DigitalAccount.findDefault(x,user2,\"CAD\");\n\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(account1.getId());\ntransaction.setSourceAccount(account2.getId());\ntransaction.setAmount(100);\ntransaction.setStatus(net.nanopay.tx.model.TransactionStatus.COMPLETED);\ntransactionDAO.put(transaction);\n\nif ( ((foam.mlang.sink.Sum) balanceDAO.select(foam.mlang.MLang.SUM(net.nanopay.account.Balance.BALANCE))).getValue() != 100000000) \n{print(\"\" + transaction.getId());\nthrow new Error(\"SUM out of sync\");} \n}\nprint(\"DONE\")"})
p({"class":"foam.nanos.script.Script","id":"Transactions Script: CleanUp","enabled":false,"code":"userDAO             = x.get(\"userDAO\");\naccountDAO          = x.get(\"accountDAO\");\ninstitutionDAO      = x.get(\"institutionDAO\");\ntransactionDAO      = x.get(\"localTransactionDAO\");\nbalanceDAO          = x.get(\"balanceDAO\");\nRandom ran          = new Random();\nadmin               = (foam.nanos.auth.User) userDAO.find(9999);\nuserDigitalAccount  = net.nanopay.account.DigitalAccount.findDefault(x,admin,\"CAD\");\n\nfor (int i = 3000 ; i < 4000 ; i++) {\nuser        = (foam.nanos.auth.User) userDAO.find(Long.valueOf(i));\naccount     = net.nanopay.account.DigitalAccount.findDefault(x,user,\"CAD\");\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(userDigitalAccount.getId());\ntransaction.setSourceAccount(account.getId());\ntransaction.setAmount(account.findBalance(x));;\ntransaction.setStatus(net.nanopay.tx.model.TransactionStatus.COMPLETED);\ntransactionDAO.put(transaction);\n}\nprint(\"DONE\")"})p({"class":"foam.nanos.script.Script","id":"Transactions Script: 1M Transfer","enabled":false,"code":"userDAO        = x.get(\"userDAO\");\naccountDAO     = x.get(\"accountDAO\");\ninstitutionDAO = x.get(\"institutionDAO\");\ntransactionDAO = x.get(\"localTransactionDAO\");\nbalanceDAO     = x.get(\"balanceDAO\");\nRandom ran = new Random();\n\nlong[][] accountArray = new long[1000000][2];\n\nfor ( int i = 0 ; i<1000000 ; i++ )\n{\n  user1 = (foam.nanos.auth.User) userDAO.find(Long.valueOf(ran.nextInt(1000)+3000));\n  user2 = (foam.nanos.auth.User) userDAO.find(Long.valueOf(ran.nextInt(1000)+3000));\n\n  accountArray[i][0]= net.nanopay.account.DigitalAccount.findDefault(x,user1,\"CAD\").getId();\n  accountArray[i][1]= net.nanopay.account.DigitalAccount.findDefault(x,user2,\"CAD\").getId();\n\n}\nlong time = System.currentTimeMillis();\n\n// Creates x transactions between created accounts\nfor ( int i = 0 ; i<1000 ; i++ )\n{\n  transaction = new net.nanopay.tx.model.Transaction();\n  transaction.setDestinationAccount(accountArray[i][0]);\n  transaction.setSourceAccount(accountArray[i][1]);\n  transaction.setAmount(100);\n  transaction.setStatus(net.nanopay.tx.model.TransactionStatus.COMPLETED);\n  transactionDAO.put(transaction);\n}\nprint(System.currentTimeMillis() - time);\nprint(\"DONE\")"})
p({"class":"foam.nanos.script.Script","id":"Transactions Script: 1M Transfer","enabled":false,"code":"userDAO        = x.get(\"userDAO\");\naccountDAO     = x.get(\"accountDAO\");\ninstitutionDAO = x.get(\"institutionDAO\");\ntransactionDAO = x.get(\"localTransactionDAO\");\nbalanceDAO     = x.get(\"balanceDAO\");\nRandom ran = new Random();\n\nlong[][] accountArray = new long[1000000][2];\n\nfor ( int i = 0 ; i<1000000 ; i++ )\n{\n  user1 = (foam.nanos.auth.User) userDAO.find(Long.valueOf(ran.nextInt(1000)+3000));\n  user2 = (foam.nanos.auth.User) userDAO.find(Long.valueOf(ran.nextInt(1000)+3000));\n\n  accountArray[i][0]= net.nanopay.account.DigitalAccount.findDefault(x,user1,\"CAD\").getId();\n  accountArray[i][1]= net.nanopay.account.DigitalAccount.findDefault(x,user2,\"CAD\").getId();\n\n}\nlong time = System.currentTimeMillis();\n\n// Creates x transactions between created accounts\nfor ( int i = 0 ; i<1000 ; i++ )\n{\n  transaction = new net.nanopay.tx.model.Transaction();\n  transaction.setDestinationAccount(accountArray[i][0]);\n  transaction.setSourceAccount(accountArray[i][1]);\n  transaction.setAmount(100);\n  transaction.setStatus(net.nanopay.tx.model.TransactionStatus.COMPLETED);\n  transactionDAO.put(transaction);\n}\nprint(System.currentTimeMillis() - time);\nprint(\"DONE\")"})
p({"class":"foam.nanos.script.Script","id":"pkcs11keystore","code":"import java.security.*;\nimport java.security.spec.*;\nimport javax.crypto.KeyGenerator;\n\nmanager = x.get(\"keyStoreManager\");\nprint(manager);\n\nkeyStore = manager.getKeyStore();\nprint(keyStore);\n\nkeygen = KeyGenerator.getInstance(\"AES\", manager.getProvider());\nkeygen.init(256, foam.util.SecurityUtil.GetSecureRandom());\nkey = keygen.generateKey();\n\nprint(key);\n"})
p({"class":"foam.nanos.script.Script","id":"MigrateBusinessTypes","description":"The ids of the business types are changing, so we need to migrate the existing users' business types.","code":"import foam.dao.ArraySink;\u000aimport foam.nanos.auth.User;\u000a\u000alocalUserDAO = x.get(\"localUserDAO\");\u000a\u000aList users = (localUserDAO.select(new ArraySink())).getArray();\u000a\u000afor ( User user : users ) {\u000a  id = user.getBusinessTypeId();\u000a  newId =\u000a    id == 0 ? 1\u000a  : id == 1 ? 2\u000a  : id == 5 ? 4\u000a            : 3;\u000a  user = (User) user.fclone();\u000a  user.setBusinessTypeId(newId);\u000a  user = localUserDAO.put(user);\u000a  if ( user.getBusinessTypeId() == newId ) {\u000a    print(\"Successfully changed business id for user with id = \" + Long.toString(user.getId()) + \" from \" + Long.toString(id) + \" to \" + Long.toString(newId));\u000a  } else {\u000a    print(\"Failed to change business id for user with id = \" + Long.toString(user.getId()));\u000a  }\u000a}"})
r({"class":"foam.nanos.script.Script","id":"MigrateBusinessTypes"})
p({"class":"foam.nanos.script.Script","id":"SanitizeServicePermissions","code":"nSpecDAO = x.nSpecDAO;\ngroupDAO = x.groupDAO;\n\nbasicUser = groupDAO.find('basicUser').then(function(basicUser) {\nprint(\"all: \"+basicUser.permissions.length);\nbasicUser.permissions = basicUser.permissions.filter(function(p) { return ! p.id.startsWith('service.'); });\nprint(\"filtered: \"+basicUser.permissions.length);\nnSpecDAO.select(function(s) {\nif ( s.id.startsWith('ascendant') ) return;\nif ( s.id.startsWith('flinks') ) return;\nif ( s.id.startsWith('email') ) return;\nif ( s.id.startsWith('alterna') ) return;\nif ( s.id.startsWith('plaid') ) return;\nif ( s.id.startsWith('local') ) return;\nif ( s.id == 'smtpEmailService' ) return;\nif ( s.id == 'pop3' ) return;\nif ( s.id == 'EFTReturnFileCredentials' ) return;\n\nprint(s.id);\n\n/*basicUser.permissions.push(foam.nanos.auth.Permission.create({id: 'service.' + s.id}));*/\nbasicUser.permissions.push(foam.nanos.auth.Permission.create({id: 'service.read.' + s.id}));\nbasicUser.permissions.push(foam.nanos.auth.Permission.create({id: 'service.execute.' + s.id}));\n}).then(function() {\nprint('done');\nprint(\"services: \"+basicUser.permissions.length);\ngroupDAO.put(basicUser);\n});\n});","output":""})
p({"class":"foam.nanos.script.Script","id":"port nanoconnect user to ablii","description":"Creates businesses for nanoconnect users and copies the existing user to the new business. Creates a new user and associates it to the business created. Provides the admin permission to the nanoconnect user created. Invoice, transactions & bank account are associated to the new business created based on the UID transferred from the nano connect user.","code":"import net.nanopay.model.Business;\nimport foam.nanos.auth.Group;\nimport foam.nanos.auth.Permission;\nimport foam.nanos.auth.UserUserJunction;\nimport foam.core.X;\n\nuserDAO = x.get(\"userDAO\");\nbareUserDAO = x.get(\"bareUserDAO\");\ngroupDAO = x.get(\"groupDAO\");\nbusinessDAO = x.get(\"businessDAO\");\nagentJunctionDAO = x.get(\"agentJunctionDAO\");\n\npublic Permission[] generatePermissions(X x, Group templateGroup, String safeBusinessName) {\npermissionDAO  = x.get(\"permissionDAO\");\nPermission[] templatePermissions = templateGroup.getPermissions();\nPermission[] newPermissions = new Permission[templatePermissions.length];\nfor ( int i = 0; i < templatePermissions.length; i++ ) {\nPermission templatePermission = templatePermissions[i];\nPermission newPermission = new Permission(templatePermission.getId().replaceAll(\".id.\", \".\" + safeBusinessName + \".\"), templatePermission.getDescription());\nnewPermissions[i] = newPermission;\n\n// Put as the system since permissionDAO is authenticated.\npermissionDAO.put(newPermission);\n}\nreturn newPermissions;\n}\n\n// Replace this email array with a list of emails of user to be ported to ablii.\nString [] emails = { \"pop12345@gmail.com\" };\n\nfor (int i = 0; i < emails.length; i++) {\nuser = userDAO.find(foam.mlang.MLang.EQ(foam.nanos.auth.User.EMAIL, emails[i]));\nbusiness = businessDAO.find(foam.mlang.MLang.EQ(Business.EMAIL, emails[i]));\nif (business != null) continue;\nbusiness = new net.nanopay.model.Business.Builder(x).build();\nbusiness.copyFrom(user);\nbusiness.setLoginEnabled(false);\nbusiness.setType(\"Business\");\nbusinessName = foam.util.SafetyUtil.isEmpty(business.getBusinessName()) ? business.getOrganization() : business.getBusinessName();\nbusiness.setBusinessName(businessName);\nbareUserDAO.remove(user);\nnewUser = new foam.nanos.auth.User.Builder(x).build();\nnewUser.copyFrom(user);\nnewUser.setId(0);\nnewUser.setGroup(\"sme\");\nnewUser = bareUserDAO.put(newUser);\nbusiness = bareUserDAO.put(business);\n\nString safeBusinessName = business.getBusinessPermissionId();\n\n// When creating a business, 3 groups are also created that are associated\n// with the business.\nGroup adminTemplateGroup = (Group) groupDAO.find(\"smeBusinessAdmin\");\nGroup approverTemplateGroup = (Group) groupDAO.find(\"smeBusinessApprover\");\nGroup employeeTemplateGroup = (Group) groupDAO.find(\"smeBusinessEmployee\");\n\nGroup employeeGroup = new Group();\nemployeeGroup.copyFrom(employeeTemplateGroup);\nemployeeGroup.setId(safeBusinessName + \".employee\");\nemployeeGroup.setPermissions(generatePermissions(x, employeeTemplateGroup, safeBusinessName));\nemployeeGroup.setBusiness(business.getId());\nemployeeGroup.setParent(\"sme\");\ngroupDAO.put(employeeGroup);\n\nGroup approverGroup = new Group();\napproverGroup.copyFrom(approverTemplateGroup);\napproverGroup.setId(safeBusinessName + \".approver\");\napproverGroup.setPermissions(generatePermissions(x, approverTemplateGroup, safeBusinessName));\napproverGroup.setBusiness(business.getId());\napproverGroup.setParent(safeBusinessName + \".employee\");\ngroupDAO.put(approverGroup);\n\nGroup adminGroup = new Group();\nadminGroup.copyFrom(adminTemplateGroup);\nadminGroup.setId(safeBusinessName + \".admin\");\nadminGroup.setPermissions(generatePermissions(x, adminTemplateGroup, safeBusinessName));\nadminGroup.setBusiness(business.getId());\nadminGroup.setParent(safeBusinessName + \".approver\");\ngroupDAO.put(adminGroup);\n\n// Put the business itself in the admin group for the business.\nbusiness = business.fclone();\nbusiness.setGroup(safeBusinessName + \".admin\");\nbusiness.setEmailVerified(true);\nbusiness = bareUserDAO.put(business);\n\n// Create a relationship between the user and the business. Set the group on\n// the junction object to the admin group for that business.\nUserUserJunction junction = new UserUserJunction();\njunction.setGroup(adminGroup.getId());\njunction.setSourceId(newUser.getId());\njunction.setTargetId(business.getId());\nagentJunctionDAO.put(junction);\n}"})
p({"class":"foam.nanos.script.Script","id":"Anonymize Journals","description":"Anonymize user name,email,phone numbers, address and account numbers","code":"import net.nanopay.bank.BankAccount;\nimport foam.nanos.app.AppConfig;\nimport foam.nanos.app.Mode;\nimport foam.nanos.auth.Address;\nimport foam.nanos.auth.Phone;\n\nrunScript = false;\naccountNumber = 1234567;\nuserNameLength =7;\nuserEmailLength = 12;\nPhone phone = new Phone();\nMap emails = new HashMap();\nimportObject(emails);\n\naccountDAO = x.get(\"accountDAO\");\nuserDAO = x.get(\"userDAO\");\naccounts = accountDAO.select().getArray();\nusers = userDAO.select().getArray();\n\n\nString getRandomNumber(int length) {\n  String chars = \"1234567890\";\n  StringBuilder number = new StringBuilder();\n  Random rnd = new Random();\n  while (number.length() < length) {\n    int index = (int) (rnd.nextFloat() * chars.length());\n    number.append(chars.charAt(index));\n  }\n  return number.toString();\n}\n\nString getRandomString(int length) {\n  String chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  StringBuilder name = new StringBuilder();\n  Random rnd = new Random();\n  while (name.length() < length) {\n    int index = (int) (rnd.nextFloat() * chars.length());\n    name.append(chars.charAt(index));\n  }\n  return name.toString();\n}\n\n//create address that is added to every user/business\nAddress address = new Address();\naddress.setCountryId(\"CA\");\naddress.setRegionId(\"ON\");\naddress.setPostalCode(\"M4B1A2\");\naddress.setSuite(\"1\");\naddress.setLongitude(1.0);\naddress.setLatitude(1.0);\n\n\n// Check if in production enviroment\nif ( ((AppConfig) x.get(\"appConfig\")).getMode() == Mode.PRODUCTION ) {\n  print(\"Can not run this script in a production enviroment\");\n  return;\n}\n\nif ( runScript) {\n  for (account : accounts) {\n    account = account.fclone();\n    if ( account instanceof BankAccount) {\n      account.setAccountNumber(accountNumber + \"\");\n      accountNumber++;\n    }\n    accountDAO.put(account);\n  }\n\n\n  for (user : users) {\n    user = user.fclone();\n    user.setFirstName(getRandomString(userNameLength));\n    user.setMiddleName(getRandomString(userNameLength));\n    user.setLastName(getRandomString(userNameLength));\n    user.setDesiredPassword(\"password\");\n\n    address.setCity(\"city\" + getRandomNumber(4));\n    address.setStreetName(\"street\" + getRandomNumber(4));\n    address.setStreetNumber(\"123\" + getRandomNumber(4));\n    address.setAddress1(getRandomString(10));\n    address.setAddress2(getRandomString(10));\n    user.setAddress(address);\n    user.setBusinessAddress(address);\n\n    phone.setNumber(getRandomNumber(9));\n    user.setPhone(phone);\n    user.setMobile(phone);\n    user.setBusinessPhone(phone);\n    user.setPhoneNumber(getRandomNumber(9));\n\n    if ( user.getGroup().equals(\"admin\" )) {\n\n    } else {\n      if (emails.containsKey(user.getEmail())){\n        user.setEmail(emails.get(user.getEmail()));\n      } else {\n        temp = getRandomString(userEmailLength) + \"@nanopay.net\";\n        emails.put(user.getEmail(), temp);\n        user.setEmail(temp);\n      }\n    }\n    if ( user.getId() != 1 && user.getId() !=1346) {\n      try {\n        userDAO.put(user);\n      } catch(Exception ex){\n      }\n    }\n  }\n\n  print(\"Done\");\n} else  {\n  print(\"Set runScript to true in this script code to run.\");\n  print(\"Backup your current journals before running this script.\");\n  print(\"WARNING this will make changes to your current journals.\");\n}","notes":"DO NOT RUN ON PRODUCTION. THIS SCRIPT WILL MODIFY CURRENT JOURNALS."})
p({"class":"foam.nanos.script.Script","id":"Add userManagement menu to business admin group","description":"Migration script to add a permission to existing business groups","lastRun":"2019-03-14T16:05:51.973Z","lastDuration":32,"code":"import foam.dao.DAO;\u000aimport foam.dao.ArraySink;\u000aimport foam.nanos.auth.User;\u000aimport foam.nanos.auth.Group;\u000aimport foam.nanos.auth.Permission;\u000aimport net.nanopay.model.Business;\u000aimport javax.security.auth.AuthPermission;\u000a\u000aDAO businessDAO = (DAO) x.get(\"businessDAO\");\u000aDAO groupDAO = (DAO) x.get(\"groupDAO\");\u000a\u000abusinesses = businessDAO.select(new ArraySink()).getArray();\u000aint i;\u000a\u000afor ( Business business : businesses ) {\u000a  Group group = business.findGroup(x);\u000a\u000a  if ( group.implies(x, new AuthPermission(\"menu.read.sme.*\")) ) {\u000a    print(\"Group \" + group.getId() + \" already has a permission that implies the one we're adding. Skipping.\");\u000a    continue;\u000a  }\u000a\u000a  Permission[] permissions = group.getPermissions();\u000a  Permission[] newPermissions = new Permission[permissions.length + 1];\u000a\u000a  for ( i = 0; i < permissions.length; i++ ) {\u000a    newPermissions[i] = permissions[i];\u000a  }\u000a\u000a  newPermissions[i] = new Permission.Builder(x).setId(\"menu.read.sme.*\").build();\u000a  group.setPermissions(newPermissions);\u000a  groupDAO.put(group);\u000a  print(\"Successfully added permission '\" + newPermissions[i].getId() + \"' to group \" + group.getId());\u000a}\u000a","output":"Group nanopay8006.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup examplecompany28010.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup quintewestpubliclibrary8013.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup haiprecisionwaterjets8015.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup companywithusdbankaccount8018.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup testingissue54228023.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup hoserscarwash8025.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup papajohnspizza8028.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup passwordtestingcompany8032.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup synctestcompany8034.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup passporttestcompany8038.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup snowinc8040.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup adsfds8042.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup corneriainc8044.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup bombardier8046.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup testcompanyemailverified8048.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup accountingcompanyinc8050.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup reporttestcompany8055.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup asdfas8057.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup modusristorante8059.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup abccompany8062.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup warnerbros8064.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup haiprecisionwaterjetsinc8067.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup millersmills8069.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup banktestcompany8071.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup dateofbirthtestcompany8073.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup company58578075.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup asdfcompany8077.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup fdsas8079.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup signingofficercompany8081.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup busprofilecompany8083.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup arizonacompany8086.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup beverlyschool8092.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup linktestcompany8094.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup signuptestone8096.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup homehardware8098.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup fieldcompany8103.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup datefieldtestcompany8105.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup bellevillebulls8107.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup woolersoccerinc8109.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup smitherslandscaping8111.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup georgeswashingmachines8113.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup dragonsden8115.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup vladssomethings8117.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup finaldestinationdeliverycompany8119.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup royscompany8121.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup kirbyskico8123.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup asdfsadfsa8125.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup fasdfdsafsadf8127.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup luigisplumbing8129.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup foxdalefarms8131.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup lyleslanyards8133.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup cleancodepublishing8135.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup dunno8137.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup linkupdatecompany8139.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup rubyyacht8143.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup scallopshotel8145.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup adfsafsd8147.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup overlaptestcompany8150.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup gothamshipping8155.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup fsdfsad8157.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup sdfdfs8159.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup sadfsafd8161.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup businessprofilebackendvalidationcompany8163.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup testinglockincompany8165.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup balzacs8167.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup channelorange8169.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup janbarelectric8171.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup sd8180.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup sdfsdaf8182.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup artofhappiness8184.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup bostonteacompany8186.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup tisane8189.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup scotties8191.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup fdsf8194.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup asdfsa8196.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup safsfs8199.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup adsfdsa8203.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup fsadf8206.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup fsafdsdf8209.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup lkjadslfkj8212.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup lasdf8218.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup laksjdf8220.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup fasfasdf8223.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup laksdjf8226.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup lskdfjlk8229.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup alsdkjf8232.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup sadfsad8235.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup asldkfj8238.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup lakjdfsl8240.admin already has a permission that implies the one we're adding. Skipping.\u000aGroup alskdfj8243.admin already has a permission that implies the one we're adding. Skipping.\u000a"})
p({"class":"foam.nanos.script.Script","id":"addPermsToFraudOps","description":"Create various read/write permissions for the \"fraud-ops\" group if they do not exist.","code":"/**\n * TITLE: addPermsToFraudOps\n * DESCRIPTION: Create various read/write permissions for the \"fraud-ops\" group if they do not exist.\n */\nimport foam.nanos.auth.Group;\nimport foam.dao.DAO;\nimport foam.nanos.auth.Permission;\nimport foam.core.X;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.ArrayList;\nimport java.util.List;\n\n// ==================================================================================\n\n/**\n * Declaring \"fraud-ops\" and its requested permissions as variables up here\n * That way the script is REUSABLE if anyone wants to create permissions for any group\n * IMPORTANT: Before running the script, you will need to add a \"permissionRequired: true\" property to\n * your desired model properties in order for this script to work.\n * Make sure to LOWERCASIFY THE WHOLE PERMISSION and write the SPECIFIC MODELS\n * \n * \n * Once the model properties have been edited, just add: \n * 1. groupID\n * 2. permsToAdd\n */\ngroupID = \"fraud-ops\";\nString[] permsToAdd = {\n    \"transaction.rw.status\",\n    \"alternacotransaction.rw.status\",\n    \"alternacitransaction.rw.status\",\n    \"abliitransaction.rw.status\",\n    \"transaction.update.*\",\n    \"bankaccount.rw.status\",\n    \"bankaccount.rw.verificationattempts\",\n    \"usbankaccount.rw.status\",\n    \"usbankaccount.rw.verificationattempts\",\n    \"cabankaccount.rw.status\",\n    \"cabankaccount.rw.verificationattempts\",\n    \"digitalaccount.rw.status\",\n    \"business.update.*\"\n};\n\n// =================================================================================\n\n// grabbing the group's permissions property and permissionDAO\ngroupDAO = x.get(\"groupDAO\");\ngroup = groupDAO.find(groupID);\ngroupPerms = group.permissions;\npermissionDAO  = x.get(\"permissionDAO\");\n\n// FOR DEBUGGING\nprint(\"START\");\nprint(\"************************\");\nprint(\"GroupID: \" + groupID);\nprint(\"\");\nprint(\"CurrentPermissions: \");\nprint(groupPerms);\nprint(\"\");\nprint(\"PermissionsToAdd: \");\nprint(permsToAdd);\nprint(\"\");\nprint(\"\");\n\n/**\n * we place the following loop at the top in order to act as a fail safe\n * if for some reason only the \"fraud-ops\" group permissions array previously had the requested permissions\n * but the PermissionDAO did not get updated with those same permissions\n * we will then add the requested permissions into the PermissionsDAO only if they are unique\n * this is because later on in the script\n * we end the script if \"fraud-ops\" group permissions array already has all the requested permissions\n * that is why we are updating the permissionsDAO first\n */\nfor ( i = 0; i < permsToAdd.length; i++ ){\n    // here we will also lowercasify the permissions in the array as well while we make this check\n    permsToAdd[i] = permsToAdd[i].toLowerCase();\n\n    currentPermId = permsToAdd[i];\n    if ( permissionDAO.find(currentPermId) == null ) permissionDAO.put(new Permission(currentPermId, \"\"));\n} \n\n/**\n * from here on out we will be dealing solely with the \"fraud-ops\" group permissions' property\n * transforming the primitive array into just a set\n * because as we're deep cloning we can check if there are any duplicates\n * and then just pop them off the set\n */\nSet permsToAddSet = new HashSet();\nfor ( i = 0; i < permsToAdd.length; i++ ) {\n    permsToAddSet.add(permsToAdd[i]);\n}\n\n/**\n * we use an ArrayList instead of a primitive array because\n * we don't know the exact length of the final array if there are duplicates\n */\nList newPermissions = new ArrayList();\n\nfor ( i = 0; i < groupPerms.length; i++ ) {\n    currentPerm = groupPerms[i];\n\n    // 1. deep clone original permissions to new arrayList\n    newPermissions.add(new Permission(currentPerm.id, currentPerm.description));\n\n    // 2. check if permsToAdd is asking for this permission then pop it off because will already have been created\n    if ( permsToAddSet.contains(currentPerm.id) ) permsToAddSet.remove(currentPerm.id);\n}\n\n// if permsToAddSet is empty, that means theres nothing to add\n// we can end the script here\nif ( permsToAddSet.isEmpty() ) {\n    print(\"Ending script here because the \" + groupID + \" group already has all the requested permissions\");\n    print(\"************************\");\n    print(\"END\");\n    return;\n}\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(\"OriginalPermissions\");\nprint(newPermissions);\nprint(\"=======================\");\nprint(\"\");\n\n// here we will iterate through the remaining permsToAdd and place them in the newPermissions arraylist\nfor ( perm : permsToAddSet ) {\n    currentPermission = new Permission(perm, \"\");\n    newPermissions.add(currentPermission);\n}\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(\"NewPermissions\");\nprint(newPermissions);\nprint(\"=======================\");\nprint(\"\");\n\n// making a deep conversion of the newPermissions ArrayList to a primitive array\nPermission[] newPermissionsArray = new Permission[newPermissions.size()];\nfor ( i = 0; i < newPermissionsArray.length; i++ ) {\n    newPermissionsArray[i] = new Permission(newPermissions.get(i).id, newPermissions.get(i).description);\n}\n\n// set newPermissionsArray as new property\ngroup.setPermissions(newPermissionsArray);\n\n// put modified group back into the groupDAO\ngroupDAO.put(group);\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(groupID + \"Group Permissions\");\ngroupDAO = x.get(\"groupDAO\");\ngroup = groupDAO.find(groupID);\ngroupPerms = group.permissions;\nprint(groupPerms);\nprint(\"=======================\");\nprint(\"\");\nprint(\"************************\");\nprint(\"END\");\n\n"})
p({"class":"foam.nanos.script.Script","id":"addPermsToSme", "description":"Create various read-only permissions for the \"sme\" group if they do not exist.","code":"/**\n* TITLE: addPermsToSme\n* DESCRIPTION: Create various read-only permissions for the \"sme\" group if they do not exist.\n*/\nimport foam.nanos.auth.Group;\nimport foam.dao.DAO;\nimport foam.nanos.auth.Permission;\nimport foam.core.X;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.ArrayList;\nimport java.util.List;\n\n// ==================================================================================\n\n/**\n* Declaring \"sme\" and its requested permissions as variables up here\n* That way the script is REUSABLE if anyone wants to create permissions for any group\n* IMPORTANT: Before running the script, you will need to add a \"permissionRequired: true\" property to\n* your desired model properties in order for this script to work.\n* Make sure to LOWERCASIFY THE WHOLE PERMISSION and write the SPECIFIC MODELS\n* \n* \n* Once the model properties have been edited, just add: \n* 1. groupID\n* 2. permsToAdd\n*/\ngroupID = \"sme\";\nString[] permsToAdd = {\n\"transaction.ro.status\",\n\"alternacotransaction.ro.status\",\n\"alternacitransaction.ro.status\",\n\"abliitransaction.ro.status\",\n\"bankaccount.ro.status\",\n\"bankaccount.ro.verificationattempts\",\n\"cabankaccount.ro.status\",\n\"cabankaccount.ro.verificationattempts\",\n\"usbankaccount.ro.status\",\n\"usbankaccount.ro.verificationattempts\",\n\"digitalaccount.ro.status\"\n};\n\n// =================================================================================\n\n// grabbing the group's permissions property and permissionDAO\ngroupDAO = x.get(\"groupDAO\");\ngroup = groupDAO.find(groupID);\ngroupPerms = group.permissions;\npermissionDAO  = x.get(\"permissionDAO\");\n\n// FOR DEBUGGING\nprint(\"START\");\nprint(\"************************\");\nprint(\"GroupID: \" + groupID);\nprint(\"\");\nprint(\"CurrentPermissions: \");\nprint(groupPerms);\nprint(\"\");\nprint(\"PermissionsToAdd: \");\nprint(permsToAdd);\nprint(\"\");\nprint(\"\");\n\n/**\n* we place the following loop at the top in order to act as a fail safe\n* if for some reason only the \"sme\" group permissions array previously had the requested permissions\n* but the PermissionDAO did not get updated with those same permissions\n* we will then add the requested permissions into the PermissionsDAO only if they are unique\n* this is because later on in the script\n* we end the script if \"sme\" group permissions array already has all the requested permissions\n* that is why we are updating the permissionsDAO first\n*/\nfor ( i = 0; i < permsToAdd.length; i++ ){\n// here we will also lowercasify the permissions in the array as well while we make this check\npermsToAdd[i] = permsToAdd[i].toLowerCase();\n\ncurrentPermId = permsToAdd[i];\nif ( permissionDAO.find(currentPermId) == null ) permissionDAO.put(new Permission(currentPermId, \"\"));\n} \n\n/**\n* from here on out we will be dealing solely with the \"fraud-ops\" group permissions' property\n* transforming the primitive array into just a set\n* because as we're deep cloning we can check if there are any duplicates\n* and then just pop them off the set\n*/\nSet permsToAddSet = new HashSet();\nfor ( i = 0; i < permsToAdd.length; i++ ) {\npermsToAddSet.add(permsToAdd[i]);\n}\n\n/**\n* we use an ArrayList instead of a primitive array because\n* we don't know the exact length of the final array if there are duplicates\n*/\nList newPermissions = new ArrayList();\n\nfor ( i = 0; i < groupPerms.length; i++ ) {\ncurrentPerm = groupPerms[i];\n\n// 1. deep clone original permissions to new arrayList\nnewPermissions.add(new Permission(currentPerm.id, currentPerm.description));\n\n// 2. check if permsToAdd is asking for this permission then pop it off because will already have been created\nif ( permsToAddSet.contains(currentPerm.id) ) permsToAddSet.remove(currentPerm.id);\n}\n\n// if permsToAddSet is empty, that means theres nothing to add\n// we can end the script here\nif ( permsToAddSet.isEmpty() ) {\nprint(\"Ending script here because the \" + groupID + \" group already has all the requested permissions\");\nprint(\"************************\");\nprint(\"END\");\nreturn;\n}\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(\"OriginalPermissions\");\nprint(newPermissions);\nprint(\"=======================\");\nprint(\"\");\n\n// here we will iterate through the remaining permsToAdd and place them in the newPermissions arraylist\nfor ( perm : permsToAddSet ) {\ncurrentPermission = new Permission(perm, \"\");\nnewPermissions.add(currentPermission);\n}\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(\"NewPermissions\");\nprint(newPermissions);\nprint(\"=======================\");\nprint(\"\");\n\n// making a deep conversion of the newPermissions ArrayList to a primitive array\nPermission[] newPermissionsArray = new Permission[newPermissions.size()];\nfor ( i = 0; i < newPermissionsArray.length; i++ ) {\nnewPermissionsArray[i] = new Permission(newPermissions.get(i).id, newPermissions.get(i).description);\n}\n\n// set newPermissionsArray as new property\ngroup.setPermissions(newPermissionsArray);\n\n// put modified group back into the groupDAO\ngroupDAO.put(group);\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(groupID + \"Group Permissions\");\ngroupDAO = x.get(\"groupDAO\");\ngroup = groupDAO.find(groupID);\ngroupPerms = group.permissions;\nprint(groupPerms);\nprint(\"=======================\");\nprint(\"\");\nprint(\"************************\");\nprint(\"END\");\n"})
p({"class":"foam.nanos.script.Script","id":"addWhitelistPermsToPaymentOps","description":"Create whitelist update, remove and create permissions for Payment Ops","code":"/**\n* TITLE: addWhitelistPermsToPaymentOps\n* DESCRIPTION: Create whitelist update, remove and create permissions for Payment Ops\n*/\nimport foam.nanos.auth.Group;\nimport foam.dao.DAO;\nimport foam.nanos.auth.Permission;\nimport foam.core.X;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.ArrayList;\nimport java.util.List;\n\n// ==================================================================================\n\n/**\n* Declaring \"payment-ops\" and its requested permissions as variables up here\n* That way the script is REUSABLE if anyone wants to create permissions for any group\n* IMPORTANT: Before running the script, you will need to add a \"permissionRequired: true\" property to\n* your desired model properties in order for this script to work.\n* Make sure to LOWERCASIFY THE WHOLE PERMISSION and write the SPECIFIC MODELS\n* \n* \n* Once the model properties have been edited, just add: \n* 1. groupID\n* 2. permsToAdd\n*/\ngroupID = \"payment-ops\";\nString[] permsToAdd = {\n\"whitelistedEmail.update.*\",\n\"whitelistedEmail.remove.*\",\n\"whitelistedEmail.read.*\",\n\"whitelistedEmail.create\"\n};\n\n//=================================================================================\n\n// grabbing the group's permissions property and permissionDAO\ngroupDAO = x.get(\"groupDAO\");\ngroup = groupDAO.find(groupID);\ngroupPerms = group.permissions;\npermissionDAO  = x.get(\"permissionDAO\");\n\n// FOR DEBUGGING\nprint(\"START\");\nprint(\"************************\");\nprint(\"GroupID: \" + groupID);\nprint(\"\");\nprint(\"CurrentPermissions: \");\nprint(groupPerms);\nprint(\"\");\nprint(\"PermissionsToAdd: \");\nprint(permsToAdd);\nprint(\"\");\nprint(\"\");\n\n/**\n* we place the following loop at the top in order to act as a fail safe\n* if for some reason only the \"payment-ops\" group permissions array previously had the requested permissions\n* but the PermissionDAO did not get updated with those same permissions\n* we will then add the requested permissions into the PermissionsDAO only if they are unique\n* this is because later on in the script\n* we end the script if \"payment-ops\" group permissions array already has all the requested permissions\n* that is why we are updating the permissionsDAO first\n*/\nfor ( i = 0; i < permsToAdd.length; i++ ){\n/**\n*  ! NOTE: currently commenting out the lowercasifying until \n*  ! lowercase permission standardizations are made\n*  essentially the AuthenticatedDAO does not automatically lowercase permissions when\n*  sending them off to auth.check\n*/\n// here we will also lowercasify the permissions in the array as well while we make this check\n// permsToAdd[i] = permsToAdd[i].toLowerCase();\n\ncurrentPermId = permsToAdd[i];\nif ( permissionDAO.find(currentPermId) == null ) permissionDAO.put(new Permission(currentPermId, \"\"));\n} \n\n/**\n* from here on out we will be dealing solely with the \"payment-ops\" group permissions' property\n* transforming the primitive array into just a set\n* because as we're deep cloning we can check if there are any duplicates\n* and then just pop them off the set\n*/\nSet permsToAddSet = new HashSet();\nfor ( i = 0; i < permsToAdd.length; i++ ) {\npermsToAddSet.add(permsToAdd[i]);\n}\n\n/**\n* we use an ArrayList instead of a primitive array because\n* we don't know the exact length of the final array if there are duplicates\n*/\nList newPermissions = new ArrayList();\n\nfor ( i = 0; i < groupPerms.length; i++ ) {\ncurrentPerm = groupPerms[i];\n\n// 1. deep clone original permissions to new arrayList\nnewPermissions.add(new Permission(currentPerm.id, currentPerm.description));\n\n// 2. check if permsToAdd is asking for this permission then pop it off because will already have been created\nif ( permsToAddSet.contains(currentPerm.id) ) permsToAddSet.remove(currentPerm.id);\n}\n\n// if permsToAddSet is empty, that means theres nothing to add\n// we can end the script here\nif ( permsToAddSet.isEmpty() ) {\nprint(\"Ending script here because the \" + groupID + \" group already has all the requested permissions\");\nprint(\"************************\");\nprint(\"END\");\nreturn;\n}\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(\"OriginalPermissions\");\nprint(newPermissions);\nprint(\"=======================\");\nprint(\"\");\n\n// here we will iterate through the remaining permsToAdd and place them in the newPermissions arraylist\nfor ( perm : permsToAddSet ) {\ncurrentPermission = new Permission(perm, \"\");\nnewPermissions.add(currentPermission);\n}\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(\"NewPermissions\");\nprint(newPermissions);\nprint(\"=======================\");\nprint(\"\");\n\n// making a deep conversion of the newPermissions ArrayList to a primitive array\nPermission[] newPermissionsArray = new Permission[newPermissions.size()];\nfor ( i = 0; i < newPermissionsArray.length; i++ ) {\nnewPermissionsArray[i] = new Permission(newPermissions.get(i).id, newPermissions.get(i).description);\n}\n\n// set newPermissionsArray as new property\ngroup.setPermissions(newPermissionsArray);\n\n// put modified group back into the groupDAO\ngroupDAO.put(group);\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(groupID + \"Group Permissions\");\ngroupDAO = x.get(\"groupDAO\");\ngroup = groupDAO.find(groupID);\ngroupPerms = group.permissions;\nprint(groupPerms);\nprint(\"=======================\");\nprint(\"\");\nprint(\"************************\");\nprint(\"END\");\n"})
p({"class":"foam.nanos.script.Script","id":"addServicePermsToPaymentOps","description":"Create various service permissions for Payment Ops as a cause of the removal of service.*","code":"/**\n* TITLE: addServicePermsToPaymentOps\n* DESCRIPTION: Create various service permissions for Payment Ops as a cause of the removal of service.*\n*/\nimport foam.nanos.auth.Group;\nimport foam.dao.DAO;\nimport foam.nanos.auth.Permission;\nimport foam.core.X;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.ArrayList;\nimport java.util.List;\n\n// ==================================================================================\n\n/**\n* Declaring \"payment-ops\" and its requested permissions as variables up here\n* That way the script is REUSABLE if anyone wants to create permissions for any group\n* \n* Once the model properties have been edited, just add: \n* 1. groupID\n* 2. permsToAdd\n*/\ngroupID = \"payment-ops\";\nString[] permsToAdd = {\n// TO GET THE OPERATIONS MENU\n\"service.menuDAO\",\n// FROM JUST SELECTING THE OPERATIONS MENU ITEMS\n\"service.accountDAO\",\n\"service.nSpecDAO\",\n\"service.digitalAccount\",\n\"service.notificationDAO\",\n\"service.currencyDAO\",\n\"service.balanceDAO\",\n\"service.groupDAO\",\n\"service.transactionDAO\",\n\"service.invoiceDAO\",\n\"service.flinksAccountsDetailResponseDAO\",\n\"service.loginAttemptDAO\",\n\"service.ipHistoryDAO\",\n\"service.reportDAO\",\n\"service.ticketDAO\",\n\"service.ascendantFXUserDAO\",\n\"service.ascendantUserPayeeJunctionDAO\",\n\"service.whitelistedEmailDAO\",\n\"service.doNotSolicitDAO\",\n\"service.emailMessageDAO\",\n\"service.serviceProviderDAO\",\n// FROM OPERATIONS -> USER -> CREATE\n\"service.businessSectorDAO\",\n\"service.languageDAO\",\n\"service.partnerJunctionDAO\",\n\"service.paymentCardDAO\",\n// FROM OPERATIONS -> ACCOUNT -> CREATE\n\"service.publicKeyDAO\",\n// FROM OPERATIONS -> INVOICE -> CREATE\n\"service.recurringInvoiceDAO\",\n// FROM OPERATIONS → INVOICE → CREATE → SAVE\n\"service.fileDAO\",\n// FROM OPERATIONS → TICKETS → NEW TICKET → SUBMIT AS *\n\"service.ticketMessageDAO\",\n// FROM OPERATIONS → REPORTS → RUN *\n\"service.scriptDAO\",\n// FROM OPERATIONS -> ALTERNA-EFT -> Download csv -> login\n\"service.run.alterna\",\n// FROM OPERATIONS -> SERVICE PROVIDERS -> CREATE\n\"service.lineItemFeeDAO\",\n\"service.lineItemTaxDAO\",\n\"service.lineItemTypeDAO\",\n\"service.transactionFeeDAO\",\n// FROM OPERATIONS → * → EXPORT\n\"service.exportDriverRegistryDAO\",\n// FROM PERSONAL SETTINGS\n\"service.twofactor\",\n// FROM PRODUCTION LOG REQUESTS FOR PAYMENT-OPS\n\"service.supportEmailDAO\,"\n"service.liquiditySettingsDAO\"\n,\n\"service.securefactLEVDAO\"\n,\n\"service.securefactSIDniDAO\"\n,\n\"service.institutionDAO\"\n,\n\"service.branchDAO\"\n};\n\n// =================================================================================\n\n// grabbing the group's permissions property and permissionDAO\ngroupDAO = x.get(\"groupDAO\");\ngroup = groupDAO.find(groupID);\ngroupPerms = group.permissions;\npermissionDAO  = x.get(\"permissionDAO\");\n\n// FOR DEBUGGING\nprint(\"START\");\nprint(\"************************\");\nprint(\"GroupID: \" + groupID);\nprint(\"\");\nprint(\"CurrentPermissions: \");\nprint(groupPerms);\nprint(\"\");\nprint(\"PermissionsToAdd: \");\nprint(permsToAdd);\nprint(\"\");\nprint(\"\");\n\n/**\n* we place the following loop at the top in order to act as a fail safe\n* if for some reason only the \"payment-ops\" group permissions array previously had the requested permissions\n* but the PermissionDAO did not get updated with those same permissions\n* we will then add the requested permissions into the PermissionsDAO only if they are unique\n* this is because later on in the script\n* we end the script if \"payment-ops\" group permissions array already has all the requested permissions\n* that is why we are updating the permissionsDAO first\n*/\nfor ( i = 0; i < permsToAdd.length; i++ ){\n/**\n*  ! NOTE: currently commenting out the lowercasifying until \n*  ! lowercase permission standardizations are made\n*  ! currently service permissions are all camel-cased\n*/\n// here we will also lowercasify the permissions in the array as well while we make this check\n// permsToAdd[i] = permsToAdd[i].toLowerCase();\n\ncurrentPermId = permsToAdd[i];\nif ( permissionDAO.find(currentPermId) == null ) permissionDAO.put(new Permission(currentPermId, \"\"));\n} \n\n/**\n* from here on out we will be dealing solely with the \"payment-ops\" group permissions' property\n* transforming the primitive array into just a set\n* because as we're deep cloning we can check if there are any duplicates\n* and then just pop them off the set\n*/\nSet permsToAddSet = new HashSet();\nfor ( i = 0; i < permsToAdd.length; i++ ) {\npermsToAddSet.add(permsToAdd[i]);\n}\n\n/**\n* we use an ArrayList instead of a primitive array because\n* we don't know the exact length of the final array if there are duplicates\n*/\nList newPermissions = new ArrayList();\n\nfor ( i = 0; i < groupPerms.length; i++ ) {\ncurrentPerm = groupPerms[i];\n\n// 1. deep clone original permissions to new arrayList\nnewPermissions.add(new Permission(currentPerm.id, currentPerm.description));\n\n// 2. check if permsToAdd is asking for this permission then pop it off because will already have been created\nif ( permsToAddSet.contains(currentPerm.id) ) permsToAddSet.remove(currentPerm.id);\n}\n\n// if permsToAddSet is empty, that means theres nothing to add\n// we can end the script here\nif ( permsToAddSet.isEmpty() ) {\nprint(\"Ending script here because the \" + groupID + \" group already has all the requested permissions\");\nprint(\"************************\");\nprint(\"END\");\nreturn;\n}\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(\"OriginalPermissions\");\nprint(newPermissions);\nprint(\"=======================\");\nprint(\"\");\n\n// here we will iterate through the remaining permsToAdd and place them in the newPermissions arraylist\nfor ( perm : permsToAddSet ) {\ncurrentPermission = new Permission(perm, \"\");\nnewPermissions.add(currentPermission);\n}\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(\"NewPermissions\");\nprint(newPermissions);\nprint(\"=======================\");\nprint(\"\");\n\n// making a deep conversion of the newPermissions ArrayList to a primitive array\nPermission[] newPermissionsArray = new Permission[newPermissions.size()];\nfor ( i = 0; i < newPermissionsArray.length; i++ ) {\nnewPermissionsArray[i] = new Permission(newPermissions.get(i).id, newPermissions.get(i).description);\n}\n\n// set newPermissionsArray as new property\ngroup.setPermissions(newPermissionsArray);\n\n// put modified group back into the groupDAO\ngroupDAO.put(group);\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(groupID + \"Group Permissions\");\ngroupDAO = x.get(\"groupDAO\");\ngroup = groupDAO.find(groupID);\ngroupPerms = group.permissions;\nprint(groupPerms);\nprint(\"=======================\");\nprint(\"\");\nprint(\"************************\");\nprint(\"END\");\n"})
p({"class":"foam.nanos.script.Script","id":"addServicePermsToSme","description":"Create various service permissions for Sme as a cause of the removal of service.*","code":"/**\n* TITLE: addServicePermsToSme\n* DESCRIPTION: Create various service permissions for Sme as a cause of the removal of service.*\n*/\nimport foam.nanos.auth.Group;\nimport foam.dao.DAO;\nimport foam.nanos.auth.Permission;\nimport foam.core.X;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.ArrayList;\nimport java.util.List;\n\n// ==================================================================================\n\n/**\n* Declaring \"Sme\" and its requested permissions as variables up here\n* That way the script is REUSABLE if anyone wants to create permissions for any group\n* \n* \n* Once the model properties have been edited, just add: \n* 1. groupID\n* 2. permsToAdd\n*/\ngroupID = \"sme\";\nString[] permsToAdd = {\n// (REPLICATE by creating a new bank account for a user)\n\"service.padCaptureDAO\",\n// (attempt to verify a newly created CA bank account)\n\"service.bankAccountVerification\",\n// (click on business settings)\n\"service.bankIntegrationsDAO\",\n// (hit view details on a payable)\n\"service.invoiceHistoryDAO\",\n// (go to bank accounts tab)\n\"service.branchDAO\",\n// (go to signing officer tab on business profile)\n\"service.identificationTypeDAO\",\n\"service.run.xero\",\n\"service.run.quick\",\n\"service.run.xeroWebAgent\",\n\"service.run.quickbooksWebAgent\",\n\"service.emailToken\"\n};\n\n// =================================================================================\n\n// grabbing the group's permissions property and permissionDAO\ngroupDAO = x.get(\"groupDAO\");\ngroup = groupDAO.find(groupID);\ngroupPerms = group.permissions;\npermissionDAO  = x.get(\"permissionDAO\");\n\n// FOR DEBUGGING\nprint(\"START\");\nprint(\"************************\");\nprint(\"GroupID: \" + groupID);\nprint(\"\");\nprint(\"CurrentPermissions: \");\nprint(groupPerms);\nprint(\"\");\nprint(\"PermissionsToAdd: \");\nprint(permsToAdd);\nprint(\"\");\nprint(\"\");\n\n/**\n* we place the following loop at the top in order to act as a fail safe\n* if for some reason only the \"payment-ops\" group permissions array previously had the requested permissions\n* but the PermissionDAO did not get updated with those same permissions\n* we will then add the requested permissions into the PermissionsDAO only if they are unique\n* this is because later on in the script\n* we end the script if \"payment-ops\" group permissions array already has all the requested permissions\n* that is why we are updating the permissionsDAO first\n*/\nfor ( i = 0; i < permsToAdd.length; i++ ){\n/**\n*  ! NOTE: currently commenting out the lowercasifying until \n*  ! lowercase permission standardizations are made\n*  ! currently service permissions are all camel-cased\n*/\n// here we will also lowercasify the permissions in the array as well while we make this check\n// permsToAdd[i] = permsToAdd[i].toLowerCase();\n\ncurrentPermId = permsToAdd[i];\nif ( permissionDAO.find(currentPermId) == null ) permissionDAO.put(new Permission(currentPermId, \"\"));\n} \n\n/**\n* from here on out we will be dealing solely with the \"payment-ops\" group permissions' property\n* transforming the primitive array into just a set\n* because as we're deep cloning we can check if there are any duplicates\n* and then just pop them off the set\n*/\nSet permsToAddSet = new HashSet();\nfor ( i = 0; i < permsToAdd.length; i++ ) {\npermsToAddSet.add(permsToAdd[i]);\n}\n\n/**\n* we use an ArrayList instead of a primitive array because\n* we don't know the exact length of the final array if there are duplicates\n*/\nList newPermissions = new ArrayList();\n\nfor ( i = 0; i < groupPerms.length; i++ ) {\ncurrentPerm = groupPerms[i];\n\n// 1. deep clone original permissions to new arrayList\nnewPermissions.add(new Permission(currentPerm.id, currentPerm.description));\n\n// 2. check if permsToAdd is asking for this permission then pop it off because will already have been created\nif ( permsToAddSet.contains(currentPerm.id) ) permsToAddSet.remove(currentPerm.id);\n}\n\n// if permsToAddSet is empty, that means theres nothing to add\n// we can end the script here\nif ( permsToAddSet.isEmpty() ) {\nprint(\"Ending script here because the \" + groupID + \" group already has all the requested permissions\");\nprint(\"************************\");\nprint(\"END\");\nreturn;\n}\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(\"OriginalPermissions\");\nprint(newPermissions);\nprint(\"=======================\");\nprint(\"\");\n\n// here we will iterate through the remaining permsToAdd and place them in the newPermissions arraylist\nfor ( perm : permsToAddSet ) {\ncurrentPermission = new Permission(perm, \"\");\nnewPermissions.add(currentPermission);\n}\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(\"NewPermissions\");\nprint(newPermissions);\nprint(\"=======================\");\nprint(\"\");\n\n// making a deep conversion of the newPermissions ArrayList to a primitive array\nPermission[] newPermissionsArray = new Permission[newPermissions.size()];\nfor ( i = 0; i < newPermissionsArray.length; i++ ) {\nnewPermissionsArray[i] = new Permission(newPermissions.get(i).id, newPermissions.get(i).description);\n}\n\n// set newPermissionsArray as new property\ngroup.setPermissions(newPermissionsArray);\n\n// put modified group back into the groupDAO\ngroupDAO.put(group);\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(groupID + \"Group Permissions\");\ngroupDAO = x.get(\"groupDAO\");\ngroup = groupDAO.find(groupID);\ngroupPerms = group.permissions;\nprint(groupPerms);\nprint(\"=======================\");\nprint(\"\");\nprint(\"************************\");\nprint(\"END\");\n"})
p({"class":"foam.nanos.script.Script","id":"addServicePermsToFraudOps","description":"Create various service permissions for Fraud Ops as a cause of the removal of service.*","code":"/**\n* TITLE: addServicePermsToFraudOps\n* DESCRIPTION: Create various service permissions for Fraud Ops as a cause of the removal of service.*\n*/\nimport foam.nanos.auth.Group;\nimport foam.dao.DAO;\nimport foam.nanos.auth.Permission;\nimport foam.core.X;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.ArrayList;\nimport java.util.List;\n\n// ==================================================================================\n\n/**\n* Declaring \"fraud-ops\" and its requested permissions as variables up here\n* That way the script is REUSABLE if anyone wants to create permissions for any group\n* \n* Once the model properties have been edited, just add: \n* 1. groupID\n* 2. permsToAdd\n*/\ngroupID = \"fraud-ops\";\nString[] permsToAdd = {\n// TO GET THE OPERATIONS MENU\n\"service.menuDAO\",\n// FROM JUST SELECTING THE OPERATIONS MENU ITEMS\n\"service.accountDAO\",\n\"service.nSpecDAO\",\n\"service.digitalAccount\",\n\"service.notificationDAO\",\n\"service.currencyDAO\",\n\"service.balanceDAO\",\n\"service.groupDAO\",\n\"service.transactionDAO\",\n\"service.invoiceDAO\",\n\"service.flinksAccountsDetailResponseDAO\",\n\"service.loginAttemptDAO\",\n\"service.ipHistoryDAO\",\n\"service.reportDAO\",\n\"service.ticketDAO\",\n\"service.ascendantFXUserDAO\",\n\"service.ascendantUserPayeeJunctionDAO\",\n\"service.whitelistedEmailDAO\",\n\"service.doNotSolicitDAO\",\n\"service.emailMessageDAO\",\n\"service.serviceProviderDAO\",\n// FROM OPERATIONS -> USER -> CREATE\n\"service.businessSectorDAO\",\n\"service.languageDAO\",\n\"service.partnerJunctionDAO\",\n\"service.paymentCardDAO\",\n// FROM OPERATIONS -> ACCOUNT -> CREATE\n\"service.publicKeyDAO\",\n// FROM OPERATIONS -> INVOICE -> CREATE\n\"service.recurringInvoiceDAO\",\n// FROM OPERATIONS → INVOICE → CREATE → SAVE\n\"service.fileDAO\",\n// FROM OPERATIONS → TICKETS → NEW TICKET → SUBMIT AS *\n\"service.ticketMessageDAO\",\n// FROM OPERATIONS → REPORTS → RUN *\n\"service.scriptDAO\",\n// FROM OPERATIONS -> ALTERNA-EFT -> Download csv -> login\n\"service.run.alterna\",\n// FROM OPERATIONS -> SERVICE PROVIDERS -> CREATE\n\"service.lineItemFeeDAO\",\n\"service.lineItemTaxDAO\",\n\"service.lineItemTypeDAO\",\n\"service.transactionFeeDAO\",\n// FROM OPERATIONS → * → EXPORT\n\"service.exportDriverRegistryDAO\",\n// FROM PERSONAL SETTINGS\n\"service.twofactor\",\n\"service.supportEmailDAO\",\n\"service.liquiditySettingsDAO\",\n\"service.securefactLEVDAO\",\n\"service.securefactSIDniDAO\",\n\"service.branchDAO\",\n\"service.institutionDAO\"\n};\n\n// =================================================================================\n\n// grabbing the group's permissions property and permissionDAO\ngroupDAO = x.get(\"groupDAO\");\ngroup = groupDAO.find(groupID);\ngroupPerms = group.permissions;\npermissionDAO  = x.get(\"permissionDAO\");\n\n// FOR DEBUGGING\nprint(\"START\");\nprint(\"************************\");\nprint(\"GroupID: \" + groupID);\nprint(\"\");\nprint(\"CurrentPermissions: \");\nprint(groupPerms);\nprint(\"\");\nprint(\"PermissionsToAdd: \");\nprint(permsToAdd);\nprint(\"\");\nprint(\"\");\n\n/**\n* we place the following loop at the top in order to act as a fail safe\n* if for some reason only the \"payment-ops\" group permissions array previously had the requested permissions\n* but the PermissionDAO did not get updated with those same permissions\n* we will then add the requested permissions into the PermissionsDAO only if they are unique\n* this is because later on in the script\n* we end the script if \"payment-ops\" group permissions array already has all the requested permissions\n* that is why we are updating the permissionsDAO first\n*/\nfor ( i = 0; i < permsToAdd.length; i++ ){\n/**\n*  ! NOTE: currently commenting out the lowercasifying until \n*  ! lowercase permission standardizations are made\n*  ! currently service permissions are all camel-cased\n*/\n// here we will also lowercasify the permissions in the array as well while we make this check\n// permsToAdd[i] = permsToAdd[i].toLowerCase();\n\ncurrentPermId = permsToAdd[i];\nif ( permissionDAO.find(currentPermId) == null ) permissionDAO.put(new Permission(currentPermId, \"\"));\n} \n\n/**\n* from here on out we will be dealing solely with the \"payment-ops\" group permissions' property\n* transforming the primitive array into just a set\n* because as we're deep cloning we can check if there are any duplicates\n* and then just pop them off the set\n*/\nSet permsToAddSet = new HashSet();\nfor ( i = 0; i < permsToAdd.length; i++ ) {\npermsToAddSet.add(permsToAdd[i]);\n}\n\n/**\n* we use an ArrayList instead of a primitive array because\n* we don't know the exact length of the final array if there are duplicates\n*/\nList newPermissions = new ArrayList();\n\nfor ( i = 0; i < groupPerms.length; i++ ) {\ncurrentPerm = groupPerms[i];\n\n// 1. deep clone original permissions to new arrayList\nnewPermissions.add(new Permission(currentPerm.id, currentPerm.description));\n\n// 2. check if permsToAdd is asking for this permission then pop it off because will already have been created\nif ( permsToAddSet.contains(currentPerm.id) ) permsToAddSet.remove(currentPerm.id);\n}\n\n// if permsToAddSet is empty, that means theres nothing to add\n// we can end the script here\nif ( permsToAddSet.isEmpty() ) {\nprint(\"Ending script here because the \" + groupID + \" group already has all the requested permissions\");\nprint(\"************************\");\nprint(\"END\");\nreturn;\n}\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(\"OriginalPermissions\");\nprint(newPermissions);\nprint(\"=======================\");\nprint(\"\");\n\n// here we will iterate through the remaining permsToAdd and place them in the newPermissions arraylist\nfor ( perm : permsToAddSet ) {\ncurrentPermission = new Permission(perm, \"\");\nnewPermissions.add(currentPermission);\n}\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(\"NewPermissions\");\nprint(newPermissions);\nprint(\"=======================\");\nprint(\"\");\n\n// making a deep conversion of the newPermissions ArrayList to a primitive array\nPermission[] newPermissionsArray = new Permission[newPermissions.size()];\nfor ( i = 0; i < newPermissionsArray.length; i++ ) {\nnewPermissionsArray[i] = new Permission(newPermissions.get(i).id, newPermissions.get(i).description);\n}\n\n// set newPermissionsArray as new property\ngroup.setPermissions(newPermissionsArray);\n\n// put modified group back into the groupDAO\ngroupDAO.put(group);\n\n// FOR DEBUGGING\nprint(\"\");\nprint(\"=======================\");\nprint(groupID + \"Group Permissions\");\ngroupDAO = x.get(\"groupDAO\");\ngroup = groupDAO.find(groupID);\ngroupPerms = group.permissions;\nprint(groupPerms);\nprint(\"=======================\");\nprint(\"\");\nprint(\"************************\");\nprint(\"END\");\n"})
