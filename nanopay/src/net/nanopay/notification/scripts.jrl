p({
  "class":"foam.nanos.script.Script",
  "id":"Test Email Service",
  "code":"""
    import foam.nanos.notification.email.SMTPEmailService;
    import foam.nanos.notification.email.EmailMessage
    
    toAddress = "test@address.com"
    fromAddress = "info@nanopay.net"
    message = new EmailMessage();
    message.setTo(new String[] { toAddress });
    message.setFrom(fromAddress);
    message.setSubject("Test Email");
    message.setBody("This is a test");
    
    emailService = x.get("email");

    // Uncomment and configure to use a network email service
    // emailService = new SMTPEmailService.Builder(x)
    //  .setHost("<smtp-host>")
    //  .setPort("587")
    //  .setAuthenticate(true)
    //  .setStarttls(true)
    //  .setUsername("<smtp-username>")
    //  .setPassword("<smtp-password>")
    //  .build();

    emailService.sendEmail(x, message);

    print("Done");
  """
})

p({
  "class":"foam.nanos.script.Script",
  "id":"Test Email Utility",
  "code":"""
    import foam.util.Emails.EmailsUtility;
    
    user = x.get(\"user\");
    message = new foam.nanos.notification.email.EmailMessage();
    message.setTo(new String[] { user.getEmail() });
    map = new java.util.HashMap();
    map.put("content", user.getFirstName());
    EmailsUtility.sendEmailFromTemplate(user, message, "testEmail", map);
    print("Done");
  """
})

p({
  "class":"foam.nanos.script.Script",
  "id":"create notification settings for existing users",
  "code":"""
import foam.nanos.auth.User;
// Uncomment for v3.9+
//import foam.nanos.auth.Subject;
import net.nanopay.model.Business;
import foam.dao.DAO;
import foam.nanos.notification.NotificationSetting;
import foam.nanos.notification.EmailSetting;
import foam.dao.ArraySink;
import foam.mlang.MLang;
import foam.mlang.predicate.Predicate;
import foam.mlang.sink.Count;

// Switch to Subject for v3.9+
//user = ((Subject) x.get("subject")).getUser();
user = (User) x.get("user");
userDAO = (DAO) x.get("bareUserDAO");
agentJunctionDAO = (DAO) x.get("agentJunctionDAO");
notificationSettingDAO = (DAO) x.get("notificationSettingDAO");
users = userDAO.select(new ArraySink()).getArray();

for ( User user : users ) {
  notificationSetting = user.getNotificationSettings(x).where(MLang.NOT(MLang.INSTANCE_OF(EmailSetting.class))).select(new Count());
  emailSetting = user.getNotificationSettings(x).where(MLang.INSTANCE_OF(EmailSetting.class)).select(new Count());

  if (notificationSetting.getValue() <= 0) {
    notificationSetting = new NotificationSetting();
    notificationSetting.setOwner(user.getId());
    notificationSettingDAO.put(notificationSetting);
    print("Notification Setting created for user: " + user.getId());
  }

  if ( ! ( user instanceof Business ) ) {
    if (emailSetting.getValue() <= 0) {
      emailsetting = new EmailSetting();
      emailsetting.setOwner(user.getId());
      notificationSettingDAO.put(emailsetting);
      print("Email Setting created for user: " + user.getId());
    }
  }
}

junctions = agentJunctionDAO.select(new ArraySink()).getArray();
for ( junction : junctions ) {
  junctionId = new foam.nanos.auth.UserUserJunctionId();
  junctionId.setSourceId(junction.getSourceId());
  junctionId.setTargetId(junction.getTargetId());

  notificationSettings = notificationSettingDAO.where(MLang.AND(new Predicate [] {
        MLang.NOT(MLang.INSTANCE_OF(EmailSetting.class)),
        MLang.EQ(NotificationSetting.USER_JUNCTION, junctionId)
      })).select(new Count()).getValue();

  emailSettings = notificationSettingDAO.where(MLang.AND(new Predicate [] {
        MLang.INSTANCE_OF(EmailSetting.class),
        MLang.EQ(NotificationSetting.USER_JUNCTION, junctionId)
      })).select(new Count()).getValue();

  if ( notificationSettings <= 0 ){
    notificationSetting = new NotificationSetting();
    notificationSetting.setUserJunction(junctionId);
    notificationSettingDAO.put(notificationSetting);
    print("Notification setting created for junction: sourceId: " + junctionId.getSourceId() + " targetId: " + junctionId.getTargetId());
  }

  if ( emailSettings <= 0 ) {
    emailsetting = new EmailSetting();
    emailsetting.setUserJunction(junctionId);
    notificationSettingDAO.put(emailsetting);
    print("Email setting created for junction: sourceId: " + junctionId.getSourceId() + " targetId: " + junctionId.getTargetId());
  }
}

print("done");
  """
})
