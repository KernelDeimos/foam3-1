p({"class":"foam.nanos.ruler.Rule","id":"68afcf0c-c718-98f8-0841-75e97a3ad16d6","name":"AFEX Beneficiary Compliance Transaction","priority":80,"ruleGroup":"AFEX","documentation":"Check if AFEX Beneficiary is apporved before preceeding with payment","daoKey":"localTransactionDAO","operation":3,"after":false,"predicate":{"class":"net.nanopay.fx.afex.AbstractPredicate"},"action":{"class":"net.nanopay.fx.afex.AFEXComplianceTransactionRule"},"enabled":true,"saveHistory":true})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d7","name":"Add FX Currency Permission to Business",
  "documentation":"Rule to add currency.read.FX_CURRENCY when a business is pushed to AFEX and AFEXBusiness is created.",
  "priority":100,
  "ruleGroup":"onboarding",
  "daoKey":"afexBusinessDAO",
  "operation":3,
  "after":true,
  "predicate":{
    "class":"net.nanopay.fx.afex.AFEXBusinessCreatedPredicate",
  },
  "action":{
    "class":"net.nanopay.fx.afex.AFEXAddCurrencyPermissionRule"
  },
  "enabled":true,
  "saveHistory":true
})
r({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d8","name":"Send Operations Email Notification When AFEXBusiness is Created",
})
r({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d9","name":"Send User Email Notification When AFEXBusiness is Created",
})
r({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d10","name":"Remove FX Currency Permission When AFEXBusiness is Disabled"
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d11","name":"Create AFEXBusiness Approval Request",
  "documentation":"Rule to create AFEXBusiness Approval Request.",
  "priority":100,
  "ruleGroup":"AFEXOnboarding",
  "daoKey":"afexBusinessDAO",
  "operation":0,
  "after":true,
  "predicate":{
    "class":"net.nanopay.fx.afex.AFEXBusinessCreatedPredicate",
  },
  "action":{
    "class":"net.nanopay.fx.afex.AFEXBusinessApprovalRequestRule"
  },
  "enabled":true,
  "saveHistory":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d12","name":"Onboard Business Bank Account Owner to AFEX",
  "documentation":"Rule to onboard bank account owner to AFEX if it is a business and passed comliance.",
  "priority":100,
  "ruleGroup":"AFEXOnboarding",
  "daoKey":"localAccountDAO",
  "operation":3,
  "after":true,
  "predicate": {
    "class": "foam.mlang.predicate.And",
    "args": [
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BankAccountVerified"
      },
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BankAccountOwnerIsBusiness"
      }
    ]
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBankOnboardingRule"
  },
  "enabled":true,
  "saveHistory":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d13","name":"Onboard Business to AFEX",
  "documentation":"Rule to onboard business to AFEX if it has passed comliance and has a verified bank account.",
  "priority":100,
  "ruleGroup":"AFEXOnboarding",
  "daoKey":"localUserDAO",
  "operation":3,
  "after":true,
  "predicate": {
    "class": "foam.mlang.predicate.And",
    "args": [
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BusinessCompliancePassed"
      },
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BusinessHasVerifiedBankAccount"
      }
    ]
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBusinessOnboardingRule"
  },
  "enabled":true,
  "saveHistory":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d14","name":"Upload Business bank accounts to AFEX",
  "documentation":"Rule to upload business bank account information to AFEX",
  "priority":100,
  "ruleGroup":"AFEXOnboarding",
  "daoKey":"localUserDAO",
  "operation":3,
  "after":true,
  "predicate": {
    "class": "foam.mlang.predicate.And",
    "args": [
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BusinessCompliancePassed"
      },
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BusinessHasVerifiedBankAccount"
      }
    ]
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBankUploadingRule"
  },
  "enabled":false,
  "saveHistory":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d15","name":"Upload bank accounts to AFEX for existing AFEX business",
  "documentation":"Rule to upload new bank account for existing AFEX business",
  "priority":100,
  "ruleGroup":"AFEXOnboarding",
  "daoKey":"localAccountDAO",
  "operation":3,
  "after":true,
  "predicate": {
    "class": "foam.mlang.predicate.And",
    "args": [
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BankAccountVerified"
      },
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BankAccountOwnerIsBusiness"
      }
    ]
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBankUploadingRule2"
  },
  "enabled":false,
  "saveHistory":true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d16","name":"Add IN Currency Permission to Business",
  "documentation":"Rule to add IN currency and strategizer Permission when a business is pushed to AFEX and AFEXBusiness is created.",
  "priority":100,
  "ruleGroup":"onboarding",
  "daoKey":"afexBusinessDAO",
  "operation":3,
  "after":true,
  "predicate":{
    "class":"net.nanopay.fx.afex.AFEXBusinessCreatedPredicate",
  },
  "action":{
    "class":"net.nanopay.fx.AddINCurrencyPermissionRule"
  },
  "enabled":true,
  "saveHistory":true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d17","name":"AFEX Create Trade Rule",
  "documentation":"Rule to create trade on AFEX system when transaction is PENDING_PARENT_COMPLETED and trade not yet created.",
  "priority":100,
  "ruleGroup":"AFEX",
  "daoKey":"localTransactionDAO",
  "operation":0,
  "after":true,
  "predicate":{
    "class":"net.nanopay.fx.afex.AFEXCreateTradePredicate",
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXCreateTradeRule"
  },
  "enabled":true,
  "saveHistory":true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d18","name":"AFEX Submit Payment Rule",
  "documentation":"Rule to create submit payment to AFEX system when transaction is PENDING and reference number is null.",
  "priority":100,
  "ruleGroup":"AFEX",
  "daoKey":"localTransactionDAO",
  "operation":1,
  "after":true,
  "predicate":{
    "class":"net.nanopay.fx.afex.AFEXSubmitPaymentPredicate",
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXSubmitPaymentRule"
  },
  "enabled":true,
  "saveHistory":true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"c1419029-a8fe-136e-a29e-eef5c17e60cc",
  "name":"AFEX Push Beneficial Owner",
  "documentation":"Rule to push Business Beneficial Owner to AFEX after AFEX Business is created.",
  "priority":100,
  "ruleGroup":"AFEX",
  "daoKey":"afexBusinessDAO",
  "operation":1,
  "after":true,
  "predicate":{
    "class": "foam.nanos.ruler.predicate.PropertyNEQValue",
    "propName": "apiKey",
    "propValue": null
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBeneficialOwnerRule"
  },
  "enabled":true,
  "saveHistory":true
})