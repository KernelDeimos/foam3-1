p({"class":"net.nanopay.invoice.AuthenticatedInvoiceDAOTest","id":"AuthenticatedInvoiceDAOTest"})
p({
  "class":"foam.nanos.test.Test",
  "id":"Approval tests",
  "code":"""
import foam.dao.*;
import foam.nanos.auth.User;
import foam.util.Auth;

import net.nanopay.account.Account;
import net.nanopay.bank.BankAccountStatus;
import net.nanopay.bank.CABankAccount;
import net.nanopay.invoice.model.Invoice;
import net.nanopay.invoice.model.InvoiceStatus;
import net.nanopay.invoice.model.PaymentStatus;
import net.nanopay.tx.model.Transaction;
import net.nanopay.admin.model.ComplianceStatus;
import net.nanopay.model.Business;
import foam.nanos.session.Session;
import foam.nanos.auth.UserUserJunction;

accountDAO = (DAO) x.get("accountDAO");
bareUserDAO = (DAO) x.get("bareUserDAO");
localBusinessDAO = (DAO) x.get("localBusinessDAO");
invoiceDAO = (DAO) x.get("invoiceDAO");
transactionDAO = (DAO) x.get("transactionDAO");
agentJunctionDAO = (DAO) x.get("agentJunctionDAO");

////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// SETUP ////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
// Setup the business
bareUserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, "business@example.com")).removeAll();
myBusiness = new Business();
myBusiness.setBusinessName("MyBusiness");
myBusiness.setEmail("busadmin@example.com");
myBusiness.setEmailVerified(true); // Required to send or receive money.
myBusiness.setCompliance(ComplianceStatus.PASSED);
myBusiness = localBusinessDAO.put(myBusiness);

bareUserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, "employee@example.com")).removeAll();
myEmployee = new User();
myEmployee.setFirstName("MyEmployee");
myEmployee.setEmail("employee@example.com");
myEmployee.setGroup("sme");
myEmployee.setEmailVerified(true); // Required to send or receive money.
myEmployee.setCompliance(ComplianceStatus.PASSED);
myEmployee = bareUserDAO.put(myEmployee);
myEmployeeContext = Auth.sudo(x, myEmployee);

bareUserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, "approver@example.com")).removeAll();
myApprover = new User();
myApprover.setFirstName("MyEmployee");
myApprover.setEmail("approver@example.com");
myApprover.setGroup("approver");
myApprover.setEmailVerified(true); // Required to send or receive money.
myApprover.setCompliance(ComplianceStatus.PASSED);
myApprover = bareUserDAO.put(myApprover);
myApproverContext = Auth.sudo(x, myApprover);

bareUserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, "externalBusiness@example.com")).removeAll();
externalBusiness = new Business();
externalBusiness.setBusinessName("ExternalBusiness");
externalBusiness.setEmail("externalBusiness@example.com");
externalBusiness.setEmailVerified(true); // Required to send or receive money.
externalBusiness.setCompliance(ComplianceStatus.PASSED);
externalBusiness = localBusinessDAO.put(externalBusiness);

// Creating junctions my business users
employeeToBusinessJunc = new UserUserJunction();
employeeToBusinessJunc.setSourceId(myEmployee.getId());
employeeToBusinessJunc.setTargetId(myBusiness.getId());
employeeToBusinessJunc.setGroup(myBusiness.getBusinessPermissionId() + ".employee");
agentJunctionDAO.put(employeeToBusinessJunc);

approverToBusinessJunc = new UserUserJunction();
approverToBusinessJunc.setSourceId(myApprover.getId());
approverToBusinessJunc.setTargetId(myBusiness.getId());
approverToBusinessJunc.setGroup(myBusiness.getBusinessPermissionId() + ".approver");
agentJunctionDAO.put(approverToBusinessJunc);

// Creating respective contexts with user-agent enabled in their sessions
sessionApprover = myApproverContext.get(Session.class);
sessionApprover.setUserId(myBusiness.getId());
sessionApprover.setAgentId(myApprover.getId());
myApproverContext = sessionApprover.applyTo(myApproverContext);

sessionEmployee = myEmployeeContext.get(Session.class);
sessionEmployee.setUserId(myBusiness.getId());
sessionEmployee.setAgentId(myEmployee.getId());
myEmployeeContext = sessionEmployee.applyTo(myEmployeeContext);

// Creating an account for my business and the external busienss I am sending to
accountDAO.where(foam.mlang.MLang.EQ(Account.NAME, "Approval Tests myBusiness test account")).removeAll();
myBusinessBankAccount = new CABankAccount();
myBusinessBankAccount.setName("Approval Tests myEmployee test account");
myBusinessBankAccount.setDenomination("CAD");
myBusinessBankAccount.setAccountNumber("87654321");
myBusinessBankAccount.setInstitution(1);
myBusinessBankAccount.setBranchId("54321");
myBusinessBankAccount.setOwner(myBusiness.getId());
myBusinessBankAccount.setStatus(BankAccountStatus.VERIFIED);
myBusinessBankAccount = myBusiness.getAccounts(x).put_(x, myBusinessBankAccount);

accountDAO.where(foam.mlang.MLang.EQ(Account.NAME, "Approval Tests externalBusiness test account")).removeAll();
externalBusinessBankAccount = new CABankAccount();
externalBusinessBankAccount.setName("Approval Tests external business test account");
externalBusinessBankAccount.setDenomination("CAD");
externalBusinessBankAccount.setAccountNumber("12345678");
externalBusinessBankAccount.setInstitution(1);
externalBusinessBankAccount.setOwner(externalBusiness.getId());
externalBusinessBankAccount.setBranchId("12345");
externalBusinessBankAccount.setStatus(BankAccountStatus.VERIFIED);

// previously, there where no permissions in place to prevent unauthorized groups from setting bank account statuses
// after adding bank account status permissions, this test would not work
// this is because in the normal .put method, despite the bank account status being set to verified in the lines above
// it goes through a cloning procedure in the permissionedPropertyDAO, where it checks if the employee1's group (sme) 
// has permissions to read/write bank account status, since they do not it would instead reset the status property to unverified
// that is why we must use the override put_, in order to set the employee bank account using the global context permissions
externalBusinessBankAccount = externalBusiness.getAccounts(x).put_(x, externalBusinessBankAccount);


///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// TEST CODE ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////


invoice = new Invoice();
invoice.setAmount(1);
invoice.setPayerId(myBusiness.getId());
invoice.setPayeeId(externalBusiness.getId());
invoice.setDestinationCurrency("CAD");
invoice.setAccount(myBusinessBankAccount.getId());
invoice = invoiceDAO.inX(myEmployeeContext).put(invoice);
invoiceStatusIsCorrect = invoice.getStatus() == InvoiceStatus.UNPAID;
paymentStatusIsCorrect = invoice.getPaymentMethod() == PaymentStatus.NONE;
if ( ! invoiceStatusIsCorrect ) {
  print("DEBUG: Invoice status is " + invoice.getStatus());
}
if ( ! paymentStatusIsCorrect ) {
  print("DEBUG: Payment status is " + invoice.getPaymentMethod());
}
test(invoiceStatusIsCorrect && paymentStatusIsCorrect, "When an employee creates an invoice, the invoice status is UNPAID and the payment status is NONE.");


transaction = new Transaction();
transaction.setSourceAccount(invoice.getAccount());
transaction.setDestinationAccount(invoice.getDestinationAccount());
transaction.setPayerId(invoice.getPayerId());
transaction.setPayeeId(invoice.getPayeeId());
transaction.setAmount(invoice.getAmount());
transaction.setInvoiceId(invoice.getId());
threw = false;
message = "";
try {
  transactionDAO.inX(myEmployeeContext).put(transaction);
  invoice = invoiceDAO.inX(myEmployeeContext).find(invoice.id);
  invoiceStatusIsCorrect = invoice.getStatus() == InvoiceStatus.PENDING_APPROVAL;
  paymentStatusIsCorrect = invoice.getPaymentMethod() == PaymentStatus.PENDING_APPROVAL;
  if ( ! invoiceStatusIsCorrect ) {
    print("DEBUG: Invoice status is " + invoice.getStatus());
  }
  if ( ! paymentStatusIsCorrect ) {
    print("DEBUG: Payment status is " + invoice.getPaymentMethod());
  }
} catch (Throwable t) {
  threw = true;
  message = t.getMessage();
  print("DEBUG: " + message);
}
test(! threw && invoiceStatusIsCorrect && paymentStatusIsCorrect, "When an employee tries to pay an invoice the invoice is set to a PENDING_APPROVAL state.");


invoice = new Invoice();
invoice.setAmount(1);
invoice.setPayerId(myBusiness.getId());
invoice.setPayeeId(externalBusiness.getId());
invoice.setDestinationCurrency("CAD");
invoice.setAccount(myBusinessBankAccount.getId());
invoice = invoiceDAO.inX(myApproverContext).put(invoice);
test(invoice.getStatus() == InvoiceStatus.UNPAID && invoice.getPaymentMethod() == PaymentStatus.NONE, "When an approver creates an invoice, the invoice status is UNPAID and the payment status is NONE.");


transaction = new Transaction();
transaction.setSourceAccount(invoice.getAccount());
transaction.setDestinationAccount(invoice.getDestinationAccount());
transaction.setPayerId(invoice.getPayerId());
transaction.setPayeeId(invoice.getPayeeId());
transaction.setAmount(invoice.getAmount());
transaction.setInvoiceId(invoice.getId());
threw = false;
message = "";
try {
  transactionDAO.inX(myApproverContext).put(transaction);
} catch (Throwable t) {
  threw = true;
  message = t.getMessage();
  print("DEBUG: " + message);
}
test(! threw, "When an approver tries to pay an invoice, it works as expected.");
"""
})
