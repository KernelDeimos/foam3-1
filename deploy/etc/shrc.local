#!/bin/bash
#
#########################
# JVM Configuration and Tuning parameters
# See shrc.custom to override memory parameters
#
# See https://www.oracle.com/technetwork/articles/java/vmoptions-jsp-140102.htmlString
#########################

if [ -z "${DEBUG_PORT}" ]; then
  DEBUG_PORT=8000
fi

if [ -z "${DEBUG_SUSPEND}" ]; then
  DEBUG_SUSPEND=n
fi

###### Customer parameter File
CUSTOM_CONFIG="${NANOPAY_HOME}/conf/shrc.custom"
if [ -f "${CUSTOM_CONFIG}" ]; then
  . ${CUSTOM_CONFIG} $1
fi

###### Project parameter File
PROJECT_CONFIG="${NANOPAY_HOME}/etc/shrc.project"
if [ -f "${PROJECT_CONFIG}" ]; then
  . ${PROJECT_CONFIG} $1
fi

# memory - heap
if [ -z "`echo "${JAVA_OPTS}" | grep "Xms"`" ]; then
  JAVA_OPTS="${JAVA_OPTS} -Xms2048m"
fi

if [ -z "`echo "${JAVA_OPTS}" | grep "Xmx"`" ]; then
  JAVA_OPTS="${JAVA_OPTS} -Xmx4096m"
fi

# memory - stack
if [ -z "`echo "${JAVA_OPTS}" | grep "Xss"`" ]; then
  JAVA_OPTS="${JAVA_OPTS} -Xss1m"
fi

if [ -z "`echo "${JAVA_OPTS}" | grep "XX:.*NewSize"`" ]; then
  JAVA_OPTS="${JAVA_OPTS} -XX:NewSize=192m"
  JAVA_OPTS="${JAVA_OPTS} -XX:MaxNewSize=512m"
fi

# Attempt to avoid unnecessary class unloading/loading
JAVA_OPTS="${JAVA_OPTS} -XX:ReservedCodeCacheSize=128m"

# out of memory heap dump
JAVA_OPTS="${JAVA_OPTS} -XX:+HeapDumpOnOutOfMemoryError"

# TTL caching policy for Name Service lookup. Default is -1 (forever)
# which prevents DNS spoofing but does not allow us to reconfigure
# (change an ipaddress of a clustered node) without restarting all
# other cluster nodes. Time in seconds.
JAVA_OPTS=$JAVA_OPTS" -Dnetworkaddress.cache.ttl=3600"

##### Debugging / Diagnostic
# Troubleshooting debug setup.

# Uncomment in shrc.custom to enable all Debug/Diagnostic parameters.
#DEBUG=1 - enable in shrc.custom

if [ "${DEBUG}" = "1" ]; then
  # Turn on to debug random JVM pauses
  JAVA_OPTS="${JAVA_OPTS} -XX:+UnlockDiagnosticVMOptions"
  JAVA_OPTS="${JAVA_OPTS} -XX:+LogCompilation"
  JAVA_OPTS="${JAVA_OPTS} -XX:+PrintCompilation"
  JAVA_OPTS="${JAVA_OPTS} -XX:+PrintVMQWaitTime"

  # Free List Statistics
  JAVA_OPTS="${JAVA_OPTS} -XX:PrintFLSStatistics=1"
  JAVA_OPTS="${JAVA_OPTS} -XX:+LogVMOutput"

  # DTrace
  JAVA_OPTS="${JAVA_OPTS} -XX:+ExtendedDTraceProbes"
  JAVA_OPTS="${JAVA_OPTS} -XX:+DTraceAllocProbes"
  JAVA_OPTS="${JAVA_OPTS} -XX:+DTraceMethodProbes"
  JAVA_OPTS="${JAVA_OPTS} -XX:+DTraceMonitorProbes"
fi
# Uncomment in shrc.custom to enable only the following Dev Debug/Diagnostic parameters.
# NOTE: these parameters are also enabled when DEBUG is enabled.
#DEBUG_DEV=1 - enable in shrc.custom

if [ "${DEBUG}" = "1" -o "${DEBUG_DEV}" = "1" ]; then
  JAVA_OPTS="${JAVA_OPTS} -Xdebug"
  JAVA_OPTS="${JAVA_OPTS} -Xnoagent"
  JAVA_OPTS="${JAVA_OPTS} -agentlib:jdwp=transport=dt_socket,server=y,suspend=${DEBUG_SUSPEND},address=${DEBUG_PORT}"
fi

##### Garbage Collection
#JAVA_OPTS="${JAVA_OPTS} -XX:+UseG1GC"
#JAVA_OPTS="${JAVA_OPTS} -Xgcpolicy.gencon"

# G1GC options - default in Java 9, 10, 11
JAVA_OPTS="${JAVA_OPTS} -XX:+UseStringDeduplication"

# Garbage Collection logging
if [ -z "`echo "${JAVA_OPTS}" | grep ":gc"`" ]; then

    JAVA_OPTS="${JAVA_OPTS} -Xlog:gc*,safepoint:${LOG_HOME}/gc.log:time,uptime:filecount=10,filesize=1024K"
fi

# OutOfMemory
JAVA_OPTS=$JAVA_OPTS" -XX:+HeapDumpOnOutOfMemoryError"
JAVA_OPTS=$JAVA_OPTS" -XX:HeapDumpPath=${LOG_HOME}/java_pid<pid>.hprof"
#JAVA_OPTS=$JAVA_OPTS" -XX:OnOutOfMemoryError="< cmd args >;< cmd args >" // shutdown -r for example.
JAVA_OPTS=$JAVA_OPTS" -XX:+UseGCOverheadLimit"


# default on Solaris but not Linux
JAVA_OPTS="${JAVA_OPTS} -XX:+UseLargePages"

##### File
JAVA_OPTS="${JAVA_OPTS} -XX:+MaxFDLimit"
