p({
  "class":"foam.nanos.script.Script",
  "id":"benchmarkTransactionCreation",
  "code":`
    import foam.nanos.bench.*;
    import net.nanopay.bench.*;
    lc = x.get("logLevelFilterLogger");
    lc.setLogInfo(true);
    savedDebug = lc.getLogDebug();
    lc.setLogDebug(false);
    x = x.put("pmLogger", null);
    b = new TransactionBenchmark();
    b.setQuoteTransactions(true);
    b.setDisableRules(false);
    b.setPurgePerRun(false);
    builder = new BenchmarkRunner.Builder(x)
      .setInvocationCount(10000)
      .setRunPerThread(true)
      .setBenchmark(b);
    runner = builder.build();
    runner.execute(x);
    print("done");
    print(runner.getResult());
    l = x.get("logger");
    lc.setLogInfo(true);
    lc.setLogDebug(savedDebug);
    l.info(new Object[] {runner.getResult()});
  `,
  "output":""
})

p({
  "class":"foam.nanos.script.Script",
  "id":"benchmarkTransactionCreationClient",
  "server":false,
  "clusterable":false,
  "code":"""
var domain = 'mm3';
var port = 8090;
var sessionId = 'e6a6f1d4-94dd-82db-ecd8-f3f4ea9ef738';
var of = net.nanopay.tx.model.Transaction;
var serviceName = 'transactionDAO';

var box = foam.box.HTTPBox.create({
    url: 'http://'+domain+':'+port+'/service/'+serviceName,
    authorizationType: foam.box.HTTPAuthorizationType.BEARER,
    sessionID: sessionId
}, x);
box = foam.box.TimeoutBox.create({ delegate: box }, x);
box = foam.box.SessionClientBox.create({ sessionID: sessionId, delegate: box }, x);
var dao = foam.dao.EasyDAO.create({
    daoType: 'CLIENT',
    of: of,
    serverBox: box
}, x);

dao.select(foam.mlang.sink.Count.create()).then(function(c) {
    console.log("count: "+c.value);
}).catch(function(e) {
    console.error(e.message);
});

// account range
var min = 182;
var max = 283;

for ( var i = 0; i < 5; i++ ) {
    var source = Math.floor(Math.random() * (max - min + 1)) + min;
    var dest = Math.floor(Math.random() * (max - min + 1)) + min;
    var amount = Math.random() * 100;
    var txn = net.nanopay.tx.model.Transaction.create({
        sourceAccount: source,
        destinationAccount: dest,
        amount: amount
    }, x);
    dao.put(txn).then(function(t) {
        console.log("txn: "+t.id);
    }).catch(function(e) {
        console.error(e.message);
    });
}
  """
});
