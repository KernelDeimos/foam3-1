p({"class":"foam.nanos.ruler.Rule","id":"AFEX Beneficiary Compliance Transaction","priority":80,"ruleGroup":"AFEX","documentation":"Check if AFEX Beneficiary is apporved before preceeding with payment","daoKey":"localTransactionDAO","operation":3,"after":false,"predicate":{"class":"net.nanopay.fx.afex.AbstractPredicate"},"action":{"class":"net.nanopay.fx.afex.AFEXComplianceTransactionRule"},"enabled":true,"saveHistory":true})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Add FX Currency Permission to Business",
  "documentation":"Rule to add currency.read.FX_CURRENCY when a business is pushed to AFEX and AFEXBusiness is created.",
  "priority":100,
  "ruleGroup":"onboarding",
  "daoKey":"afexBusinessDAO",
  "operation":3,
  "after":true,
  "predicate":{
    "class":"net.nanopay.fx.afex.AFEXBusinessCreatedPredicate",
  },
  "action":{
    "class":"net.nanopay.fx.afex.AFEXAddCurrencyPermissionRule"
  },
  "enabled":true,
  "saveHistory":true
})
r({
  "class":"foam.nanos.ruler.Rule",
  "id":"Send Operations Email Notification When AFEXBusiness is Created",
})
r({
  "class":"foam.nanos.ruler.Rule",
  "id":"Send User Email Notification When AFEXBusiness is Created",
})
r({
  "class":"foam.nanos.ruler.Rule",
  "id":"Remove FX Currency Permission When AFEXBusiness is Disabled"
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Create AFEXBusiness Approval Request",
  "documentation":"Rule to create AFEXBusiness Approval Request.",
  "priority":100,
  "ruleGroup":"AFEXOnboarding",
  "daoKey":"afexBusinessDAO",
  "operation":0,
  "after":true,
  "predicate":{
    "class":"net.nanopay.fx.afex.AFEXBusinessCreatedPredicate",
  },
  "action":{
    "class":"net.nanopay.fx.afex.AFEXBusinessApprovalRequestRule"
  },
  "enabled":true,
  "saveHistory":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Onboard Business Bank Account Owner to AFEX",
  "documentation":"Rule to onboard bank account owner to AFEX if it is a business and passed comliance.",
  "priority":100,
  "ruleGroup":"AFEXOnboarding",
  "daoKey":"localAccountDAO",
  "operation":3,
  "after":true,
  "predicate": {
    "class": "foam.mlang.predicate.And",
    "args": [
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BankAccountVerified"
      },
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BankAccountOwnerIsBusiness"
      }
    ]
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBankOnboardingRule"
  },
  "enabled":true,
  "saveHistory":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Onboard Business to AFEX",
  "documentation":"Rule to onboard business to AFEX if it has passed comliance and has a verified bank account.",
  "priority":100,
  "ruleGroup":"AFEXOnboarding",
  "daoKey":"localUserDAO",
  "operation":3,
  "after":true,
  "predicate": {
    "class": "foam.mlang.predicate.And",
    "args": [
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BusinessCompliancePassed"
      },
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BusinessHasVerifiedBankAccount"
      }
    ]
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBusinessOnboardingRule"
  },
  "enabled":true,
  "saveHistory":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Upload Business bank accounts to AFEX",
  "documentation":"Rule to upload business bank account information to AFEX",
  "priority":100,
  "ruleGroup":"AFEXOnboarding",
  "daoKey":"localUserDAO",
  "operation":3,
  "after":true,
  "predicate": {
    "class": "foam.mlang.predicate.And",
    "args": [
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BusinessCompliancePassed"
      },
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BusinessHasVerifiedBankAccount"
      }
    ]
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBankUploadingRule"
  },
  "enabled":false,
  "saveHistory":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Upload bank accounts to AFEX for existing AFEX business",
  "documentation":"Rule to upload new bank account for existing AFEX business",
  "priority":100,
  "ruleGroup":"AFEXOnboarding",
  "daoKey":"localAccountDAO",
  "operation":3,
  "after":true,
  "predicate": {
    "class": "foam.mlang.predicate.And",
    "args": [
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BankAccountVerified"
      },
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BankAccountOwnerIsBusiness"
      }
    ]
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBankUploadingRule2"
  },
  "enabled":false,
  "saveHistory":true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Add IN Currency Permission to Business",
  "documentation":"Rule to add IN currency and strategizer Permission when a business is pushed to AFEX and AFEXBusiness is created.",
  "priority":100,
  "ruleGroup":"onboarding",
  "daoKey":"afexBusinessDAO",
  "operation":3,
  "after":true,
  "predicate":{
    "class":"net.nanopay.fx.afex.AFEXBusinessCreatedPredicate",
  },
  "action":{
    "class":"net.nanopay.fx.AddINCurrencyPermissionRule"
  },
  "enabled":true,
  "saveHistory":true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"AFEX Create Trade Rule",
  "documentation":"Rule to create trade on AFEX system when transaction is PENDING_PARENT_COMPLETED and trade not yet created.",
  "priority":100,
  "ruleGroup":"AFEX",
  "daoKey":"localTransactionDAO",
  "operation":0,
  "after":true,
  "predicate":{
    "class":"net.nanopay.fx.afex.AFEXCreateTradePredicate",
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXCreateTradeRule"
  },
  "enabled":true,
  "saveHistory":true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"AFEX Submit Payment Rule",
  "documentation":"Rule to create submit payment to AFEX system when transaction is PENDING and reference number is null.",
  "priority":100,
  "ruleGroup":"AFEX",
  "daoKey":"localTransactionDAO",
  "operation":1,
  "after":true,
  "predicate":{
    "class":"net.nanopay.fx.afex.AFEXSubmitPaymentPredicate",
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXSubmitPaymentRule"
  },
  "enabled":true,
  "saveHistory":true
})