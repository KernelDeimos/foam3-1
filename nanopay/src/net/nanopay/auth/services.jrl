p({"class":"foam.nanos.boot.NSpec", "name":"resetPasswordToken",                "serve":true,  "authenticate": false, "serviceClass":"net.nanopay.auth.NanopayResetPasswordTokenService","boxClass":"foam.nanos.auth.token.TokenServiceSkeleton","client":"{\"class\":\"foam.nanos.auth.token.ClientTokenService\"}"})
p({
   "class": "foam.nanos.boot.NSpec",
   "name": "authenticationTokenService",
   "serve": true,
   "authenticate": false,
   "authNotes": "This service does not require authentication to access because we need users to be able to process the token (TokenService.processToken). However, when generating a token (TokenService.generateTokenWithParameters) 'service.run.authenticationToken' permission is required.",
   "service": {
     "class": "net.nanopay.auth.OneTimeAuthenticationTokenService",
     "expiryMs": 15000
   },
   "boxClass": "foam.nanos.auth.token.TokenServiceSkeleton",
   "client": """
      {"class": "foam.nanos.auth.token.ClientTokenService"}
   """
})
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "authenticationToken",
  "serve": false,
  "authenticate": true,
  "serviceClass": "net.nanopay.auth.AuthenticationTokenWebAgent"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localLoginAttemptDAO",
  "serve": false,
  "description": "A database to keep track of login attempts made by users.",
  "documentation":
  """
    When a user attempts a login, a LoginAttempt object is used to store its email, user id, and group. This
    dao stores all such objects. The login attempt object also has a date field to describe when the login was
    attempted so multiple such objects can safely refer to the same user.
  """,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.auth.LoginAttempt.getOwnClassInfo())
      .setSeqNo(true)
      .setPermissionPrefix("loginAttempts")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("loginAttempts")
      .setFixedSize(new foam.dao.FixedSizeDAO.Builder(x)
        .setComparator(foam.mlang.MLang.DESC(net.nanopay.auth.LoginAttempt.CREATED))
        .setSize(10000)
        .build())
      .setIndex(new foam.core.PropertyInfo[] {foam.nanos.auth.LoginAttempt.CREATED})
      .setRuler(false)
      .build()
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "loginAttemptDAO",
  "serve": true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.auth.LoginAttempt.getOwnClassInfo())
      .setInnerDAO(((foam.dao.DAO) x.get("localLoginAttemptDAO")))
      .setOrder(new foam.mlang.order.Comparator[] { new foam.mlang.order.Desc.Builder(x).setArg1(foam.nanos.auth.LoginAttempt.CREATED).build() })
      .setRuler(false)
      .build();
  """,
  "client": """
    {
      "of": "foam.nanos.auth.LoginAttempt"
    }
  """
})
