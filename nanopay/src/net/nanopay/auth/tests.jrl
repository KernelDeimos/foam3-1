p({"class":"net.nanopay.auth.PublicUserInfoDAOTest","id":"PublicUserInfoDAOTest"})
//p({"class":"net.nanopay.auth.ExternalInvoiceTokenTest","id":"ExternalInvoiceTokenTest"})
p({"class":"foam.nanos.test.Test","id":"Prevent privilege escalation tests for userUserDAO","code":"import foam.core.X;\u000aimport foam.dao.DAO;\u000aimport foam.nanos.auth.AuthorizationException;\u000aimport foam.nanos.auth.Group;\u000aimport foam.nanos.auth.GroupPermissionJunction;\u000aimport foam.nanos.auth.Permission;\u000aimport foam.nanos.auth.User;\u000aimport foam.util.Auth;\u000a\u000aimport java.util.ArrayList;\u000aimport java.util.List;\u000a\u000abareUserDAO = (DAO) x.get(\"bareUserDAO\");\u000auserDAO = (DAO) x.get(\"userUserDAO\");\u000agroupDAO = (DAO) x.get(\"groupDAO\");\u000apermissionDAO = (DAO) x.get(\"localPermissionDAO\");\u000agroupPermissionJunctionDAO = (DAO) x.get(\"localGroupPermissionJunctionDAO\");\u000a\u000aString generateId() {\u000a  return java.util.UUID.randomUUID().toString();\u000a}\u000a\u000a// Generate a test user and a group with the given permissions for them to be in.\u000aX generateTestUser(List permissionIds) {\u000a  String groupId = generateId();\u000a  group = new Group.Builder(x)\u000a    .setId(groupId)\u000a    .setParent(\"basicUser\")\u000a    .build();\u000a\u000a  groupDAO.where(foam.mlang.MLang.EQ(Group.ID, groupId)).removeAll();\u000a  groupDAO.put(group);\u000a\u000a  groupPermissionJunctionDAO.where(foam.mlang.MLang.EQ(GroupPermissionJunction.SOURCE_ID, groupId)).removeAll();\u000a\u000a  for ( String id : permissionIds ) {\u000a    permissionDAO.where(foam.mlang.MLang.EQ(Permission.ID, id)).removeAll();\u000a    permissionDAO.put(new Permission.Builder(x).setId(id).build());\u000a    junction = new GroupPermissionJunction.Builder(x)\u000a      .setSourceId(groupId)\u000a      .setTargetId(id)\u000a      .build();\u000a    groupPermissionJunctionDAO.put(junction);\u000a  }\u000a\u000a  // Create a test user to sudo to.\u000a  bareUserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, \"ppet@example.com\")).removeAll();\u000a  user = new User.Builder(x)\u000a    .setEmail(\"ppet@example.com\")\u000a    .setGroup(groupId)\u000a    .build();\u000a  user = bareUserDAO.put(user);\u000a  return Auth.sudo(x, user);\u000a}\u000a\u000avoid cleanUp(X testContext) {\u000a  Group g = testContext.get(\"group\");\u000a\u000a  // Remove the permissions.\u000a  groupPermissionJunctionDAO.where(foam.mlang.MLang.EQ(GroupPermissionJunction.SOURCE_ID, g.getId())).removeAll();\u000a\u000a  // Remove the group.\u000a  groupDAO.remove(g);\u000a\u000a  // Remove the user.\u000a  testUser = testContext.get(\"user\");\u000a  bareUserDAO.remove(testUser);\u000a}\u000a\u000a// Try to create a group when you don't have the 'create' permission.\u000avoid createGroupWithoutPermissionThrows() {\u000a  // Create a group for the user to put.\u000a  String groupId = generateId();\u000a  Group g = new Group.Builder(x).setId(groupId).build();\u000a\u000a  // Create a test user.\u000a  List permissionIds = new ArrayList();\u000a  X userContext = generateTestUser(permissionIds);\u000a\u000a  try {\u000a    // Try to create the group.\u000a    g = groupDAO.inX(userContext).put(g);\u000a\u000a    // If the put didn't throw, then this test failed.\u000a    test(false, \"Users cannot create a group without the 'group.create.<id>' permission.\");\u000a\u000a    // Clean up.\u000a    groupDAO.remove(g);\u000a  } catch (AuthorizationException e) {\u000a    test(e.getMessage().equals(\"You do not have permission to create this group.\"), \"Users cannot create a group without the 'group.create.<id>' permission.\");\u000a  }\u000a\u000a  cleanUp(userContext);\u000a}\u000a\u000a// Try to add a permission you don't have to a group.\u000avoid addNewPermissionThrows() {\u000a  // Create a group for the user to put.\u000a  String groupId = generateId();\u000a  Group g = new Group.Builder(x).setId(groupId).build();\u000a\u000a  // Create a test user.\u000a  List permissionIds = new ArrayList();\u000a  permissionIds.add(\"group.create.*\");\u000a  X userContext = generateTestUser(permissionIds);\u000a\u000a  // Create the group.\u000a  g = groupDAO.inX(userContext).put(g);\u000a\u000a  try {\u000a    // Try to add a permission to the group that the user doesn't have.\u000a    g.getPermissions(userContext).add(new Permission.Builder(userContext).setId(\"*\").build());\u000a\u000a    // If the put didn't throw, then this test failed.\u000a    test(false, \"Users cannot add a permission that they don't have to a group.\");\u000a\u000a    // Clean up.\u000a    groupDAO.remove(g);\u000a  } catch (AuthorizationException e) {\u000a    test(e.getMessage().equals(\"You do not have permission to update that group.\"), \"Users cannot add a permission that they don't have to a group.\");\u000a  }\u000a\u000a  cleanUp(userContext);\u000a}\u000a\u000a\u000a// Try to create a group with \"admin\" as the parent.\u000avoid addGroupWithAdminParentThrows() {\u000a  // Create a group for the user to put.\u000a  String groupId = generateId();\u000a  Group g = new Group.Builder(x)\u000a    .setId(groupId)\u000a    .setParent(\"admin\")\u000a    .build();\u000a\u000a  // Create a test user.\u000a  List permissionIds = new ArrayList();\u000a  permissionIds.add(\"group.create.*\");\u000a  X userContext = generateTestUser(permissionIds);\u000a\u000a  try {\u000a    // Try to create the group.\u000a    g = groupDAO.inX(userContext).put(g);\u000a\u000a    // If the put didn't throw, then this test failed.\u000a    test(false, \"Users cannot set the parent of a group to a group containing a permission that isn't implied by one they already have.\");\u000a\u000a    // Clean up.\u000a    groupDAO.remove(g);\u000a  } catch (AuthorizationException e) {\u000a    test(e.getMessage().equals(\"Permission denied. You cannot change the parent of a group if doing so grants that group permissions that you do not have.\"), \"Users cannot set the parent of a group to a group containing a permission that isn't implied by one they already have.\");\u000a  }\u000a\u000a  cleanUp(userContext);\u000a}\u000a\u000a\u000a// Try to update a group without permission.\u000avoid updateGroupWithoutPermissionThrows() {\u000a  // Create a group for the user to put.\u000a  String groupId = generateId();\u000a  Group g = new Group.Builder(x)\u000a    .setId(groupId)\u000a    .build();\u000a\u000a  // Create a test user.\u000a  List permissionIds = new ArrayList();\u000a  permissionIds.add(\"group.create.*\");\u000a  X userContext = generateTestUser(permissionIds);\u000a\u000a  // Create the group.\u000a  g = groupDAO.inX(userContext).put(g);\u000a\u000a  try {\u000a    // Try to update the group.\u000a    g = (Group) g.fclone();\u000a    g.setParent(\"basicUser\");\u000a    g = groupDAO.inX(userContext).put(g);\u000a\u000a    // If the put didn't throw, then this test failed.\u000a    test(false, \"Users cannot update groups unless they have the appropriate update permission.\");\u000a\u000a    // Clean up.\u000a    groupDAO.remove(g);\u000a  } catch (AuthorizationException e) {\u000a    test(e.getMessage().equals(\"You don't have permission to update that group.\"), \"Users cannot update groups unless they have the appropriate update permission.\");\u000a  }\u000a\u000a  cleanUp(userContext);\u000a}\u000a\u000a\u000a// Try to update a group's parent to admin.\u000avoid updateGroupParentToAdminThrows() {\u000a  // Create a group for the user to put.\u000a  String groupId = generateId();\u000a  Group g = new Group.Builder(x)\u000a    .setId(groupId)\u000a    .build();\u000a\u000a  // Create a test user.\u000a  List permissionIds = new ArrayList();\u000a  permissionIds.add(\"group.create.*\");\u000a  permissionIds.add(\"group.update.\" + groupId);\u000a  X userContext = generateTestUser(permissionIds);\u000a\u000a  // Create the group.\u000a  g = groupDAO.inX(userContext).put(g);\u000a\u000a  try {\u000a    // Try to update the group's parent to admin.\u000a    g = (Group) g.fclone();\u000a    g.setParent(\"admin\");\u000a    g = groupDAO.inX(userContext).put(g);\u000a\u000a    // If the put didn't throw, then this test failed.\u000a    test(false, \"Users cannot update the parent of a group to a group containing a permission that isn't implied by one they already have.\");\u000a\u000a    // Clean up.\u000a    groupDAO.remove(g);\u000a  } catch (AuthorizationException e) {\u000a    test(e.getMessage().equals(\"Permission denied. You cannot change the parent of a group if doing so grants that group permissions that you do not have.\"), \"Users cannot set the parent of a group to a group containing a permission that isn't implied by one they already have.\");\u000a  }\u000a\u000a  cleanUp(userContext);\u000a}\u000a\u000a// Try to create a user in the admin group.\u000avoid createUserInAdminGroupThrows() {\u000a  TEST_MESSAGE = \"Users cannot create users in a group to a group containing a permission that isn't implied by one they already have.\";\u000a\u000a  // Create a user for the test user to put.\u000a  User u = new User.Builder(x)\u000a    .setGroup(\"admin\")\u000a    .setEmail(\"ppet+admin@example.com\")\u000a    .setDesiredPassword(\"!@#$ppet1234\")\u000a    .build();\u000a\u000a  // Create a test user.\u000a  List permissionIds = new ArrayList();\u000a  X userContext = generateTestUser(permissionIds);\u000a\u000a  try {\u000a    // Try to create a user in the admin group.\u000a    u = (User) userDAO.inX(userContext).put(u);\u000a\u000a    print(u.getId());\u000a\u000a    // If the put didn't throw, then this test failed.\u000a    test(false, TEST_MESSAGE);\u000a\u000a    // Clean up.\u000a    bareUserDAO.remove(u);\u000a  } catch (AuthorizationException e) {\u000a    passed = e.getMessage().equals(\"You do not have permission to set that user's group to 'admin'.\");\u000a    test(passed, TEST_MESSAGE);\u000a    if ( ! passed ) {\u000a      print(\"Error message mismatch. Actual was: \" + e.getMessage());\u000a    }\u000a  }\u000a\u000a  test(null == bareUserDAO.find(foam.mlang.MLang.EQ(foam.nanos.auth.User.EMAIL, \"ppet+admin@example.com\")), \"User was not created with that email address.\");\u000a  cleanUp(userContext);\u000a}\u000a\u000a// Try to update a user's group to \"admin\".\u000aupdateUserGroupToAdminThrows() {\u000a  TEST_MESSAGE = \"Users cannot update another user's group to a group containing a permission that isn't implied by one they already have.\";\u000a\u000a  // Create a user for the test user to put.\u000a  User u = new User.Builder(x)\u000a    .setGroup(\"basicUser\")\u000a    .setEmail(\"ppet+admin@example.com\")\u000a    .setFirstName(\"ppet\")\u000a    .setLastName(\"ppet\")\u000a    .setDesiredPassword(\"!@#$ppet1234\")\u000a    .build();\u000a\u000a  // Create a test user.\u000a  List permissionIds = new ArrayList();\u000a  permissionIds.add(\"group.update.basicUser\");\u000a  permissionIds.add(\"user.update.*\");\u000a  X userContext = generateTestUser(permissionIds);\u000a\u000a  // Create a user in the basicUser group.\u000a  u = userDAO.inX(userContext).put(u);\u000a\u000a  try {\u000a    // Try to update the user's group to \"admin\".\u000a    u = (User) u.fclone();\u000a    u.setGroup(\"admin\");\u000a    u = userDAO.inX(userContext).put(u);\u000a\u000a    // If the put didn't throw, then this test failed.\u000a    test(false, TEST_MESSAGE);\u000a  } catch (AuthorizationException e) {\u000a    passed = e.getMessage().equals(\"You do not have permission to change that user's group to 'admin'.\");\u000a    test(passed, TEST_MESSAGE);\u000a    if ( ! passed ) {\u000a      print(\"Error message mismatch. Actual was: \" + e.getMessage());\u000a    }\u000a  }\u000a\u000a  // Clean up.\u000a  bareUserDAO.remove(u);\u000a  cleanUp(userContext);\u000a}\u000a\u000a// Try to update your own group.\u000aupdateOwnGroupThrows() {\u000a  TEST_MESSAGE = \"Users cannot update their own group.\";\u000a\u000a  // Create a test user.\u000a  List permissionIds = new ArrayList();\u000a  X userContext = generateTestUser(permissionIds);\u000a\u000a  try {\u000a    // Try to update the user's group to \"admin\".\u000a    u = (User) userContext.get(\"user\").fclone();\u000a    u.setGroup(\"admin\");\u000a    u = userDAO.inX(userContext).put(u);\u000a\u000a    // If the put didn't throw, then this test failed.\u000a    test(false, TEST_MESSAGE);\u000a  } catch (AuthorizationException e) {\u000a    passed = e.getMessage().equals(\"You cannot change your own group.\");\u000a    test(passed, TEST_MESSAGE);\u000a    if ( ! passed ) {\u000a      print(\"Error message mismatch. Actual was: \" + e.getMessage());\u000a    }\u000a  }\u000a\u000a  // Clean up.\u000a  cleanUp(userContext);\u000a}\u000a\u000a// Try to create a permission without permission to do so.\u000acreatePermissionWithoutPermissionThrows() {\u000a  TEST_MESSAGE = \"Cannot create permissions without the appropriate 'create' permission.\";\u000a\u000a  // Create a test user.\u000a  List permissionIds = new ArrayList();\u000a  X userContext = generateTestUser(permissionIds);\u000a\u000a  // Create a permission for the test user to put.\u000a  Permission p = new Permission.Builder(x)\u000a    .setId(\"ppet\")\u000a    .build();\u000a\u000a  try {\u000a    // Try to create a permission.\u000a    p = permissionDAO.inX(userContext).put(p);\u000a\u000a    // If the put didn't throw, then this test failed.\u000a    test(false, TEST_MESSAGE);\u000a\u000a    // Clean up.\u000a    permissionDAO.remove(p);\u000a  } catch (AuthorizationException e) {\u000a    passed = e.getMessage().equals(\"Permission denied.\");\u000a    test(passed, TEST_MESSAGE);\u000a    if ( ! passed ) {\u000a      print(\"Error message mismatch. Actual was: \" + e.getMessage());\u000a    }\u000a  }\u000a\u000a  // Clean up.\u000a  cleanUp(userContext);\u000a}\u000a\u000a\u000a// Try to update a permission without permission to do so.\u000aupdatePermissionWithoutPermissionThrows() {\u000a  TEST_MESSAGE = \"Cannot update permissions without the appropriate 'update' permission.\";\u000a\u000a  // Create a test user.\u000a  List permissionIds = new ArrayList();\u000a  permissionIds.add(\"permission.create\");\u000a  X userContext = generateTestUser(permissionIds);\u000a\u000a  // Create a permission for the test user to update.\u000a  Permission p = new Permission.Builder(x)\u000a    .setId(\"ppet\")\u000a    .build();\u000a\u000a  // Create the permission.\u000a  p = (Permission) permissionDAO.inX(userContext).put(p).fclone();\u000a\u000a  try {\u000a    // Try to update the permission.\u000a    p.setDescription(\"Updated\");\u000a    p = permissionDAO.inX(userContext).put(p);\u000a\u000a    // If the put didn't throw, then this test failed.\u000a    test(false, TEST_MESSAGE);\u000a  } catch (AuthorizationException e) {\u000a    passed = e.getMessage().equals(\"Permission denied.\");\u000a    test(passed, TEST_MESSAGE);\u000a    if ( ! passed ) {\u000a      print(\"Error message mismatch. Actual was: \" + e.getMessage());\u000a    }\u000a  }\u000a\u000a  // Clean up.\u000a  permissionDAO.remove(p);\u000a  cleanUp(userContext);\u000a}\u000a\u000a\u000a// Try to delete a permission without permission to do so.\u000adeletePermissionWithoutPermissionThrows() {\u000a  TEST_MESSAGE = \"Cannot delete permissions without the appropriate 'delete' permission.\";\u000a\u000a  // Create a test user.\u000a  List permissionIds = new ArrayList();\u000a  permissionIds.add(\"permission.create\");\u000a  X userContext = generateTestUser(permissionIds);\u000a\u000a  // Create a permission for the test user to update.\u000a  Permission p = new Permission.Builder(x)\u000a    .setId(\"ppet\")\u000a    .build();\u000a\u000a  // Create the permission.\u000a  p = (Permission) permissionDAO.inX(userContext).put(p).fclone();\u000a\u000a  try {\u000a    // Try to delete the permission.\u000a    permissionDAO.inX(userContext).remove(p);\u000a\u000a    // If the put didn't throw, then this test failed.\u000a    test(false, TEST_MESSAGE);\u000a  } catch (AuthorizationException e) {\u000a    passed = e.getMessage().equals(\"Permission denied.\");\u000a    test(passed, TEST_MESSAGE);\u000a    if ( ! passed ) {\u000a      print(\"Error message mismatch. Actual was: \" + e.getMessage());\u000a    }\u000a  }\u000a\u000a  // Clean up.\u000a  permissionDAO.remove(p);\u000a  cleanUp(userContext);\u000a}\u000a\u000a\u000a// Try to delete a group without permission to do so.\u000adeleteGroupWithoutPermissionThrows() {\u000a  TEST_MESSAGE = \"Cannot delete a group without the appropriate 'delete' permission.\";\u000a\u000a  // Create a test user.\u000a  List permissionIds = new ArrayList();\u000a  permissionIds.add(\"group.create.ppet\");\u000a  X userContext = generateTestUser(permissionIds);\u000a\u000a  // Create a permission for the test user to update.\u000a  Group g = new Group.Builder(x)\u000a    .setId(\"ppet\")\u000a    .build();\u000a\u000a  // Create the group.\u000a  g = (Group) groupDAO.inX(userContext).put(g).fclone();\u000a\u000a  try {\u000a    // Try to delete the group.\u000a    groupDAO.inX(userContext).remove(g);\u000a\u000a    // If the put didn't throw, then this test failed.\u000a    test(false, TEST_MESSAGE);\u000a  } catch (AuthorizationException e) {\u000a    passed = e.getMessage().equals(\"You don't have permission to delete that group.\");\u000a    test(passed, TEST_MESSAGE);\u000a    if ( ! passed ) {\u000a      print(\"Error message mismatch. Actual was: \" + e.getMessage());\u000a    }\u000a  }\u000a\u000a  // Clean up.\u000a  groupDAO.remove(g);\u000a  cleanUp(userContext);\u000a}\u000a\u000a\u000a// Try to remove a permission from a group without permission.\u000aremovePermissionFromGroupWithoutPermissionThrows() {\u000a  TEST_MESSAGE = \"Cannot remove permissions from groups without the appropriate permissions.\";\u000a\u000a  // Create a test user.\u000a  List permissionIds = new ArrayList();\u000a  X userContext = generateTestUser(permissionIds);\u000a\u000a  try {\u000a    // Try to remove \"*\" from \"admin\".\u000a    GroupPermissionJunction j = new GroupPermissionJunction.Builder(x)\u000a      .setSourceId(\"admin\")\u000a      .setTargetId(\"*\")\u000a      .build();\u000a    groupPermissionJunctionDAO.inX(userContext).remove(j);\u000a\u000a    // If the put didn't throw, then this test failed.\u000a    test(false, TEST_MESSAGE);\u000a  } catch (AuthorizationException e) {\u000a    passed = e.getMessage().equals(\"You do not have permission to update that group.\");\u000a    test(passed, TEST_MESSAGE);\u000a    if ( ! passed ) {\u000a      print(\"Error message mismatch. Actual was: \" + e.getMessage());\u000a    }\u000a  }\u000a\u000a  // Clean up.\u000a  cleanUp(userContext);\u000a\u000a  // Do it a second time but with permission to update the group this time, but\u000a  // not the permission we're trying to remove. You should need both.\u000a\u000a  // Create a test user.\u000a  permissionIds = new ArrayList();\u000a  permissionIds.add(\"group.update.admin\");\u000a  userContext = generateTestUser(permissionIds);\u000a\u000a  try {\u000a    // Try to remove \"*\" from \"admin\".\u000a    j = new GroupPermissionJunction.Builder(x)\u000a      .setSourceId(\"admin\")\u000a      .setTargetId(\"*\")\u000a      .build();\u000a    groupPermissionJunctionDAO.inX(userContext).remove(j);\u000a\u000a    // If the put didn't throw, then this test failed.\u000a    test(false, TEST_MESSAGE);\u000a  } catch (AuthorizationException e) {\u000a    passed = e.getMessage().equals(\"Permission denied. You cannot add or remove a permission that you do not have.\");\u000a    test(passed, TEST_MESSAGE);\u000a    if ( ! passed ) {\u000a      print(\"Error message mismatch. Actual was: \" + e.getMessage());\u000a    }\u000a  }\u000a\u000a  // Clean up.\u000a  cleanUp(userContext);\u000a}\u000a\u000a\u000a// Run the tests.\u000atry {\u000a  createGroupWithoutPermissionThrows();\u000a  addNewPermissionThrows();\u000a  addGroupWithAdminParentThrows();\u000a  updateGroupWithoutPermissionThrows();\u000a  updateGroupParentToAdminThrows();\u000a  createUserInAdminGroupThrows();\u000a  updateUserGroupToAdminThrows();\u000a  updateOwnGroupThrows();\u000a  createPermissionWithoutPermissionThrows();\u000a  updatePermissionWithoutPermissionThrows();\u000a  deletePermissionWithoutPermissionThrows();\u000a  deleteGroupWithoutPermissionThrows();\u000a  removePermissionFromGroupWithoutPermissionThrows();\u000a} catch (Throwable e) {\u000a  e.printStackTrace();\u000a  test(false, \"An unexpected exception was thrown. Some tests might not have been executed.\");\u000a}\u000a"})
