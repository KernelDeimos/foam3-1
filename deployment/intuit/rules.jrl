p({
  class: "net.nanopay.tx.fee.TransactionFeeRule",
  name:"Nanopay0.4PercentFee",
  id: "d2a9b4b5-3c84-4742-84cc-6bb11928ed82",
  feeAccount:"ab590614-f5bd-476a-84e0-6037607397b5",
  feeName:"Nanopay Transaction Fee",
  sourceCurrencyAsFeeDenomination: true,
  predicate:{
    "class":"foam.nanos.ruler.predicate.IsInstancePredicate",
    "of":"net.nanopay.tx.DigitalTransaction"
  },
  lifecycleState:1,
  spid: "intuit"
})

p({
  class: "net.nanopay.tx.fee.TransactionFeeRule",
  name:"Intuit0.6PercentFee",
  id: "b57ad1a4-d907-4d6a-adf2-bdf9e51fe905",
  feeAccount:"93f3fa36-7429-4b20-a223-f5b50a6d9872",
  feeName:"Intuit Transaction Fee",
  sourceCurrencyAsFeeDenomination: true,
  predicate:{
    "class":"foam.nanos.ruler.predicate.IsInstancePredicate",
    "of":"net.nanopay.tx.DigitalTransaction"
  },
  lifecycleState:1,
  spid: "intuit"
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d75",
  "name":"Create Default Digital Accounts",
  "priority":100,
  "ruleGroup":"CreateDefaultDigitalAccount",
  "documentation":"Creates a default digital account when a user is created.",
  "daoKey":"localUserDAO",
  "operation":0,
  "action":{
    "class":"net.nanopay.account.CreateDefaultDigitalAccountOnUserCreateRule",
    "trusts":["7951ef93-42d3-4896-a9ad-f3f0773f649d"]
  },
  "after":true,
  "enabled":true,
  "saveHistory":false,
  "lifecycleState":1,
  "spid": "intuit"
})
p({
  "class":"net.nanopay.ticket.Scenario",
  "id":"379c1084-ebec-4f3b-8627-964146c6f06b",
  "name":"RefundTicket - cancel CO on pending",
  "priority":100,
  "ruleGroup":"refundTickets",
  "documentation":"Scenario 4: user presses cancel on pending cashout",
  "daoKey":"localTicketDAO",
  "operation":3,
  "predicate":{
    "class":"foam.mlang.predicate.And",
    "args":[
      {
        "class": "foam.nanos.ruler.predicate.IsInstancePredicate",
        "of": "net.nanopay.ticket.RefundTicket"
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"refundStatus",
        "propValue": {
          "class": "net.nanopay.ticket.RefundStatus",
          "ordinal":0
        }
      },
      {
        "class":"net.nanopay.ticket.RefundTicketPropertyPredicate",
        "txnProperty":"status",
        "txnValue":
        {
          "class":"net.nanopay.tx.model.TransactionStatus",
          "ordinal":0
        }
      },
      {
        "class":"net.nanopay.ticket.RefundTicketInstanceOfPredicate",
        "instanceOf":"net.nanopay.tx.cico.COTransaction"
      }
    ]
  },
  "action":{
    "class":"net.nanopay.ticket.FullReverseScenarioAction",
    "textToAgent":"Payor has cancelled the transaction, status: pending. Nanopay will process the return",
    "creditAccount":"64307927-db83-43a7-9787-c5cc89becc11",
    "postApprovalRuleId": "b64905d0-289b-4371-92a5-f843e344109a",
    "autoApprove":false
  },
  "after":false,
  "enabled":true,
  "saveHistory":false,
  "lifecycleState":1,
  "spid": "intuit"
})

p({
  "class":"net.nanopay.ticket.Scenario",
  "id":"6bd4ba7d-c432-4391-9541-77760c851629",
  "name":"RefundTicket - cancel CI on pending",
  "priority":100,
  "ruleGroup":"refundTickets",
  "documentation":"Scenario 1: CashIn txn, status pending, sender needs to cancel",
  "daoKey":"localTicketDAO",
  "operation":3,
  "predicate":{
    "class":"foam.mlang.predicate.And",
    "args":[
      {
        "class": "foam.nanos.ruler.predicate.IsInstancePredicate",
        "of": "net.nanopay.ticket.RefundTicket"
      },
      { 
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"refundStatus",
        "propValue": {
          "class": "net.nanopay.ticket.RefundStatus",
          "ordinal":0
        }
      },
      {
        "class":"net.nanopay.ticket.RefundTicketPropertyPredicate",
        "txnProperty":"status",
        "txnValue":
        {
          "class":"net.nanopay.tx.model.TransactionStatus",
          "ordinal":0
        }
      },
      {
        "class":"net.nanopay.ticket.RefundTicketInstanceOfPredicate",
        "instanceOf":"net.nanopay.tx.cico.CITransaction"
      }
    ]
  },
  "action":{
    "class":"net.nanopay.ticket.AgentRefundTicketCreateRule",
    "textToAgent":"User has cancelled transaction. No action required",
    "postApprovalRuleId": "c6c5c0b8-a24d-4dc7-8561-57e206ed1b45",
    "autoApprove": true
  },
  "after":false,
  "enabled":true,
  "saveHistory":false,
  "lifecycleState":1,
  "spid": "intuit"
})

p({
  "class":"net.nanopay.ticket.Scenario",
  "id":"ed46c99d-cbe7-4863-8775-211b993030b3",
  "name":"RefundTicket - cancel CI on Sent",
  "priority":100,
  "ruleGroup":"refundTickets",
  "documentation":"Scenario 2: CashIn txn, status Sent. user clicks cancel",
  "daoKey":"localTicketDAO",
  "operation":3,
  "predicate":{
    "class":"foam.mlang.predicate.And",
    "args":[
      {
        "class": "foam.nanos.ruler.predicate.IsInstancePredicate",
        "of": "net.nanopay.ticket.RefundTicket"
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"refundStatus",
        "propValue": {
          "class": "net.nanopay.ticket.RefundStatus",
          "ordinal":0
        }
      },
      {
        "class":"net.nanopay.ticket.RefundTicketPropertyPredicate",
        "txnProperty":"status",
        "txnValue":
        {
          "class":"net.nanopay.tx.model.TransactionStatus",
          "ordinal":3
        }
      },
      {
        "class":"net.nanopay.ticket.RefundTicketInstanceOfPredicate",
        "instanceOf":"net.nanopay.tx.cico.CITransaction"
      }
    ]
  },
  "action":{
    "class":"net.nanopay.ticket.WaitingRefundTicketCreateRule",
    "textToAgent":"Waiting for transaction to enter interactable state.",
    "postApprovalRuleId": "waiting",
    "autoApprove":false
  },
  "after":false,
  "enabled":true,
  "saveHistory":false,
  "lifecycleState":1,
  "spid": "intuit"
})

p({
  "class":"net.nanopay.ticket.Scenario",
  "id":"88b99a28-50ae-4cde-a7dc-cbcc099de17d",
  "name":"RefundTicket - CI goes to Declined",
  "priority":100,
  "ruleGroup":"refundTickets",
  "documentation":"Scenario 3: CashIn txn is declined",
  "daoKey":"localTicketDAO",
  "operation":3,
  "predicate":{
    "class":"foam.mlang.predicate.And",
    "args":[
      {
        "class": "foam.nanos.ruler.predicate.IsInstancePredicate",
        "of": "net.nanopay.ticket.RefundTicket"
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"refundStatus",
        "propValue": {
          "class": "net.nanopay.ticket.RefundStatus",
          "ordinal":0
        }
      },
      {
        "class":"net.nanopay.ticket.RefundTicketPropertyPredicate",
        "txnProperty":"status",
        "txnValue":
        {
          "class":"net.nanopay.tx.model.TransactionStatus",
          "ordinal":4
        }
      },
      {
        "class":"net.nanopay.ticket.RefundTicketInstanceOfPredicate",
        "instanceOf":"net.nanopay.tx.cico.CITransaction"
      }
    ]
  },
  "action":{
    "class":"net.nanopay.ticket.AgentRefundTicketCreateRule",
    "textToAgent":"Cash In has failed. No action required. Merchant to create new payment request",
    "postApprovalRuleId": "c6c5c0b8-a24d-4dc7-8561-57e206ed1b45",
    "autoApprove": true
  },
  "after":false,
  "enabled":true,
  "saveHistory":false,
  "lifecycleState":1,
  "spid": "intuit"
})

p({
  "class":"net.nanopay.ticket.Scenario",
  "id":"77e68cc9-c7f4-4b97-a600-8cd24eead84d",
  "name":"RefundTicket - Cancel CO when Sent",
  "priority":100,
  "ruleGroup":"refundTickets",
  "documentation":"Scenario 5: Payor cancels CO while status sent",
  "daoKey":"localTicketDAO",
  "operation":3,
  "predicate":{
    "class":"foam.mlang.predicate.And",
    "args":[
      {
        "class": "foam.nanos.ruler.predicate.IsInstancePredicate",
        "of": "net.nanopay.ticket.RefundTicket"
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"refundStatus",
        "propValue": {
          "class": "net.nanopay.ticket.RefundStatus",
          "ordinal":0
        }
      },
      {
        "class":"net.nanopay.ticket.RefundTicketPropertyPredicate",
        "txnProperty":"status",
        "txnValue":
        {
          "class":"net.nanopay.tx.model.TransactionStatus",
          "ordinal":3
        }
      },
      {
        "class":"net.nanopay.ticket.RefundTicketInstanceOfPredicate",
        "instanceOf":"net.nanopay.tx.cico.COTransaction"
      }
    ]
  },
  "action":{
    "class":"net.nanopay.ticket.WaitingRefundTicketCreateRule",
    "textToAgent":"Waiting for transaction to enter interactable state.",
    "postApprovalRuleId": "waiting",
    "autoApprove":false
  },
  "after":false,
  "enabled":true,
  "saveHistory":false,
  "lifecycleState":1,
  "spid": "intuit"
})

p({
  "class":"net.nanopay.ticket.Scenario",
  "id":"224de998-1f08-4f92-b516-2cc7dca6c476",
  "name":"RefundTicket - CO on Declined",
  "priority":100,
  "ruleGroup":"refundTickets",
  "documentation":"Scenario 6: Cash out failed due to dest. acct error",
  "daoKey":"localTicketDAO",
  "operation":3,
  "predicate":{
    "class":"foam.mlang.predicate.And",
    "args":[
      {
        "class": "foam.nanos.ruler.predicate.IsInstancePredicate",
        "of": "net.nanopay.ticket.RefundTicket"
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"refundStatus",
        "propValue": {
          "class": "net.nanopay.ticket.RefundStatus",
          "ordinal":0
        }
      },
      {
        "class":"net.nanopay.ticket.RefundTicketPropertyPredicate",
        "txnProperty":"status",
        "txnValue":
        {
          "class":"net.nanopay.tx.model.TransactionStatus",
          "ordinal":4
        }
      },
      {
        "class":"net.nanopay.ticket.RefundTicketInstanceOfPredicate",
        "instanceOf":"net.nanopay.tx.cico.COTransaction"
      }
    ]
  },
  "action":{
    "class":"net.nanopay.ticket.FullReverseScenarioAction",
    "textToAgent":"Cash Out has failed",
    "postApprovalRuleId": "b64905d0-289b-4371-92a5-f843e344109a",
    "autoApprove":false
  },
  "after":false,
  "enabled":true,
  "saveHistory":false,
  "lifecycleState":1,
  "spid": "intuit"
})
