p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d6",
  "name":"AFEX Beneficiary Compliance Transaction",
  "priority":80,
  "ruleGroup":"AFEX",
  "documentation":"Check if AFEX Beneficiary is approved before proceeding with payment",
  "daoKey":"localTransactionDAO",
  "operation":3,
  "after":false,
  "predicate":{
    "class":"foam.mlang.predicate.And",
    "args":[
      {
        "class":"foam.nanos.ruler.predicate.IsInstancePredicate",
        "of":"net.nanopay.fx.afex.AFEXBeneficiaryComplianceTransaction"
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"status",
        "propValue":{"class":"net.nanopay.tx.model.TransactionStatus","ordinal":0}
      }
    ]
  },
  "action":{"class":"net.nanopay.fx.afex.AFEXComplianceTransactionRule"},
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d7","name":"Add FX Currency Permission to Business",
  "documentation":"Rule to add currency.read.FX_CURRENCY when a business is pushed to AFEX and AFEXBusiness is created.",
  "priority":100,
  "ruleGroup":"onboarding",
  "daoKey":"afexBusinessDAO",
  "operation":3,
  "after":true,
  "predicate":{
    "class":"net.nanopay.fx.afex.AFEXBusinessCreatedPredicate",
  },
  "action":{
    "class":"net.nanopay.fx.afex.AFEXAddCurrencyPermissionRule"
  },
  "enabled":false,
  "saveHistory":true,
  "lifecycleState":1
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"5d12a5bb-2952-44ed-a8eb-be3582de7ab1",
  "name":"Grant AFEX Payable Menu Capability",
  "documentation":"Grants AFEX Payable Menu Capability after Afex business is created and approved.",
  "priority":100,
  "ruleGroup":"onboarding",
  "daoKey":"approvalRequestDAO",
  "operation":1,
  "after":true,
  "predicate": {
    "class":"foam.mlang.predicate.And",
    "args":[
      {
        "class":"foam.nanos.ruler.predicate.IsInstancePredicate",
        "of":"net.nanopay.fx.afex.AFEXBusinessApprovalRequest"
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"status",
        "propValue":{
          "class":"foam.nanos.approval.ApprovalStatus",
          "ordinal":1
        }
      }
    ]
  },
  "action":{
    "class":"net.nanopay.fx.afex.AFEXPayableMenuCapabilityRule"
  },
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})
r({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d8","name":"Send Operations Email Notification When AFEXBusiness is Created",
})
r({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d9","name":"Send User Email Notification When AFEXBusiness is Created",
})
r({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d10","name":"Remove FX Currency Permission When AFEXBusiness is Disabled"
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d11","name":"Create AFEXBusiness Approval Request",
  "documentation":"Rule to create AFEXBusiness Approval Request.",
  "priority":100,
  "ruleGroup":"AFEXOnboarding",
  "daoKey":"afexBusinessDAO",
  "operation":0,
  "after":true,
  "predicate":{
    "class":"net.nanopay.fx.afex.AFEXBusinessCreatedPredicate",
  },
  "action":{
    "class":"net.nanopay.fx.afex.AFEXBusinessApprovalRequestRule"
  },
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d12","name":"Onboard Business Bank Account Owner to AFEX",
  "documentation":"Rule to onboard bank account owner to AFEX if it is a business and passed comliance.",
  "priority":100,
  "ruleGroup":"AFEXOnboarding",
  "daoKey":"localAccountDAO",
  "operation":3,
  "after":true,
  "predicate": {
    "class": "foam.mlang.predicate.And",
    "args": [
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BankAccountVerified"
      },
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BankAccountOwnerIsBusiness"
      }
    ]
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBankOnboardingRule"
  },
  "enabled":false,
  "saveHistory":true,
  "lifecycleState":1
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d13","name":"Onboard Business to AFEX",
  "documentation":"Rule to onboard business to AFEX if it has passed comliance and has a verified bank account.",
  "priority":100,
  "ruleGroup":"AFEXOnboarding",
  "daoKey":"localUserDAO",
  "operation":3,
  "after":true,
  "predicate": {
    "class": "foam.mlang.predicate.And",
    "args": [
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BusinessCompliancePassed"
      },
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BusinessHasVerifiedBankAccount"
      }
    ]
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBusinessOnboardingRule"
  },
  "enabled":false,
  "saveHistory":true,
  "lifecycleState":1
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d14","name":"Upload Business bank accounts to AFEX",
  "documentation":"Rule to upload business bank account information to AFEX",
  "priority":100,
  "ruleGroup":"AFEXOnboarding",
  "daoKey":"afexBusinessDAO",
  "operation":0,
  "after":true,
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBankUploadingRule"
  },
  "enabled":false,
  "saveHistory":true,
  "lifecycleState":1
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d15","name":"Upload bank accounts to AFEX for existing AFEX business",
  "documentation":"Rule to upload new bank account for existing AFEX business",
  "priority":100,
  "ruleGroup":"AFEXOnboarding",
  "daoKey":"localAccountDAO",
  "operation":3,
  "after":true,
  "predicate": {
    "class": "foam.mlang.predicate.And",
    "args": [
      {
        "class":"net.nanopay.tx.planner.predicate.IsAccountOwnerAFEXUserPredicate",
      },
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BankAccountVerified"
      },
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BankAccountOwnerIsBusiness"
      }
    ]
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBankUploadingRule2"
  },
  "enabled":false,
  "saveHistory":true,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d16","name":"Add IN Currency Permission to Business",
  "documentation":"Rule to add IN currency and strategizer Permission when a business is pushed to AFEX and AFEXBusiness is created.",
  "priority":100,
  "ruleGroup":"onboarding",
  "daoKey":"afexBusinessDAO",
  "operation":3,
  "after":true,
  "predicate":{
    "class":"net.nanopay.fx.afex.AFEXBusinessCreatedPredicate",
  },
  "action":{
    "class":"net.nanopay.fx.AddINCurrencyPermissionRule"
  },
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d17","name":"AFEX Create Trade Rule",
  "documentation":"Rule to create trade on AFEX system when transaction is PENDING_PARENT_COMPLETED and trade not yet created.",
  "priority":3000,
  "ruleGroup":"AFEX",
  "daoKey":"localTransactionDAO",
  "operation":0,
  "after":true,
  "predicate":{
    "class":"net.nanopay.fx.afex.AFEXCreateTradePredicate",
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXCreateTradeRule"
  },
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"9a36be15-7ac9-4044-9905-47e4788889b3",
  "name":"AFEX Get PDF Rule",
  "documentation":"Rule to get pdf confirmation from AFEX",
  "priority":10,
  "ruleGroup":"AFEX",
  "daoKey":"localTransactionDAO",
  "operation":0,
  "after":true,
  "predicate":{
    "class":"foam.mlang.predicate.And",
    "args":[
      {
        "class":"foam.nanos.ruler.predicate.IsInstancePredicate",
        "of":"net.nanopay.fx.afex.AFEXTransaction"
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyNEQValue",
        "propName":"afexTradeResponseNumber",
        "propValue":0
      },
      {
        "class": "foam.nanos.ruler.predicate.PropertyEQValue",
        "propName": "status",
        "propValue": {
          "class": "net.nanopay.tx.model.TransactionStatus",
          "ordinal":12
        }
     }
    ]
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXGetPDFRule"
  },
  "enabled":true,
  "saveHistory":false,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d18","name":"AFEX Submit Payment Rule",
  "documentation":"Rule to create submit payment to AFEX system when transaction is PENDING and reference number is null.",
  "priority":100,
  "ruleGroup":"AFEX",
  "daoKey":"localTransactionDAO",
  "operation":1,
  "after":true,
  "predicate":{
    "class":"net.nanopay.fx.afex.AFEXSubmitPaymentPredicate",
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXSubmitPaymentRule"
  },
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"c1419029-a8fe-136e-a29e-eef5c17e60cc",
  "name":"AFEX Push Beneficial Owner",
  "documentation":"Rule to push Business Beneficial Owner to AFEX after AFEX Business is created.",
  "priority":100,
  "ruleGroup":"AFEX",
  "daoKey":"afexBusinessDAO",
  "operation":0,
  "after":true,
  "predicate":{
    "class": "foam.nanos.ruler.predicate.PropertyNEQValue",
    "propName": "apiKey",
    "propValue": null
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBeneficialOwnerRule"
  },
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"c1419029-a8fe-136e-a29e-eef5c17e60co",
  "name":"AFEX Push Signing Officer",
  "documentation":"Rule to push Signing Officers to AFEX after AFEX Business is created.",
  "priority":100,
  "ruleGroup":"AFEX",
  "daoKey":"afexBusinessDAO",
  "operation":0,
  "after":true,
  "predicate":{
    "class": "foam.nanos.ruler.predicate.PropertyNEQValue",
    "propName": "apiKey",
    "propValue": null
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXSigningOfficerRule"
  },
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"efa95ab2-3555-3947-076b-35be8c1cccde",
  "name":"AFEX Push Business Directors",
  "documentation":"Rule to push Business Directors to AFEX after AFEX Business is created.",
  "priority":100,
  "ruleGroup":"AFEX",
  "daoKey":"afexBusinessDAO",
  "operation":0,
  "after":true,
  "predicate":{
    "class": "foam.nanos.ruler.predicate.PropertyNEQValue",
    "propName": "apiKey",
    "propValue": null
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBusinessDirectorRule"
  },
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"2e5854eb-26ac-4117-97ce-a816abdf2b95","name":"Update bank accounts to AFEX for existing AFEX business",
  "documentation":"Rule to update bank account for existing AFEX business",
  "priority":100,
  "ruleGroup":"AFEXOnboarding",
  "daoKey":"localAccountDAO",
  "operation":1,
  "after":true,
  "predicate": {
    "class": "foam.mlang.predicate.And",
    "args": [
      {
        "class":"net.nanopay.tx.planner.predicate.IsAccountOwnerAFEXUserPredicate",
      },
      {
        "class": "foam.nanos.ruler.predicate.PropertyEQValue",
        "propName": "status",
        "propValue": {
          "class": "net.nanopay.bank.BankAccountStatus",
          "ordinal":1
        }
      },
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BankAccountOwnerIsBusiness"
      },
      {
        "class":"foam.mlang.predicate.Not",
        "arg1":{
          "class": "net.nanopay.meter.compliance.ruler.predicate.BankAccountVerified"
        }
      }
    ]
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBankUpdatingRule"
  },
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"3dbf3174-ca06-11ea-87d0-0242ac130003","name":"afex invalid bank account rule",
  "documentation":"Rule to set Bank account to unverified if afex transaction failed",
  "priority":100,
  "ruleGroup":"AFEX",
  "daoKey":"localTransactionDAO",
  "operation":1,
  "after":true,
  "predicate": {
    "class":"foam.mlang.predicate.And",
    "args":[
      {
        "class":"foam.nanos.ruler.predicate.IsInstancePredicate",
        "of":"net.nanopay.fx.afex.AFEXTransaction"
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyNEQValue",
        "propName":"status",
        "propValue": {
          "class": "net.nanopay.tx.model.TransactionStatus",
          "ordinal":9
        },
        "isNew":false
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"status",
        "propValue": {
          "class": "net.nanopay.tx.model.TransactionStatus",
          "ordinal":9
        },
        "isNew":true
      }
    ]
  },
  "action":{
    "class":"net.nanopay.fx.afex.TransactionInvalidBankAccountRule"
  },
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"0bc85e00-1961-4fb8-ae74-6646ca1540fc","name":"create funding balance",
  "documentation":"Rule to create the funding balance for AFEX",
  "priority":30,
  "ruleGroup":"AFEX",
  "daoKey":"localTransactionDAO",
  "operation":3,
  "after":true,
  "predicate": {
    "class":"foam.mlang.predicate.And",
    "args":[
      {
        "class":"foam.nanos.ruler.predicate.IsInstancePredicate",
        "of":"net.nanopay.fx.afex.AFEXFundingTransaction"
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"status",
        "propValue": {
          "class": "net.nanopay.tx.model.TransactionStatus",
          "ordinal":0
        }
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"fundingBalanceInitiated",
        "propValue": false
      }
    ]
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXCreateFundingBalancesRule"
  },
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"62ef7828-9ffc-4601-b20f-277dd1688d5e","name":"create funding transaction 2",
  "documentation":"Rule to create the funding transaction for AFEX",
  "priority":90,
  "ruleGroup":"AFEX",
  "daoKey":"localTransactionDAO",
  "operation":3,
  "after":true,
  "predicate": {
    "class":"foam.mlang.predicate.And",
    "args":[
      {
        "class":"foam.nanos.ruler.predicate.IsInstancePredicate",
        "of":"net.nanopay.fx.afex.AFEXFundingTransaction"
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"status",
        "propValue": {
          "class": "net.nanopay.tx.model.TransactionStatus",
          "ordinal":3
        }
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"referenceNumber",
        "propValue": ""
      }
    ]
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXSubmitFundingTxnRule"
  },
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})
