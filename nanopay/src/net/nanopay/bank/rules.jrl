p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d19","name":"Set default bank account if account owner has none in denomination.",
  "priority":100,
  "ruleGroup":"bankOperations",
  "documentation":"Set newly verified bank account to default if owner has no default bank accounts in the verified bank accounts denomination.",
  "daoKey":"localAccountDAO",
  "operation":3,
  "predicate": {
    "class":"foam.mlang.predicate.Eq",
    "arg1":{
      "class":"foam.mlang.expr.Dot",
      "arg1":{
        "class":"foam.mlang.ContextObject",
        "key":"NEW"
      },
      "arg2":{
        "class":"__Property__",
        "forClass_":"net.nanopay.bank.BankAccount",
        "name":"status"
      }
    },
    "arg2":{
      "class":"foam.mlang.Constant",
      "value":{
        "class":"net.nanopay.bank.BankAccountStatus",
        "ordinal":1
      }
    }
  },
  "action":{
    "class":"net.nanopay.bank.DefaultBankAccountRule"
  },
  "enabled":true,
  "saveHistory":false,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d20","name":"Set old default bank account to false.",
  "priority":100,
  "ruleGroup":"bankOperations",
  "documentation":"Rule prevents users from setting default on non verified bank accounts as well as setting old default account to false if isDefault is being set to true on obj.",
  "daoKey":"localAccountDAO",
  "operation":3,
  "predicate": {
    "class":"foam.mlang.predicate.Eq",
    "arg1":{
      "class":"foam.mlang.expr.Dot",
      "arg1":{
        "class":"foam.mlang.ContextObject",
        "key":"NEW"
      },
      "arg2":{
        "class":"__Property__",
        "forClass_":"net.nanopay.bank.BankAccount",
        "name":"isDefault"
      }
    },
    "arg2":{
      "class":"foam.mlang.Constant",
      "value":true
    }
  },
  "action":{
    "class":"net.nanopay.bank.IsDefaultRule"
  },
  "enabled":true,
  "saveHistory":false,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d21","name":"Send notification when bank account has been verified.",
  "priority":100,
  "ruleGroup":"bankOperations",
  "documentation":"Sends a notification to account owner detailing that their bank account has been verified.",
  "daoKey":"localAccountDAO",
  "operation":3,
  "predicate":{
    "class":"foam.mlang.predicate.And",
    "args": [
      {
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"status",
        "propValue": {
          "class": "net.nanopay.bank.BankAccountStatus",
          "ordinal":1
        }
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyNEQValue",
        "propName":"status",
        "isNew":false,
        "propValue": {
          "class": "net.nanopay.bank.BankAccountStatus",
          "ordinal":1
        }
      }
    ]
  },
  "action":{
    "class":"net.nanopay.bank.ruler.AccountVerifiedNotificationRule"
  },
  "enabled":true,
  "after":true,
  "saveHistory":false,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d22","name": "Send notification to account owner when account has been deleted.",
  "priority": 100,
  "ruleGroup": "bankOperations",
  "documentation": "Send notification to account owner when account has been deleted.",
  "daoKey": "localAccountDAO",
  "operation": 2,
  "after":true,
  "predicate": {
    "class":"foam.nanos.ruler.predicate.PropertyNEQValue",
    "propName":"deleted",
    "propValue":true,
    "isNew":false
  },
  "action": {
    "class": "net.nanopay.bank.ruler.AccountDeletedNotificationRule"
  },
  "enabled":true,
  "saveHistory":false,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d23","name": "Send notification to account owner when account has been added.",
  "priority": 100,
  "ruleGroup": "bankOperations",
  "documentation": "Send notification to account owner when account has been added.",
  "daoKey": "localAccountDAO",
  "operation": 0,
  "action": {
    "class": "net.nanopay.bank.ruler.AccountAddedNotificationRule"
  },
  "enabled":true,
  "after":true,
  "saveHistory":false,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"9c65ddf4-d1b3-11ea-87d0-0242ac130003",
  "name": "corridor Authorization rule",
  "priority": 100,
  "ruleGroup": "bankOperations",
  "documentation": "throw AuthorizationException if user missing correct PaymentProviderCorridor",
  "daoKey": "localAccountDAO",
  "operation": 3,
  "action": {
    "class": "net.nanopay.bank.ruler.CorridorAuthorizationRule"
  },
  "enabled":true,
  "saveHistory":false,
  "lifecycleState":1
})

p({
  "class": "foam.nanos.ruler.Rule",
  "id": "E7E91F22-6806-4601-A942-E6999DC435F1-0",
  "name": "SWIFT/BIC Code to Bank Routing Code Translation On BankAccount Create",
  "documentation": "Translate SWIFT/BIC code to bank routing code on create for non-EUR bank account.",
  "priority": 100,
  "ruleGroup": "bankOperations",
  "daoKey": "localAccountDAO",
  "operation": 0,
  "predicate": {
    "class": "foam.mlang.predicate.MQLExpr",
    "query": "n(instanceof net.nanopay.bank.BankAccount) AND n(-denomination=EUR) AND n(has:swiftCode)"
  },
  "action": {
    "class": "net.nanopay.bank.ruler.SwiftCodeToBankRoutingCodeTranslation"
  },
  "enabled": true,
  "saveHistory": true,
  "lifecycleState": 1
})

p({
  "class": "foam.nanos.ruler.Rule",
  "id": "E7E91F22-6806-4601-A942-E6999DC435F1-1",
  "name": "SWIFT/BIC Code to Bank Routing Code Translation On BankAccount Update",
  "documentation": "Translate SWIFT/BIC code to bank routing code on update for non-EUR bank account.",
  "priority": 100,
  "ruleGroup": "bankOperations",
  "daoKey": "localAccountDAO",
  "operation": 1,
  "predicate": {
    "class": "foam.mlang.predicate.MQLExpr",
    "query": "n(instanceof net.nanopay.bank.BankAccount) AND n(-denomination=EUR) AND diff:swiftCode"
  },
  "action": {
    "class": "net.nanopay.bank.ruler.SwiftCodeToBankRoutingCodeTranslation"
  },
  "enabled": true,
  "saveHistory": true,
  "lifecycleState": 1
})

p({
  "class": "foam.nanos.ruler.Rule",
  "id": "B00ACCAB-92DC-4623-B1ED-7302F7676F8C-0",
  "name": "IBAN to SWIFT/BIC Code Translation On BankAccount Create",
  "priority": 90,
  "ruleGroup": "bankOperations",
  "daoKey": "localAccountDAO",
  "operation": 0,
  "predicate": {
    "class": "foam.mlang.predicate.MQLExpr",
    "query": "n(instanceof net.nanopay.bank.BankAccount) AND n(denomination=EUR) AND n(has:iban) AND n(-has:swiftCode)"
  },
  "action": {
    "class": "net.nanopay.bank.ruler.IbanToSwiftCodeTranslation"
  },
  "enabled": true,
  "saveHistory": true,
  "lifecycleState": 1
})

p({
  "class": "foam.nanos.ruler.Rule",
  "id": "B00ACCAB-92DC-4623-B1ED-7302F7676F8C-1",
  "name": "IBAN to SWIFT/BIC Code Translation On BankAccount Update",
  "priority": 90,
  "ruleGroup": "bankOperations",
  "daoKey": "localAccountDAO",
  "operation": 1,
  "predicate": {
    "class": "foam.mlang.predicate.MQLExpr",
    "query": "n(instanceof net.nanopay.bank.BankAccount) AND n(denomination=EUR) AND diff:iban"
  },
  "action": {
    "class": "net.nanopay.bank.ruler.IbanToSwiftCodeTranslation"
  },
  "enabled": true,
  "saveHistory": true,
  "lifecycleState": 1
})

p({
  "class": "foam.nanos.ruler.Rule",
  "id": "5F700B57-D183-4CB2-B0AA-799606F7524E-0",
  "name": "Bank Info to IBAN and SWIFT/BIC Translation On BankAccount Create",
  "documentation": "Translate EUR bank info to Iban and SWIFT/BIC on create.",
  "priority": 80,
  "ruleGroup": "bankOperations",
  "daoKey": "localAccountDAO",
  "operation": 0,
  "predicate": {
    "class": "foam.mlang.predicate.MQLExpr",
    "query": "n(instanceof net.nanopay.bank.BankAccount) AND n(denomination=EUR) AND n(-has:iban)"
  },
  "action": {
    "class": "net.nanopay.bank.ruler.BankInfoToIbanAndSwiftCodeTranslation"
  },
  "enabled": true,
  "saveHistory": true,
  "lifecycleState": 1
})

p({
  "class": "foam.nanos.ruler.Rule",
  "id": "5F700B57-D183-4CB2-B0AA-799606F7524E-1",
  "name": "IBAN to SWIFT/BIC Code Translation On BankAccount Update",
  "documentation": "Translate EUR bank info to Iban and SWIFT/BIC on update.",
  "priority": 80,
  "ruleGroup": "bankOperations",
  "daoKey": "localAccountDAO",
  "operation": 1,
  "predicate": {
    "class": "foam.mlang.predicate.MQLExpr",
    "query": "n(instanceof net.nanopay.bank.BankAccount) AND n(denomination=EUR) AND diff:institution,branch,accountNumber,swiftCode"
  },
  "action": {
    "class": "net.nanopay.bank.ruler.BankInfoToIbanAndSwiftCodeTranslation"
  },
  "enabled": true,
  "saveHistory": true,
  "lifecycleState": 1
})
