/**
 * @license
 * Copyright 2019 The FOAM Authors. All Rights Reserved.
 * http://www.apache.org/licenses/LICENSE-2.0
 */

foam.CLASS({
  package: 'net.nanopay.liquidity.crunch',
  name: 'LiquidCapability',
  extends: 'foam.nanos.crunch.Capability',

  properties: [
    {
      name: 'id',
      class: 'String',
      updateMode: 'RO'
    }, 
    {
      name: 'of',
      javaFactory: ` return net.nanopay.liquidity.crunch.AccountTemplate.getOwnClassInfo(); `,
      hidden: true,
      documentation: `
      Class of the information stored in data field of UserCapabilityJunctions, if there is any.
      In this case, it is always a list of Longs representing accountIds, and we should restrict users from accessing this property
      `
    },
    // BELOW THIS ARE PROPERTIES NOT REALLY NEEDED IN LIQUIDCAPABILITY
    // WE SHOULD RESTRICT USERS FROM ACCESSING THESE PROPERTIES 
    {
      name: 'permissionsGranted',
      hidden: true,
    },
    {
      name: 'icon',
      hidden: true,
    },
    {
      name: 'version',
      hidden: true,
    },
    {
      name: 'enabled',
      hidden: true,
    },
    {
      name: 'visible',
      hidden: true,
    },
    {
      name: 'expiry',
      hidden: true,
    },
    {
      name: 'duration',
      hidden: true,
    },
    {
      name: 'daoKey',
      hidden: true,
    },
  ],


  methods: [
    {
      name: 'implies',
      documentation: `
      This method takes a permission string received from CapabilityAuthService in the format "className.operation.objId"
      and checks if this capability "implies" the permission by generating the maker/viewer/approver propertyName on based on the 
      operation and the className, and seeing if the value is set to true.
      `,
      javaCode: `
        // note to me
        // the permission string generated by standardauthorizer should look something like : 
        // account.read.1040
        // the object id should be disregarded since we are not checking ucj

        // dissect the permission string
        String[] permissionComponents = permission.split(".");
        if ( permissionComponents.length != 3 ) {
          throw new RuntimeException("Invalid permission string");
        }
        String className = permissionComponents[0];
        String operation = permissionComponents[1];

        // assuming : viewers and approver can ONLY read the operation, while maker can do all crud operations

        // if the classMaker box is checked as "true", it implies all crud operation
        Boolean isMaker = (Boolean) getProperty(className + "Maker");
        if ( isMaker ) return true;
        // if classMaker is not true, then only read permisssion is possible, if classApprover or classViewer is true
        if ( "read".equals(operation) ) {
          Boolean isViewer = (Boolean) getProperty(className + "Viewer");
          Boolean isApprover = (Boolean) getProperty(className + "Approver");
          return isViewer || isApprover;
        }

        return false;
      `
    },
  ]
});


foam.CLASS({
  package: 'net.nanopay.liquidity.crunch',
  name: 'AccountBasedLiquidCapability',
  extends: 'net.nanopay.liquidity.crunch.LiquidCapability',

  properties: [
    { class: 'Boolean', name: 'accountViewer' },
    { class: 'Boolean', name: 'accountMaker' },
    { class: 'Boolean', name: 'accountApprover' },
    { class: 'Boolean', name: 'transactionViewer' },
    { class: 'Boolean', name: 'transactionMaker' },
    { class: 'Boolean', name: 'transactionApprover' },
    { class: 'Boolean', name: 'usercapabilityjunctionMaker' }, // global role vs. account role maker/approver may be implied by whether there
    { class: 'Boolean', name: 'usercapabilityjunctionApprover' }, //
  ]
});


foam.CLASS({
  package: 'net.nanopay.liquidity.crunch',
  name: 'GlobalLiquidCapability',
  extends: 'net.nanopay.liquidity.crunch.LiquidCapability',

  properties: [
    { class: 'Boolean', name: 'ruleViewer' },
    { class: 'Boolean', name: 'ruleMaker' },
    { class: 'Boolean', name: 'ruleApprover' },
    { class: 'Boolean', name: 'userViewer' },
    { class: 'Boolean', name: 'userMaker' },
    { class: 'Boolean', name: 'userApprover' },
    { class: 'Boolean', name: 'liquiditysettingViewer' },
    { class: 'Boolean', name: 'liquiditysettingMaker' },
    { class: 'Boolean', name: 'liquiditysettingApprover' },
    { class: 'Boolean', name: 'capabilityViewer' },
    { class: 'Boolean', name: 'capabilityMaker' },
    { class: 'Boolean', name: 'capabilityApprover' },
    { class: 'Boolean', name: 'usercapabilityjunctionMaker' }, // global role vs. account role maker/approver may be implied by whether there
    { class: 'Boolean', name: 'usercapabilityjunctionApprover' }, //
  ]
});


