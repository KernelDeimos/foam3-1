p({"class":"foam.nanos.test.Test","passed":4,"failed":0,"id":"net.nanopay.bank.BankAccountInstitutionDAOTest","enabled":true,"description":"","lastRun":"2018-07-25T22:37:13.524Z","lastDuration":32,"server":true,"status":1,"code":"institutionNumber = \"net.nanopay.bank.BankAccountInstitutionTest\";\nd = (foam.dao.DAO) x.get(\"institutionDAO\");\nd = d.limit(1);\nd = d.where(\n  foam.mlang.MLang.EQ(net.nanopay.payment.Institution.INSTITUTION_NUMBER, institutionNumber)\n);\nl = ((foam.dao.ArraySink) d.select(new foam.dao.ArraySink())).getArray();\nif ( l.size() == 1 ) {\n  d.remove(l.get(0));\n};\n\nu = (foam.nanos.auth.User) x.get(\"user\");\nb = new net.nanopay.bank.CADBankAccount();\nb.setName(\"test\");\nb.setOwner(u.getId());\nb.setInstitution(institutionNumber);\nb.setAccountNumber(\"TEST1234\");\n\ntest(b.findInstitution(x) == null, \"institution should not exist\");\n\nb = ((foam.dao.DAO) x.get(\"localAccountDAO\")).put(b);\ntest( ! String.valueOf(b.getInstitution()).equals(institutionNumber), \"institution reference should not equal number\"); l = ((foam.dao.ArraySink) d.select(new foam.dao.ArraySink())).getArray();\nlist = ((foam.dao.ArraySink) d.select(new foam.dao.ArraySink())).getArray();\ntest( list.size() == 1, \"institution created\");\ni = list.get(0);\ntest( i.getInstitutionNumber().equals(institutionNumber), \"matching institutionNumber\");\n","output":"SUCCESS: institution should not exist\nSUCCESS: institution reference should not equal number\nSUCCESS: institution created\nSUCCESS: matching institutionNumber\n","notes":""})
