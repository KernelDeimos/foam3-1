<title>Getting Started With FX Service(Exchange Rate Service)</title>

<h2>Introduction</h2>

<p>FX Service(Exchange Rate Service) provides exchange rate service for multiple currency combinations. FX Service typically gets exchange rates from different FX providers depending on your use case. There are currently two FX providers available for now; Nanopay FX Provider and AscendantFX. The Nanopay FX Provider retrieves rates from our ExchangeRateDAO which is updated by a cron. The Cron fetches rates from http://api.exchangeratesapi.io/ using CAD as the base Currency. So technically Nanopay FX Provider can only exchange rate from CAD to any other supported currencies at the moment. AscendantFX provides exchange rate from multiple currency and also provides payment services between bank accounts.</p>

<h4>Architecture</h4>

<h4>FXService Interface</h4>
FXService currently has two methods;

<h5>GetFXRate</h5>
<p>GetFXRate simply returns exchange rate for the given currency pair. GetFXRate takes the following parameter;</p>

<ul>
<li>Source Currency</li>
<li>Target Currency</li>
<li>Source Amount</li>
<li>FX Direction(Buy/Sell)</li>
<li>Value Date (Optional)</li>
<li>User: This is user requesting the quotes.</li>
<li>FX Provider (Optional) </li>
</ul>

<h5>AcceptFXRate</h5>
<p>AcceptFXRate simply books and reserves the FX Quote. AcceptFXRate takes the following parameter;</p>

<ul>
<li>Quote Id</li>
<li>User: This is user requesting the quotes.</li>
</ul>


<h4>PaymentService Interface</h4>
<p>FX Providers like AscendantFX also provide payment services.</p>

<h5>SubmitPayment</h5>
<p>SubmitPayment simply submits a deal/payment to a payment provider. Only AscendantFX is currently supported. SubmitPayment takes the following parameter;</p>

<ul>
<li>Transaction</li>
</ul>


<h4>Usage</h4>
<p>FX Service can be used either independently or via Transaction Plans.</p>

<h4>Transaction Plans</h4>
<p>To use FX Service with Transaction Plans, follow these steps;</p>

<ul>
<li>Configure your currency pair in /fx/currencyfxservices. See example: <code>p({"class":"net.nanopay.fx.CurrencyFXService","id":4,"sourceCurrency":"CAD","destCurrency":"USD","nSpecId":"ascendantFXService","spId":""})
</code></li>
<li>Create your transaction and submit to Transaction Quotes DAO. If well configured the appropriate FX Service provider would handle the transaction, get the required FX quotes and creates a plan.</li>
<li>Submit returned planned transaction to Transaction DAO.</li>
</ul>

<code>
TransactionQuote quote = new TransactionQuote.Builder(x_).build();
Transaction transaction = new Transaction.Builder(x_).build();
transaction.setPayerId(1002);
transaction.setPayeeId(payee_.getId());
transaction.setAmount(100l);
transaction.setSourceCurrency("CAD");
transaction.setDestinationCurrency("USD");
quote.setRequestTransaction(transaction);
TransactionQuote resultQoute = (TransactionQuote) ((DAO) x_.get("localTransactionPlannerDAO")).put_(x_, quote);
Transaction t2 = (Transaction) ((DAO) x_.get("localTransactionDAO")).put_(x_, resultQoute.getPlan().getTransaction());
</code>


<h4>Independently</h4>
<p>To use FX Service independently, follow these steps;</p>

<code>
FXService fxService = (FXService) x.get("localFXService");
FXQuote fxQuote = fxService.getFXRate("USD", "CAD", 100.0, "Buy", null, user.getId(), null);
Boolean fxAccepted = fxService.acceptFXRate(String.valueOf(fxQuote.getId()), user.getId());
</code>

<p>To submit an FX payment independently;</p>

<code>
AscendantFX ascendantFX = (AscendantFX) x.get("ascendantFX");
PaymentService ascendantPaymentService = new AscendantFXServiceProvider(x, ascendantFX);
ascendantPaymentService.submitPayment(transaction);
</code>

<h4>Use in View</h4>
An AscendantFX plan DAO would handle to below code and apply the necessary FX rates, if the currency pair is well configured.
<code>
this.quote = self.transactionQuotePlanDAO.put(
  self.TransactionQuote.create({
    requestTransaction: transaction
  })
);
</code>
