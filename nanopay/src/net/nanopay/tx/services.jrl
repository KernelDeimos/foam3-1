p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localTransactionQuotePlanDAO",
  "lazy":false,
  "serviceScript":
  """
    nd = new foam.dao.NullDAO.Builder(x)
      .setOf(net.nanopay.tx.TransactionQuote.getOwnClassInfo())
      .build();
    rd = new foam.nanos.ruler.RulerDAO(x, nd, "localTransactionQuotePlanDAO");
    stpd = new net.nanopay.tx.SplitTransactionPlanDAO.Builder(x)
      .setDelegate(rd)
      .build();
    kftp = new net.nanopay.tx.KotakFxTransactionPlanDAO.Builder(x)
      .setDelegate(stpd)
      .build();
    kstp = new net.nanopay.tx.KotakSplitTransactionPlanDAO.Builder(x)
      .setDelegate(kftp)
      .build();
    ktpd = new net.nanopay.tx.KotakTransactionPlanDAO.Builder(x)
      .setDelegate(kstp)
      .build();
    nlifd = new net.nanopay.tx.NanopayLineItemFeeDAO.Builder(x)
      .setDelegate(ktpd)
      .build();
    nlitd = new net.nanopay.tx.NanopayLineItemTaxDAO.Builder(x)
      .setDelegate(nlifd)
      .build();
    atpd = new net.nanopay.tx.alterna.AlternaTransactionPlanDAO.Builder(x)
      .setEnabled(false)
      .setDelegate(nlitd)
      .build();
    bmopd = new net.nanopay.tx.bmo.BmoTransactionPlanDAO.Builder(x)
      .setEnabled(true)
      .setDelegate(atpd)
      .build();
    afextpd = new net.nanopay.fx.afex.AFEXTransactionPlanDAO.Builder(x)
      .setEnabled(true)
      .setDelegate(bmopd)
      .build();
    afxtpd = new net.nanopay.fx.ascendantfx.AscendantFXTransactionPlanDAO.Builder(x)
      .setEnabled(true)
      .setDelegate(afextpd)
      .build();
    nfxtpd = new net.nanopay.tx.NanopayFXTransactionPlanDAO.Builder(x)
      .setDelegate(afxtpd)
      .build();
    cpd = new net.nanopay.tx.CompliancePlanDAO.Builder(x)
      .setDelegate(nfxtpd)
      .build();
    tqd = new net.nanopay.tx.TransactionQuoteDAO.Builder(x)
      .setDelegate(cpd)
      .build();
    dtpd = new net.nanopay.tx.DigitalTransactionPlanDAO(x, tqd);
    rtpd = new net.nanopay.tx.RetailTransactionPlanDAO(x, dtpd);
    atd = new net.nanopay.tx.AbliiTransactionDAO.Builder(x)
      .setDelegate(rtpd)
      .build();
    dpd = new net.nanopay.tx.DebtablePlanDAO.Builder(x)
      .setDelegate(atd)
      .build();
    vd = new foam.dao.ValidatingDAO(x, dpd, new net.nanopay.tx.RequestTransactionValidator());
    ltpd = new net.nanopay.tx.LoanTransactionPlanDAO(x,vd);
    drpd = new net.nanopay.tx.DebtRepaymentPlanDAO.Builder(x)
      .setDelegate(ltpd)
      .build();
    payeetd = new net.nanopay.tx.PayeeTransactionDAO.Builder(x)
      .setDelegate(drpd)
      .build();
    payertd = new net.nanopay.tx.PayerTransactionDAO.Builder(x)
      .setDelegate(payeetd)
      .build();
    bulk = new net.nanopay.tx.BulkTransactionPlanDAO.Builder(x)
      .setDelegate(payertd)
      .build();
    return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, bulk));
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"transactionQuotePlanDAO",          "lazy":false,  "serve":true,  "serviceScript":"return x.get(\"localTransactionQuotePlanDAO\");","client":"{\"of\":\"net.nanopay.tx.TransactionQuote\"}"})

p({
  "class":"foam.nanos.boot.NSpec", "name":"localTransactionDAO",              "lazy":false,  "serviceScript":
  """
    import net.nanopay.tx.model.Transaction;
    import foam.dao.MDAO;
    import foam.dao.DAO;
    import foam.nanos.analytics.DAOFoldManager;
    import foam.nanos.analytics.FoldManagerDAODecorator;
    import foam.nanos.auth.DeletedAwareDAO;
    import foam.nanos.ruler.RulerDAO;
    import net.nanopay.tx.stripe.StripeTransactionDAO;
    import net.nanopay.tx.UpdateInvoiceTransactionDAO;
    import net.nanopay.tx.ExecuteMethodsTransactionDAO;
    import net.nanopay.tx.CheckQuotedTransactionDAO;
    import net.nanopay.tx.CompletedTransactionDAO;
    import net.nanopay.tx.realex.RealexTransactionDAO;
    import net.nanopay.tx.TransactionDAO;
    import net.nanopay.security.HashingJDAO;
    import net.nanopay.security.RandomNonceDAO;
    import net.nanopay.fx.afex.AFEXTransactionDAO;
    import net.nanopay.fx.ascendantfx.AscendantFXTransactionDAO;
    MDAO transactionMDao = new MDAO(Transaction.getOwnClassInfo());
    transactionMDao.addIndex(new foam.core.PropertyInfo[] {Transaction.CREATED});
    transactionMDao.addIndex(new foam.core.PropertyInfo[] {Transaction.STATUS});
    transactionMDao.addIndex(new foam.core.PropertyInfo[] {Transaction.TYPE});
    transactionMDao.addIndex(new foam.core.PropertyInfo[] {Transaction.PARENT});
    transactionMDao.addIndex(new foam.core.PropertyInfo[] {Transaction.DESTINATION_ACCOUNT});
    transactionMDao.addIndex(new foam.core.PropertyInfo[] {Transaction.SOURCE_ACCOUNT});
    transactionMDao.addIndex(new foam.core.PropertyInfo[] {Transaction.LAST_STATUS_CHANGE});
    transactionMDao.addIndex(new foam.core.PropertyInfo[] {Transaction.CREATED});
    fm = new DAOFoldManager.Builder(x)
      .setDao((DAO)x.get("accountBalanceHourlyCandlestickDAO"))
      .setPeriodLengthMs(60 * 60 * 1000)
      .build();
    foldingDAO = new FoldManagerDAODecorator.Builder(x)
      .setDelegate(transactionMDao)
      .setFm(fm)
      .build();
    TransactionDAO aa = new TransactionDAO(x, foldingDAO);
    HashingJDAO a = new HashingJDAO(x, "SHA-256", true, aa, "transactions");
    deletedAware = new DeletedAwareDAO.Builder(x)
      .setName("transaction")
      .setDelegate(a)
      .build();
    ctx = new foam.dao.ContextualizingDAO.Builder(x)
      .setDelegate(deletedAware)
      .build();
    ruler = new RulerDAO(x, ctx, "localTransactionDAO");
    foam.dao.ProxyDAO aware = new foam.nanos.auth.CreatedAwareDAO.Builder(x)
      .setDelegate(new foam.nanos.auth.CreatedByAwareDAO.Builder(x)
        .setDelegate(new foam.nanos.auth.LastModifiedAwareDAO.Builder(x)
          .setDelegate(new foam.nanos.auth.LastModifiedByAwareDAO.Builder(x)
            .setDelegate(new foam.dao.GUIDDAO(ruler))
            .build())
          .build())
        .build())
      .build();
    AFEXTransactionDAO afex = new net.nanopay.fx.afex.AFEXTransactionDAO(x, aware);
    AscendantFXTransactionDAO ascendant = new net.nanopay.fx.ascendantfx.AscendantFXTransactionDAO(x, afex);
    DAO saved = new net.nanopay.tx.SaveChainedTransactionDAO(x, ascendant);
    DAO child = new CompletedTransactionDAO.Builder(x)
      .setDelegate(saved)
      .build();
    UpdateInvoiceTransactionDAO e = new UpdateInvoiceTransactionDAO(x, child);
    DAO exec = new ExecuteMethodsTransactionDAO.Builder(x)
      .setDelegate(e)
      .build();
    quoted = new CheckQuotedTransactionDAO(x, exec);
    RealexTransactionDAO real = new net.nanopay.tx.realex.RealexTransactionDAO(x, quoted);
    DAO stripe = new StripeTransactionDAO(x, real);
    return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x ,stripe));
    """
})

p({
  "class":"foam.nanos.boot.NSpec", "name":"transactionDAO",                   "lazy":false,  "serve":true,  "serviceScript":
  """
    return new foam.dao.PMDAO(x,
        new foam.dao.PipelinePMDAO(x,
          new net.nanopay.tx.AuthenticatedTransactionDAO(x,
            new foam.nanos.auth.AuthorizationDAO(x,
              new foam.nanos.auth.PermissionedPropertyDAO(x,
                (foam.dao.DAO) x.get("localTransactionDAO"))
                .orderBy(new foam.mlang.order.Desc(net.nanopay.tx.model.Transaction.CREATED)
              ),
              new foam.nanos.auth.AuthorizableAuthorizer("transaction")
            )
          )
        )
      );
  """,
  "client":"{\"of\":\"net.nanopay.tx.model.Transaction\", \"remoteListenerSupport\": false, \"serverBox\":{ \"class\":\"foam.box.SessionClientBox\", \"url\":\"service/transactionDAO\", \"delegate\":{ \"class\":\"foam.box.TimeoutBox\", \"timeout\":60000,\"delegate\":{\"class\":\"foam.box.HTTPBox\", \"url\":\"service/transactionDAO\"}}}}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"tableViewTransactionDAO",                   "lazy":false,  "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new net.nanopay.tx.TransactionEntitiesDAO(x, (foam.dao.DAO) x.get(\"transactionDAO\"))));","client":"{\"of\":\"net.nanopay.tx.model.Transaction\", \"remoteListenerSupport\": false, \"serverBox\":{ \"class\":\"foam.box.SessionClientBox\", \"url\":\"service/tableViewTransactionDAO\", \"delegate\":{ \"class\":\"foam.box.TimeoutBox\", \"timeout\":25000,\"delegate\":{\"class\":\"foam.box.HTTPBox\", \"url\":\"service/tableViewTransactionDAO\"}}}}"})
p({"class":"foam.nanos.boot.NSpec", "name":"liquidityService",                   "serviceScript":"return new net.nanopay.liquidity.LiquidityService();"})
p({"class":"foam.nanos.boot.NSpec", "name":"transactionPurposeDAO",              "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new foam.nanos.auth.AuthorizationDAO(x, new foam.dao.java.JDAO(x, net.nanopay.tx.TransactionPurpose.getOwnClassInfo(), \"transactionPurposes\"), new foam.nanos.auth.StandardAuthorizer(\"transactionPurpose\"))));", "client":"{\"of\":\"net.nanopay.tx.TransactionPurpose\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"transactionLimitDAO",                "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new foam.dao.java.JDAO(x, net.nanopay.tx.model.TransactionLimit.getOwnClassInfo(), \"transactionLimits\")));", "client":"{\"of\":\"net.nanopay.tx.model.TransactionLimit\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"userTransactionLimit",               "serve":true,  "boxClass":"net.nanopay.tx.UserTransactionLimitSkeleton", "serviceClass":"net.nanopay.tx.UserTransactionLimitService","client":"{ \"class\":\"net.nanopay.tx.client.ClientUserTransactionLimitService\", \"delegate\": { \"class\":\"foam.box.HTTPBox\", \"url\":\"service/userTransactionLimit\" } }"})
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "pacsMsg",
  "parameters": true,
  "serviceScript": "return new net.nanopay.tx.PacsWebAgent()"
})
p({"class":"foam.nanos.boot.NSpec", "name":"transactionFeeDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"transactionFeeDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"transactionFees\").setOf(net.nanopay.tx.model.TransactionFee.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tx.model.TransactionFee\"}","description":"Fees or charges with using a particular rail or service"})
p({"class":"foam.nanos.boot.NSpec", "name":"lineItemTypeDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"lineItemTypeDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"lineItemTypes\").setOf(net.nanopay.tx.LineItemType.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tx.LineItemType\"}","description":"Type of service being invoiced for."})
p({"class":"foam.nanos.boot.NSpec", "name":"lineItemFeeDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"lineItemFeeDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"lineItemFees\").setOf(net.nanopay.tx.LineItemFee.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tx.LineItemFee\"}","description":"Fee to apply for a particular LineItem type."})
p({"class":"foam.nanos.boot.NSpec", "name":"lineItemTypeAccountDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"lineItemTypeAccountDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"lineItemTypeAccounts\").setOf(net.nanopay.tx.LineItemTypeAccount.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tx.LineItemTypeAccount\"}","description":"Deposit Account or user/payee for LineItem type."})
p({"class":"foam.nanos.boot.NSpec", "name":"taxService",                   "serve":true, "serviceScript":"return new net.nanopay.tax.TaxMockService(x);"})
p({"class":"foam.nanos.boot.NSpec", "name":"lineItemTaxDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"lineItemTaxDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"lineItemTax\").setOf(net.nanopay.tax.LineItemTax.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tax.LineItemTax\"}","description":"Tax to apply for a particular LineItem type, TaxCode, Country and Region."})
p({"class":"foam.nanos.boot.NSpec", "name":"lineItemTaxDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"lineItemTaxDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"lineItemTax\").setOf(net.nanopay.tax.LineItemTax.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tax.LineItemTax\"}","description":"Tax to apply for a particular LineItem type, TaxCode, Country and Region."})
// Candlesticks
p({"class":"foam.nanos.boot.NSpec", "name":"accountBalanceWeeklyCandlestickDAO",                     "serve":true,  "serviceScript":"return new foam.dao.MDAO(foam.nanos.analytics.Candlestick.getOwnClassInfo());", "client":"{\"of\":\"foam.nanos.analytics.Candlestick\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"accountBalanceMonthlyCandlestickDAO",                     "serve":true,  "serviceScript":"return new foam.dao.MDAO(foam.nanos.analytics.Candlestick.getOwnClassInfo());", "client":"{\"of\":\"foam.nanos.analytics.Candlestick\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"accountBalanceQuarterlyCandlestickDAO",                     "serve":true,  "serviceScript":"return new foam.dao.MDAO(foam.nanos.analytics.Candlestick.getOwnClassInfo());", "client":"{\"of\":\"foam.nanos.analytics.Candlestick\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"accountBalanceAnnuallyCandlestickDAO",                     "serve":true,  "serviceScript":"return new foam.dao.MDAO(foam.nanos.analytics.Candlestick.getOwnClassInfo());", "client":"{\"of\":\"foam.nanos.analytics.Candlestick\"}"})
// Reduce Managers
p({"class":"foam.nanos.boot.NSpec", "name":"accountBalanceMonthlyReduceManager",               "serve":true,  "serviceScript":"return new foam.nanos.analytics.DAOReduceManager.Builder(x).setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceWeeklyCandlestickDAO\")).setDestDAO((foam.dao.DAO) x.get(\"accountBalanceMonthlyCandlestickDAO\")).setPeriodLengthMs(30*7*24*60*60*1000).build();"})
p({"class":"foam.nanos.boot.NSpec", "name":"accountBalanceQuarterlyReduceManager",               "serve":true,  "serviceScript":"return new foam.nanos.analytics.DAOReduceManager.Builder(x).setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceMonthlyCandlestickDAO\")).setDestDAO((foam.dao.DAO) x.get(\"accountBalanceQuarterlyCandlestickDAO\")).setPeriodLengthMs(3*30*7*24*60*60*1000).build();"})
p({"class":"foam.nanos.boot.NSpec", "name":"accountBalanceAnnuallyReduceManager",               "serve":true,  "serviceScript":"return new foam.nanos.analytics.DAOReduceManager.Builder(x).setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceQuarterlyCandlestickDAO\")).setDestDAO((foam.dao.DAO) x.get(\"accountBalanceAnnuallyCandlestickDAO\")).setPeriodLengthMs(12*30*7*24*60*60*1000).build();"})

p({"class":"foam.nanos.boot.NSpec","name":"accountBalanceHourlyCandlestickDAO","serve":true,"serviceScript":"return new foam.dao.MDAO(foam.nanos.analytics.Candlestick.getOwnClassInfo());","client":"{\"of\":\"foam.nanos.analytics.Candlestick\"}"})
p({"class":"foam.nanos.boot.NSpec","name":"accountBalanceDailyCandlestickDAO","serve":true,"serviceScript":"return new foam.dao.MDAO(foam.nanos.analytics.Candlestick.getOwnClassInfo());","client":"{\"of\":\"foam.nanos.analytics.Candlestick\"}"})
p({"class":"foam.nanos.boot.NSpec","name":"accountBalanceDailyReduceManager","serviceScript":"return new foam.nanos.analytics.DAOReduceManager.Builder(x)\n  .setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceHourlyCandlestickDAO\"))\n  .setDestDAO((foam.dao.DAO) x.get(\"accountBalanceDailyCandlestickDAO\"))\n  .setCloseTimeExpr(new foam.glang.EndOfDay.Builder(x)\n    .setDelegate(new foam.mlang.IdentityExpr.Builder(x).build())\n    .build())\n  .build();"})
p({"class":"foam.nanos.boot.NSpec","name":"accountBalanceWeeklyReduceManager","serviceScript":"return new foam.nanos.analytics.DAOReduceManager.Builder(x)\n  .setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceDailyCandlestickDAO\"))\n  .setDestDAO((foam.dao.DAO) x.get(\"accountBalanceWeeklyCandlestickDAO\"))\n  .setCloseTimeExpr(new foam.glang.EndOfWeek.Builder(x)\n    .setDelegate(new foam.mlang.IdentityExpr.Builder(x).build())\n    .build())\n  .build();"})
p({"class":"foam.nanos.boot.NSpec","id":"accountBalanceMonthlyReduceManager","serviceScript":"return new foam.nanos.analytics.DAOReduceManager.Builder(x)\n  .setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceDailyCandlestickDAO\"))\n  .setDestDAO((foam.dao.DAO) x.get(\"accountBalanceMonthlyCandlestickDAO\"))\n  .setCloseTimeExpr(new foam.glang.EndOfMonth.Builder(x)\n    .setDelegate(new foam.mlang.IdentityExpr.Builder(x).build())\n    .build())\n  .build();"})
p({"class":"foam.nanos.boot.NSpec","id":"accountBalanceQuarterlyReduceManager","serviceScript":"return new foam.nanos.analytics.DAOReduceManager.Builder(x)\n  .setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceMonthlyCandlestickDAO\"))\n  .setDestDAO((foam.dao.DAO) x.get(\"accountBalanceQuarterlyCandlestickDAO\"))\n  .setCloseTimeExpr(new foam.glang.EndOfQuarter.Builder(x)\n    .setDelegate(new foam.mlang.IdentityExpr.Builder(x).build())\n    .build())\n  .build();"})
p({"class":"foam.nanos.boot.NSpec","id":"accountBalanceAnnuallyReduceManager","serviceScript":"return new foam.nanos.analytics.DAOReduceManager.Builder(x)\n  .setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceQuarterlyCandlestickDAO\"))\n  .setDestDAO((foam.dao.DAO) x.get(\"accountBalanceAnnuallyCandlestickDAO\"))\n  .setCloseTimeExpr(new foam.glang.EndOfYear.Builder(x)\n    .setDelegate(new foam.mlang.IdentityExpr.Builder(x).build())\n    .build())\n  .build();"})

p({"class":"foam.nanos.boot.NSpec", "name":"afexTradeResponseDAO",                 "lazy":false,  "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setOf(net.nanopay.fx.afex.CreateTradeResponse.getOwnClassInfo()).setSeqNo(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"afexTradeResponse\").build();","client":"{\"of\":\"net.nanopay.fx.afex.CreateTradeResponse\"}" })

p({"class":"foam.nanos.boot.NSpec","name":"paymentProviderDAO",                       "lazy":false,  "serve":true, "serviceScript":"return new foam.dao.SequenceNumberDAO(new foam.dao.java.JDAO(x, net.nanopay.payment.PaymentProvider.getOwnClassInfo(), \"paymentProviders\"));", "client":"{\"of\":\"net.nanopay.payment.PaymentProvider\"}"})
p({"class":"foam.nanos.boot.NSpec","name":"InstitutionPaymentProviderDAO",                 "lazy":false,  "serve":true, "serviceScript":"return new foam.dao.SequenceNumberDAO(new foam.dao.java.JDAO(x, net.nanopay.payment.InstitutionPaymentProvider.getOwnClassInfo(), \"InstitutionPaymentProvider\"));", "client":"{\"of\":\"net.nanopay.payment.InstitutionPaymentProvider\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"purposeCodeDAO",                 "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new foam.dao.SequenceNumberDAO(new foam.dao.java.JDAO(x, net.nanopay.tx.PurposeCode.getOwnClassInfo(), \"purposeCodes\"))));", "client":"{\"of\":\"net.nanopay.tx.PurposeCode\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"purposeGroupDAO",                "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new foam.dao.SequenceNumberDAO(new foam.dao.java.JDAO(x, net.nanopay.tx.PurposeGroup.getOwnClassInfo(), \"purposeGroups\"))));", "client":"{\"of\":\"net.nanopay.tx.PurposeGroup\"}"})
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"securityPlannerDAO",
  "lazy":false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setNullify(true)
      .setOf(net.nanopay.tx.TransactionQuote.getOwnClassInfo())
      .setRuler(true)
      .setRulerDaoKey("securityPlannerDAO")
      .setPm(true)
      .setPipelinePm(true)
      .build();
  """
})
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"transactionRecordDAO",
  "lazy":false,
  "serve":true,
  "client":"{\"of\":\"net.nanopay.tx.TransactionRecord\"}",
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.TransactionRecord.getOwnClassInfo())
      .setSeqNo(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("transactionRecord")
      .build();
  """
})

