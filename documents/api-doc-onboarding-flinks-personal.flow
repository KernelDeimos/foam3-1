<title>API User Onboarding</title>

<h1>User Onboarding</h1>
<p>
    Onboarding is a key part of the nanopay experience. Users, businesses and account all have to be setup 
    and the process of creating these entities within the system is called onboarding. Once a user has been
    setup within the system, they can then participate in a transaction. The level of detail in their onboarding
    determines whether they can participate in transactions as a payee or as a payer.
</p>

<h2>Flinks</h2>
<p>
    In order to make the onboarding process easier for our clients, we use an integration with 
    the <a href="https://docs.flinks.io/docs/connecting-accounts-widget">Flinks widget</a> to
    retrieve a large part of the customer data which is available through the customer's bank.
</p>

<h2>Onboarding Process for Personal Payments using Flinks</h2>
<p>
    There are several steps to completing onboarding for a user when using the Flinks widget.
    <ol>
        <li><a href="#flinks-widget">Call Flinks widget</a></li>
        <li><a href="#login-id">Provision User with Flinks LoginId</a></li>
        <li><a href="#user-onboarding">Complete User Onboarding</a></li>
    </ol>
</p>

<h3><a name="flinks-widget">Flinks Widget</a></h3>
<p>
    In order to start user onboarding, the user must first complete all of the steps of 
    the <a href="https://docs.flinks.io/docs/connecting-accounts-widget">Flinks widget</a>. Once 
    they have completed the full flow of the widget, they will be redirected back to a page of your
    choosing with several key pieces of information, namely the loginId and the accountId.
</p>
<p>
    When configuring the Flinks widget, you provide a redirectUrl. The flinks widget will redirect back to that 
    URL once it has completed. Here is a sample of what the resulting URL returned will look like:
    <code>
https://flinks.io/contact/thank-you?loginId=8b35f6c8-e7b6-41d3-98f8-08d68b7f8d31&
        tag=YourTag&accountId=8cd3e122-4826-4e24-48c4-08d69b30caf5&institution=FlinksCapital</code>
    As you can see in the URL, both the loginId and the accountId are embedded as parameters returned in the URL. 
    They simply need to be parsed and passed to nanopay's DIG API, which we will do in the next step.
</p>
<p>
    In order for the Flinks widget to work properly, your i-frame has to be configured with a specific nanopay URL which will allow
    for sessions created with a widget on your server to be maintained when we use the same loginId to make follow-up API calls. 
    Please contact nanopay to get the full URL.
</p>

<h3><a name="login-id">Provisioning a User with Flinks LoginId</a></h3>
<p>
    Once the user has completed the Flinks widget flow, nanopay can provision them by retrieving data from Flinks using 
    the loginId from the redirectUrl in the previous step. By sending nanopay the loginId, the system can retrieve 
    information from Flinks and perform the following steps:
    <ol>
      <li>Create the User</li>
      <li>Start User Onboaring</li>
      <li>Create a CAD Bank Account</li>
    </ol>
    However, full user onboarding cannot be completed with the Flinks data alone. Several capabilities will still need to
    be completed in order for onboarding to complete successfully. The missing capabilities are returned in the response
    to the DIG call.
</p>
<p>
    One thing to note here is that if the LoginId has been previously seen by the nanopay system, a new user will not be 
    created. Instead, the previously provisioned user will be found and will be returned in the 'user' property. 
    Users that are found that have already completed onboarding will be easily identifiable by checking the 'capabilityPayloads' property, which should 
    return an empty map for the capability you are trying to enable. Similarly, if the CAD bank account already exists for that business, it will be found 
    and the ID will be returned in the 'account' field.
</p>
<p>
    In order to start the provisioning process, the loginId has to be passed in to the flinksLoginIdDAO through DIG.
    The FlinksLoginIdOnboarding API call is a DIG API call to the flinksLoginIdDAO with the following payload:
    <code>{
    "class": "net.nanopay.flinks.external.FlinksLoginIdOnboarding",
    "loginId": "2ff467b7-bcde-4346-8996-08d69b30c4d8",
    "accountId": "8cd3e122-4826-4e24-48c4-08d69b30caf5",
    "institution": "FlinksCapital",
    "type": 0,
    "flinksOverrides": {
      "userOverrides": {
        // add user overrides
        ...
      }
    }
}   </code>
    Note that the class is required to be 'net.nanopay.flinks.external.FlinksLoginIdOnboarding' in order for the onboarding process to be triggered.
</p>
<p>
    If necessary, we have also provided the ability to override data returned from Flinks with your own overrides. Specifically, you can include
    'userOverrides', which is an object with the following structure:
</p>
<h4><a name="user-override-data">UserOverrideData</a></h4>
<foam class="foam.flow.widgets.PropertyShortSummary" of="net.nanopay.flinks.external.UserOverrideData" />
<p>
    As part of the response the to flinksLoginIdDAO call, nanopay will include the capabilities that are 
    still required to be completed in order for the user to be onboarded for Personal Payments Under $1000 CAD. 
    The property that needs to be checked is the missingUserCapabilityDataObjects property. Here is an example of a response
    with the privacy policy still needing to be agreed to as well as the terms and conditions agreement:
    <code>{
    "class": "net.nanopay.flinks.external.FlinksLoginIdOnboarding",
    "type": 1,
    "capabilityPayloads": [
        {
            "class": "foam.nanos.crunch.connection.CapabilityPayload",
            "id": "F3DCAF53-D48B-4FA5-9667-6A6EC58C54FD",
            "capabilityDataObjects": {
                "AbliiPrivacyPolicy": {
                    "class": "net.nanopay.crunch.acceptanceDocuments.capabilities.AbliiPrivacyPolicy",
                    "title": "Ablii's Privacy Policy",
                    "agreement": false,
                    "version": "1.0"
                },
                "AbliiTermsAndConditions": {
                    "class": "net.nanopay.crunch.acceptanceDocuments.capabilities.AbliiTermsAndConditions",
                    "title": "Ablii's Terms and Conditions",
                    "agreement": false,
                    "version": "1.0"
                }
            },
            "capabilityValidationErrors": {
                "AbliiPrivacyPolicy": "Must acknowledge the agreement.",
                "AbliiTermsAndConditions": "Must acknowledge the agreement."
            }
        }
    ],
    ...
}
    </code>
    This map can be extracted and directly used in the next API call to the capabilityPayloadDAO.
</p>
<h4><a name="flinks-login-id-onboarding">FlinksLoginIdOnboarding</a></h4>
<p>
  Here is the full structure of the FlinksLoginIdOnboarding object:
  <foam class="foam.flow.widgets.PropertyShortSummary" of="net.nanopay.flinks.external.FlinksLoginIdOnboarding"  whitelist="['type', 'missingUserCapabilityDataObjects', 'missingBusinessCapabilityDataObjects', 'loginId', 'institution', 'flinksOverrides', 'user', 'business', 'account', 'created', 'createdBy']" />
</p>
<h4><a name="onboarding-type">OnboardingType</a></h4>
<table>
  <tbody>
    <tr>
      <th>Name</th>
      <th>Value</th>
      <th>Documentation</th>
    </tr>
    <tr>
      <td>DEFAULT</td>
      <td>0</td>
      <td>Allow the flinks login type to dictate the type of onboarding performed.</td>
    </tr>
    <tr>
      <td>PERSONAL</td>
      <td>1</td>
      <td>Personal payments onboarding.</td>
    </tr>
    <tr>
      <td>BUSINESS</td>
      <td>2</td>
      <td>Business payments onboarding.</td>
    </tr>
  </tbody>
</table>
<h4><a name="flinks-overrides">FlinksOverrides</a></h4>
<foam class="foam.flow.widgets.PropertyShortSummary" of="net.nanopay.flinks.external.FlinksOverrides" />

<p>
<i><b>Session Authentication:</b> Authentication for user provisioning with Flinks LoginId should be done with the administrative session.</i>
</p>

<h3><a name="user-onboarding">User Onboarding</a></h3>
<p>
    Once the user has been created and partially onboarded, user onboarding can be completed by providing the final set of capabilities associated with a user. 
    Capabilities are enabled for a user by making a DIG API call to the capabilityPayloadDAO with the ID of the top level capability to enable and all of the payloads 
    for the supporting data. To complete onboarding of the user specifically for payments under $1000 CAD, the following payloads have to be provided:
    <ul>
        <li><a href="#ablii-terms-and-conditions">AbliiTermsAndConditions</a></li>
        <li><a href="#ablii-privacy-policy">AbliiPrivacyPolicy</a></li>
    </ul>
    If payments more that $1000 CAD need to be made, further information is required of the user and the following payload has to be provided:
    <ul>
        <li><a href="#user-detail-expanded-data">UserDetailExpandedData</a></li>
    </ul>
    Providing all of this information will setup the user. The definition of these objects can be found in the <a href="#user-onboarding-objects">user onboarding objects</a> section.
</p>

<p>
<i><b>Session Authentication:</b> Authentication for user onboarding should be done with a transaction session 
      that was created with the userId and agentId set to the ID of the user returned in the FlinksLoginId response.</i>
</p>

<h2>Sending Capabilities to CapabilityPayloadDAO</h2>
<p>
    All functionality is enabled by setting up capabilities. The mechanism that we are providing to create capabilities 
    through the API is exposing the capabilityPayloadDAO in DIG. The idea behind this DAO is that all of the payloads, or
    data, necessary to enable a given set of capabilities is provided in a single call, even though the data may be very 
    different in nature. In order to determine which payloads are necessary to be provided for a given capability, simply
    query the capabilityPayloadDAO and provide the ID of the capability in the SELECT method. Performing this select call
    will return an object which contains the necessary structure for saving to the capabilityPayloadDAO. Simply fill in 
    the data for the given objects and PUT the CapabilityPayload object back to the capabilityPayloadDAO in DIG. The following table
    describes the structure of the objects inside the capabilityPayloadDAO.
</p>
<h4><a name="capability-payload">CapabilityPayload</a></h4>
<foam class="foam.flow.widgets.PropertyShortSummary" of="foam.nanos.crunch.connection.CapabilityPayload" />
<p>
    Depending on your use case, the following capabilities will be the top level capabilities for the given use case:
    <ol>
        <li>Personal Payments Under 1000CAD - Capability ID: <pre>F3DCAF53-D48B-4FA5-9667-6A6EC58C54FD</pre></li>
        <li>Full Personal Payments - Capability ID: <pre>1F0B39AD-934E-462E-A608-D590D1081298</pre></li>
    </ol>
    As stated above in the <a href="#user-onboarding">user onboarding</a> section, the payloads necessary are all objects listed. 
    These objects will be mapped by easily understandable keys in the capabilityDataObjects map.
</p>
<p>
    Refer to the <a href="/#api-doc-60-capabilities">capability documentation page</a> for more information.
</p>

<h2>Onboarding Data Objects</h2>

<h3><a name="user-onboarding-objects">User Onboarding Objects</a></h3>

<h4><a name="ablii-terms-and-conditions">AbliiTermsAndConditions</a></h4>
<foam class="foam.flow.widgets.PropertyShortSummary" of="net.nanopay.crunch.acceptanceDocuments.capabilities.AbliiTermsAndConditions" whitelist="['title', 'agreement']" />

<h4><a name="ablii-privacy-policy">AbliiPrivacyPolicy</a></h4>
<foam class="foam.flow.widgets.PropertyShortSummary" of="net.nanopay.crunch.acceptanceDocuments.capabilities.AbliiPrivacyPolicy" whitelist="['title', 'agreement']" />

<h4><a name="user-detail-expanded-data">UserDetailData</a></h4>
<foam class="foam.flow.widgets.PropertyShortSummary" of="net.nanopay.crunch.registration.UserDetailData" />

<h4><a name="user-detail-expanded-data">UserDetailExpandedData</a></h4>
<foam class="foam.flow.widgets.PropertyShortSummary" of="net.nanopay.crunch.registration.UserDetailExpandedData" />