p({
class:"foam.nanos.script.Script",
id:"Update BusinessSector journals by BusinessSector API",
description:"Update BusinessSector journals to match the API",
language:1,
code:"
import foam.dao.DAO;\n
import foam.dao.ArraySink;\n
import foam.mlang.MLang;\n
import foam.lib.json.JSONParser;\n
import foam.core.FObject;\n
import foam.i18n.TranslationService;\n
import foam.mlang.predicate.Predicate;\n
import java.io.IOException;\n
import java.util.List;\n
import javax.security.auth.AuthPermission;\n
import javax.ws.rs.core.UriBuilder;\n
import net.nanopay.model.BusinessSector;\n
import net.nanopay.partner.br.businessSector.Sector;\n
import org.apache.http.client.methods.HttpGet;\n
import org.apache.http.client.methods.CloseableHttpResponse;\n
import org.apache.http.client.config.RequestConfig;\n
import org.apache.http.impl.client.HttpClientBuilder;\n
import org.apache.http.impl.NoConnectionReuseStrategy;\n
import org.apache.http.impl.client.CloseableHttpClient;\n
import org.apache.http.HttpResponse;\n
import org.apache.http.client.methods.HttpGet;\n
import org.apache.http.impl.client.HttpClientBuilder;\n
import org.apache.http.util.EntityUtils;\n
import org.apache.http.impl.client.BasicResponseHandler;\n
\n
\n
    HttpGet httpget = new HttpGet(\"https://servicodados.ibge.gov.br/api/v2/cnae/classes\");\n
    httpget.setHeader(\"Content-Type\", \"application/json\");\n
    httpget.setHeader(\"Accept\", \"application/json\");\n
    httpget.setHeader(\"Api-Version\", \"alpha\");\n
    RequestConfig requestConfig = RequestConfig.custom().setConnectionRequestTimeout(5000).build();\n
    CloseableHttpClient httpClient = HttpClientBuilder.create().setDefaultRequestConfig(requestConfig).setConnectionReuseStrategy(new NoConnectionReuseStrategy()).build();\n
    CloseableHttpResponse httpResponse = httpClient.execute(httpget);\n
    String response = new BasicResponseHandler().handleResponse(httpResponse);\n
    Object[] obj = x.create(foam.lib.json.JSONParser.class).parseStringForArray(response,Sector.class);\n
    DAO businessSectorDAO = (DAO) x.get(\"businessSectorDAO\");\n
    List businessSectors = ((ArraySink) businessSectorDAO.where(foam.mlang.MLang.AND( new Predicate[] {MLang.GTE(BusinessSector.ID, 92813), MLang.LTE(BusinessSector.ID, 93485)})).select(new ArraySink())).getArray();\n
    TranslationService ts = (TranslationService) x.get(\"translationService\");\n
    for (int i = 0; i < businessSectors.size(); i++) {\n
      BusinessSector businessSector = (BusinessSector) businessSectors.get(i);\n
      String sectorName = businessSector.getName();\n
      String name_tr = ts.getTranslation(\"pt\", sectorName, sectorName);\n
      String businessCode = businessSector.getCode();\n
      String api_Id = ((Sector) obj[i]).getId() + ((Sector) obj[i]).getGrupo().getDivisao().getId();\n
      String api_parent = ((Sector) obj[i]).getGrupo().getDivisao().getSecao().getId();\n
      String api_name = ((Sector) obj[i]).getDescricao();\n
      Character api_parent_char = api_parent.charAt(0);\n
      int api_parent_long = (java.lang.Character.getNumericValue(api_parent_char) - 9);\n
      businessSector = businessSector.fclone();\n
      // check if they have same code, the order are same at least for this API version\n
      if (! api_Id.equals(businessCode)) {\n
        continue;\n
      }\n
      // check if English translation are same
      if (! api_name.equals(name_tr.toUpperCase())) print(sectorName);
      switch(api_parent) {\n
        case \"C\" :\n
            businessSector.setParent(5);\n
            break;\n
        case \"D\" :\n
            businessSector.setParent(3);\n
            break;\n
        case \"E\" :\n
            businessSector.setParent(14);\n
            break;\n
        case \"F\":\n
            businessSector.setParent(4);\n
            break;\n
        case \"G\":\n
            businessSector.setParent(6);\n
            break;        \n
        case \"H\":\n
            businessSector.setParent(8);\n
            break;\n
        case \"I\":\n
            businessSector.setParent(18);\n
            break;\n
        case \"J\":\n
            businessSector.setParent(9);\n
            break;\n
        case \"K\":\n
            businessSector.setParent(10);\n
            break;\n
        case \"L\":\n
            businessSector.setParent(11);                       \n
            break;\n
        case \"M\":\n
            businessSector.setParent(12);                       \n
            break;\n
        case \"N\":\n
            businessSector.setParent(93488);                      \n
            break;\n
        case \"O\":\n
            businessSector.setParent(20);                       \n
            break;\n
        case \"P\":\n
            businessSector.setParent(15);                      \n
            break;\n
        case \"Q\":\n
            businessSector.setParent(16);                \n
            break;\n
        case \"R\":\n
            businessSector.setParent(17);                    \n
            break;\n
        case \"S\":\n
            businessSector.setParent(19);                    \n
            break;\n
        case \"T\":\n
            businessSector.setParent(93487);                     \n
            break;\n
        case \"U\":\n
            businessSector.setParent(93486);                       \n
            break;\n
        default :\n
            businessSector.setParent(api_parent_long);\n
      }\n
       businessSectorDAO.put(businessSector);\n
}\n
"})


p({class:"foam.nanos.script.Script",
id:"update businessSector translation to match API",
description:"update businessSector portuguese translation",
language:1,
code:"import foam.lib.json.JSONParser;\n
import foam.core.FObject;\n
import foam.dao.DAO;\n
import foam.dao.ArraySink;\n
import foam.mlang.MLang;\n
import foam.mlang.predicate.Predicate;\n
import foam.i18n.TranslationService;\n
import foam.i18n.Locale;\n
import javax.ws.rs.core.UriBuilder;\n
import java.io.IOException;\n
import javax.security.auth.AuthPermission;\n
import java.util.List;\n
import net.nanopay.model.BusinessSector;\n
import net.nanopay.partner.br.businessSector.Sector;\n
import org.apache.http.client.methods.HttpGet;\n
import org.apache.http.client.methods.CloseableHttpResponse;\n
import org.apache.http.client.config.RequestConfig;\n
import org.apache.http.impl.client.HttpClientBuilder;\n
import org.apache.http.impl.NoConnectionReuseStrategy;\n
import org.apache.http.impl.client.CloseableHttpClient;\n
import org.apache.http.HttpResponse;\n
import org.apache.http.client.methods.HttpGet;\n
import org.apache.http.impl.client.HttpClientBuilder;\n
import org.apache.http.util.EntityUtils;\n
import org.apache.http.impl.client.BasicResponseHandler;\n
\n
    HttpGet httpget = new HttpGet(\"https://servicodados.ibge.gov.br/api/v2/cnae/classes\");\n
    httpget.setHeader(\"Content-Type\", \"application/json\");\n
    httpget.setHeader(\"Accept\", \"application/json\");\n
    httpget.setHeader(\"Api-Version\", \"alpha\");\n
    RequestConfig requestConfig = RequestConfig.custom().setConnectionRequestTimeout(5000).build();\n
    CloseableHttpClient httpClient = HttpClientBuilder.create().setDefaultRequestConfig(requestConfig).setConnectionReuseStrategy(new NoConnectionReuseStrategy()).build();\n
    CloseableHttpResponse httpResponse = httpClient.execute(httpget);\n
    String response = new BasicResponseHandler().handleResponse(httpResponse);\n
    Object[] obj = x.create(foam.lib.json.JSONParser.class).parseStringForArray(response,Sector.class);\n
    DAO businessSectorDAO = (DAO) x.get(\"businessSectorDAO\");\n
    DAO localeDAO = (DAO) x.get(\"localeDAO\");\n
    List businessSectors = ((ArraySink) businessSectorDAO.where(foam.mlang.MLang.AND( new Predicate[] {MLang.GTE(BusinessSector.ID, 92813), MLang.LTE(BusinessSector.ID, 93485)})).select(new ArraySink())).getArray();\n
    TranslationService ts = (TranslationService) x.get(\"translationService\");\n
    for (int i = 0; i < businessSectors.size(); i++) {\n
      BusinessSector businessSector = (BusinessSector) businessSectors.get(i);\n
      String sectorName = businessSector.getName();\n
      String businessSectorName_translated = ts.getTranslation(\"pt\", sectorName, sectorName);\n
      String businessCode = businessSector.getCode();\n
      String api_Id = ((Sector) obj[i]).getId() + ((Sector) obj[i]).getGrupo().getDivisao().getId();\n
      String api_parent = ((Sector) obj[i]).getGrupo().getDivisao().getSecao().getId();\n
      Character api_parent_char = api_parent.charAt(0);\n
      int api_parent_long = (java.lang.Character.getNumericValue(api_parent_char) - 9);\n
      Locale locale =  localeDAO.find(MLang.EQ(Locale.SOURCE, sectorName));\n
      String text = ((Sector) obj[i]).getDescricao();\n
      StringBuilder converted = new StringBuilder();\n
      boolean convertNext = true;\n
      if (text.equals(businessSectorName_translated.toUpperCase())) continue;\n
      for (char ch : text.toCharArray()) {\n
        if (Character.isSpaceChar(ch)) {\n
            convertNext = true;\n
        } else if (convertNext) {\n
            ch = Character.toTitleCase(ch);\n
            convertNext = false;\n
        } else {\n
            ch = Character.toLowerCase(ch);\n
        }\n
        converted.append(ch);\n
    }\n
       locale = locale.fclone();\n
       locale.setTarget(converted.toString());\n
       localeDAO.put(locale);\n
}\n
"
})