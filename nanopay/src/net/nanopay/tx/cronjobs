p({
  "class": "foam.nanos.cron.Cron",
  "enabled": false,
  "schedule": {
    "class": "foam.nanos.cron.CronSchedule",
    "minute": -1,
    "hour": -1,
    "dayOfMonth": -1,
    "month": -1,
    "dayOfWeek": -1,
    "second": 0
  },
  "scheduledTime": "2019-09-09T16:56:00.000Z",
  "id": "ls.daily",
  "description": "",
  "code": 
  """
    import net.nanopay.liquidity.LiquiditySettingsCheckCron;
    import net.nanopay.util.Frequency;
    ls = new LiquiditySettingsCheckCron(Frequency.DAILY);
    ls.execute(x);
    print("Daily Liquidity Run.");
  """
})
p({
  "class": "foam.nanos.cron.Cron",
  "enabled": false,
  "schedule": {
    "class": "foam.nanos.cron.CronSchedule",
    "minute": -1,
    "hour": -1,
    "dayOfMonth": -1,
    "month": -1,
    "dayOfWeek": -1,
    "second": 0
  },
  "scheduledTime": "2019-09-09T16:56:00.000Z",
  "id": "ls.weekly",
  "description": "",
  "code": 
  """
    import net.nanopay.liquidity.LiquiditySettingsCheckCron;
    import net.nanopay.liquidity.Frequency;
    ls = new LiquiditySettingsCheckCron(Frequency.WEEKLY);
    ls.execute(x);
    print("Liquidity Weekly Run");
  """
})

p({
  "class": "foam.nanos.cron.Cron",
  "enabled": false,
  "schedule": {
    "class": "foam.nanos.cron.CronSchedule",
    "minute": -1,
    "hour": -1,
    "dayOfMonth": 1,
    "month": -1,
    "dayOfWeek": -1,
    "second": 0
  },
  "scheduledTime": "2019-09-09T16:56:00.000Z",
  "id": "ls.monthly",
  "description": "This cron job is scheduled for cashout on the first date of the month.",
  "code": 
  """
    import net.nanopay.liquidity.LiquiditySettingsCheckCron;
    import net.nanopay.util.Frequency;
    ls = new LiquiditySettingsCheckCron(Frequency.MONTHLY);
    ls.execute(x);
    print("Liquidity Monthly Run");
  """
})

p({
  "class": "foam.nanos.cron.Cron",
  "enabled": false,
  "schedule": {
    "class": "foam.nanos.cron.CronSchedule",
    "minute": -1,
    "hour": -1,
    "dayOfMonth": -1,
    "month": -1,
    "dayOfWeek": -1,
    "second": 0
  },
  "id": "generic transaction completion cron",
  "description": "This cron job sets CICO transaction to complete if they are in sent status and have passed the completion date.",
  "code": 
  """
  import foam.mlang.predicate.Predicate;
  import foam.core.ContextAgent;
  import foam.core.Detachable;
  import foam.core.X;
  import foam.dao.AbstractSink;
  import foam.dao.DAO;
  import net.nanopay.tx.cico.CITransaction;
  import net.nanopay.tx.cico.COTransaction;
  import net.nanopay.tx.cico.VerificationTransaction;
  import net.nanopay.tx.model.Transaction;
  import net.nanopay.tx.model.TransactionStatus;
  import java.time.LocalDateTime;
  import static foam.mlang.MLang.*;
  import java.time.ZoneId;

  DAO transactionDAO = (DAO) x.get("localTransactionDAO");
  transactionDAO
    .where(
          AND(new Predicate[] {
              EQ(Transaction.STATUS, TransactionStatus.SENT),
              OR(new Predicate[] {
                INSTANCE_OF(CITransaction.class),
                INSTANCE_OF(COTransaction.class),
                INSTANCE_OF(VerificationTransaction.class)
              })
            })
          )
    .select( new AbstractSink() {

    public void put(Object o, Detachable d) {
      Transaction txn = (Transaction) o.fclone();
      LocalDateTime now = LocalDateTime.now();
      if ( txn.getEstimatedCompletionDate() != null ) {
        LocalDateTime completion = LocalDateTime.ofInstant(txn.getEstimatedCompletionDate().toInstant(),ZoneId.systemDefault());
        if ( now.isAfter(completion) ) {
          txn.setStatus(TransactionStatus.COMPLETED);
          txn2 = transactionDAO.put(txn);
        }
      }
    }
  });
  print("done");
  """
})
p({
  "class": "foam.nanos.cron.Cron",
  "enabled": false,
  "schedule": {
    "class": "foam.nanos.cron.CronSchedule",
    "minute": -1,
    "hour": -1,
    "dayOfMonth": -1,
    "month": -1,
    "dayOfWeek": -1,
    "second": 0
  },
  "id": "generic transaction sending cron",
  "description": "This cron job sets CICO transaction to sent if they are in pending status",
  "code":
  """
  import foam.mlang.predicate.Predicate;
  import foam.core.ContextAgent;
  import foam.core.Detachable;
  import foam.core.X;
  import foam.dao.AbstractSink;
  import foam.dao.DAO;
  import net.nanopay.tx.cico.CITransaction;
  import net.nanopay.tx.cico.COTransaction;
  import net.nanopay.tx.cico.VerificationTransaction;
  import net.nanopay.tx.model.Transaction;
  import net.nanopay.tx.model.TransactionStatus;
  import static foam.mlang.MLang.*;

  DAO transactionDAO = (DAO) x.get("localTransactionDAO");
  transactionDAO
    .where(
          AND(new Predicate[] {
              EQ(Transaction.STATUS, TransactionStatus.PENDING),
              OR(new Predicate[] {
                INSTANCE_OF(CITransaction.class),
                INSTANCE_OF(COTransaction.class),
                INSTANCE_OF(VerificationTransaction.class)
              })
            })
          )
    .select( new AbstractSink() {

    public void put(Object o, Detachable d) {
      Transaction txn = (Transaction) o.fclone();
      txn.setStatus(TransactionStatus.SENT);
      txn2 = transactionDAO.put(txn);
    }
  });
  print("done");
  """
})

p({
  "class": "foam.nanos.cron.Cron",
  "enabled": false,
  "schedule": {
    "class": "foam.nanos.cron.CronSchedule",
    "minute": 0,
    "hour": -1,
    "dayOfMonth": -1,
    "month": -1,
    "dayOfWeek": -1,
    "second": -1
  },
  "id": "AFEX Funding cron",
  "description": "This cron job sets AFEXFundingTransaction to sent if funding balance exists",
  "code":
  """
  import foam.mlang.predicate.Predicate;
  import foam.core.ContextAgent;
  import foam.core.Detachable;
  import foam.core.X;
  import foam.dao.AbstractSink;
  import foam.dao.DAO;
  import net.nanopay.fx.afex.AFEXFundingTransaction;
  import net.nanopay.fx.afex.AFEXFundingBalance;
  import net.nanopay.fx.afex.AFEXServiceProvider;
  import net.nanopay.tx.model.Transaction;
  import net.nanopay.tx.model.TransactionStatus;
  import static foam.mlang.MLang.*;

  DAO transactionDAO = (DAO) x.get("localTransactionDAO");
  AFEXServiceProvider afexService = (AFEXServiceProvider) x.get("afexServiceProvider");
  transactionDAO
    .where(
          AND(new Predicate[] {
              EQ(Transaction.STATUS, TransactionStatus.PENDING),
              INSTANCE_OF(AFEXFundingTransaction.class),
            })
          )
    .select( new AbstractSink() {

    public void put(Object o, Detachable d) {
      AFEXFundingTransaction txn = (AFEXFundingTransaction) o.fclone();

      AFEXFundingBalance response = afexService.getFundingBalance(x, txn.findSourceAccount(x).getOwner(), txn.getSourceCurrency());
      txn.setAccountId(response.getAccountId());
      txn.setFundingBalanceId(response.getFundingBalanceId());
      txn.setStatus(TransactionStatus.SENT);
      transactionDAO.put(txn);
    }
  });
  print("done");
  """
})
p({
  "class": "foam.nanos.cron.Cron",
  "enabled": true,
  "schedule": {
    "class":"foam.nanos.cron.IntervalSchedule",
    "start": "1992-04-20",
    "duration": {
      "class": "foam.nanos.cron.TimeHMS",
      "hour": 1
    }
  },
  "id": "TransactionPlan Expiry Cron",
  "description": "Remove Expired TransactionPlans",
  "code": """
    import foam.core.Detachable;
    import foam.core.X;
    import foam.dao.AbstractSink;
    import net.nanopay.tx.planner.TransactionPlan;
    import foam.nanos.logger.Logger;

    now = java.time.LocalDateTime.now();
    planDAO = (x.get("localTransactionPlannerDAO")).where( foam.mlang.MLang.LT(TransactionPlan.EXPIRY, now ) );
    Long expiredPlans = planDAO.select(new foam.mlang.sink.Count()).getValue();
    planDAO.select( new AbstractSink() {

        public void put(Object o, Detachable d) {
          TransactionPlan plan = (TransactionPlan) o;
          planDAO.remove(plan.getId());
        }
    });
    print("TransactionPlan Expiry Cron removed " + expiredPlans + " expired plans at " + now );
    logger = x.get("logger");
    logger.info(new Object[] {"TransactionPlan Expiry Cron removed " + expiredPlans + " expired plans at " + now});
  """
})
