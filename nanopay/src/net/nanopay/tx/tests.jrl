// net.nanopay.tx.QuotePlanTest
p({"class":"foam.nanos.test.Test","passed":12,"id":"net.nanopay.tx.QuotePlanTest","lastRun":"2018-08-29T20:02:07.470Z","lastDuration":42,"code":"userDAO        = x.get(\"userDAO\");\naccountDAO     = x.get(\"accountDAO\");\ninstitutionDAO = x.get(\"institutionDAO\");\ntransactionDAO = x.get(\"localTransactionDAO\");\nbalanceDAO     = x.get(\"balanceDAO\");\nquoteDAO       = x.get(\"localTransactionQuotePlanDAO\");\nliquiditySettingsDAO = x.get(\"liquiditySettingsDAO\");\n\nRandom ran = new Random();\n\n//Create a Test User\nuser = new foam.nanos.auth.User();\nuser.setId(Long.valueOf(850));\nuser.setGroup(\"business\");\nuser.setOrganization(\"Balony\");\nuser.setEmailVerified(true);\nuser.setFirstName(\"test8\");\nuser.setLastName(\"TEST8\");\nuser.setEmail(\"test8@t.com\");\nuserDAO.put(user);\n\n//Create a Test User\nuser = new foam.nanos.auth.User();\nuser.setId(Long.valueOf(855));\nuser.setGroup(\"business\");\nuser.setOrganization(\"Balony\");\nuser.setEmailVerified(true);\nuser.setFirstName(\"test9\");\nuser.setLastName(\"TEST9\");\nuser.setEmail(\"test9@t.com\");\nuserDAO.put(user);\n\n//Grab Users for test\ntestDigital1        =(foam.nanos.auth.User) userDAO.find(850);\ntestDigital2        =(foam.nanos.auth.User) userDAO.find(855);\nadmin               =(foam.nanos.auth.User) userDAO.find(1350);\n\n//Grab Digital Accounts for test\nuserDigitalAccount  = net.nanopay.account.DigitalAccount.findDefault(x,admin,\"CAD\");\ntestDigitalAccount1 = net.nanopay.account.DigitalAccount.findDefault(x,testDigital1,\"CAD\");\ntestDigitalAccount2 = net.nanopay.account.DigitalAccount.findDefault(x,testDigital2,\"CAD\");\n\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(userDigitalAccount.getId());\nliquiditySettingsDAO.put(ls);\n\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(testDigitalAccount1.getId());\nliquiditySettingsDAO.put(ls);\n\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(testDigitalAccount2.getId());\nliquiditySettingsDAO.put(ls);\n\n//Create a bank account to User 1350\ncaaccount1 = new net.nanopay.bank.CABankAccount();\ncaaccount1.setAccountNumber(\"\"+(ran.nextInt(1000000)+10000));\ncaaccount1.setInstitutionNumber(\"\"+(ran.nextInt(899) + 100));\ncaaccount1.setBranchId(\"\"+(ran.nextInt(89999) + 10000));\ncaaccount1.setOwner(1350);\ncaaccount1.setName(\"\"+ran.nextInt(1000));\ncaaccount1.setStatus(net.nanopay.bank.BankAccountStatus.VERIFIED);\ncaaccount1.setDenomination(\"CAD\");\ncaaccount1.setId(1351);\ncaaccount1 = accountDAO.put(caaccount1);\n\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(caaccount1.getId());\nliquiditySettingsDAO.put(ls);\n\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(userDigitalAccount.getId());\ntransaction.setSourceAccount(caaccount1.getId());\ntransaction.setAmount(300000);\ntransaction.setType(net.nanopay.tx.TransactionType.CASHIN);\ntransaction.setStatus(net.nanopay.tx.model.TransactionStatus.COMPLETED);\n\nquote = new net.nanopay.tx.TransactionQuote.Builder(x).setRequestTransaction(transaction).build();\nquote = quoteDAO.put(quote);\ntest(quote != null, \"Quote returned\");\nprint(\"quote: \"+quote);\ntest(quote.getPlan() != null, \"Plan created and selected.\");\nplan = quote.getPlan();\nprint(\"plan: \"+plan);\ntest(plan.hasError() == false, \"Plan does not have error.\");\ntest(plan.getQueued()[0] instanceof net.nanopay.tx.alterna.AlternaCITransaction, \"Plan[0] AlternaCITransaction\");\ntransaction = transactionDAO.put(plan);\ntest(transaction == null, \"CABankAccount/DigitalAccount -> AlternaTransaction COMPLETED\");\n\n//Create a bank account to User 855\ncaaccount2 = new net.nanopay.bank.CABankAccount();\ncaaccount2.setAccountNumber(\"\"+(ran.nextInt(1000000)+10000));\ncaaccount2.setInstitutionNumber(\"\"+(ran.nextInt(899) + 100));\ncaaccount2.setBranchId(\"\"+(ran.nextInt(89999) + 10000));\ncaaccount2.setOwner(855);\ncaaccount2.setName(\"\"+ran.nextInt(1000));\ncaaccount2.setStatus(net.nanopay.bank.BankAccountStatus.VERIFIED);\ncaaccount2.setDenomination(\"CAD\");\ncaaccount2 = accountDAO.put(caaccount2);\n\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(caaccount2.getId());\nliquiditySettingsDAO.put(ls);\n\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(caaccount2.getId());\ntransaction.setSourceAccount(caaccount1.getId());\ntransaction.setAmount(300);\n\nquote = new net.nanopay.tx.TransactionQuote.Builder(x).setRequestTransaction(transaction).build();\nquote = quoteDAO.put(quote);\ntest(quote != null, \"Quote returned\");\nplan = quote.getPlan();\ntest(plan.hasError() == false, \"Plan does not have error.\");\ntransactions = plan.queued;\ntest(transactions.length >= 1, \"Plan transactions size >= 1\");\ntest(transactions[0] instanceof net.nanopay.tx.alterna.AlternaTransaction, \"Plan transactions[0] AlternaTransaction\");\n\ntransaction = transactionDAO.put(plan);\n\nbalance = userDigitalAccount.findBalance(x);\ntest(balance > 0, \"balance > 0\");\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(testDigitalAccount2.getId());\ntransaction.setSourceAccount(userDigitalAccount.getId());\ntransaction.setAmount(balance);\n\nquote = quoteDAO.put(transaction);\nplan = quote.getPlan();\ntest(plan.hasError() == false, \"Plan does not have errors\");\ntransaction = transactionDAO.put(plan);\ntest(transaction == null, \"DigitalAccount/DigitalAccount -> COMPLETED\");\n","output":"SUCCESS: Quote returned\nquote: TransactionQuote[PlanTransaction[AlternaCITransaction(id: , type: CASHIN, status: COMPLETED), null, ], ]\nSUCCESS: Plan created and selected.\nplan: PlanTransaction[AlternaCITransaction(id: , type: CASHIN, status: COMPLETED), null, ]\nSUCCESS: Plan does not have error.\nSUCCESS: Plan[0] AlternaCITransaction\nSUCCESS: CABankAccount/DigitalAccount -> AlternaTransaction COMPLETED\nSUCCESS: Quote returned\nSUCCESS: Plan does not have error.\nSUCCESS: Plan transactions size >= 1\nSUCCESS: Plan transactions[0] AlternaTransaction\nSUCCESS: balance > 0\nSUCCESS: Plan does not have errors\nSUCCESS: DigitalAccount/DigitalAccount -> COMPLETED\n"})
