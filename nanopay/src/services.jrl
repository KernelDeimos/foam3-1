p({"class":"foam.nanos.boot.NSpec", "name":"agentAuth",                        "serviceScript":"return new net.nanopay.auth.BusinessAgentAuthService.Builder(x).setDelegate(new foam.nanos.auth.AgentUserAuthService(x)).build();"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "auth",
  "serve": true,
  "authenticate": false,
  "boxClass": "foam.nanos.auth.AuthServiceSkeleton",
  "serviceScript": """
    nuagas = new net.nanopay.auth.NanopayUserAndGroupAuthService(x);
    cache  = new foam.nanos.auth.CachingAuthService(nuagas);
    // Uncomment the line below when CRUNCH is mature enough to replace our current system.
    // capas  = new foam.nanos.auth.CapabilityAuthService.Builder(x).setDelegate(cache).build();
    ecas   = new foam.nanos.auth.EnabledCheckAuthService.Builder(x).setDelegate(cache).build();
    cas    = new net.nanopay.meter.compliance.ComplianceAuthService.Builder(x).setDelegate(ecas).build();
    peas   = new foam.nanos.auth.PasswordExpiryAuthService.Builder(x).setDelegate(cas).build();
    laas   = new net.nanopay.security.auth.LoginAttemptAuthService.Builder(x).setDelegate(peas).build();
    iplas  = new net.nanopay.security.auth.IPLoggingAuthService.Builder(x).setDelegate(laas).build();
    bas    = new net.nanopay.auth.BusinessAuthService.Builder(x).setDelegate(iplas).build();
    tfas   = new foam.nanos.auth.twofactor.TwoFactorAuthService.Builder(x).setDelegate(bas).build();
    sas    = new foam.nanos.auth.SystemAuthService.Builder(x).setDelegate(tfas).build();
    return sas;
  """,
  "client": """
    {
      "class": "foam.nanos.auth.CachedAuthServiceProxy",
      "delegate": {
        "class": "foam.nanos.auth.ClientLoginAuthService"
      }
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "http",
  "lazy": false,
  "service": {
    "class": "foam.nanos.jetty.HttpServer",
    "port": 8080,
    "forwardedForProxyWhitelist": [],
    "welcomeFiles": ["welcome"],
    "servletMappings": [{
      "class": "foam.nanos.servlet.ServletMapping",
      "servletObject": {
        "class": "foam.nanos.servlet.VirtualHostRoutingServlet",
        "hostMapping": {
          "ablii": "/nanopay/src/net/nanopay/sme/index.html",
          "localhost": "/nanopay/src/net/nanopay/index.html",
          "merchantpos": "/nanopay/src/net/nanopay/merchant/index.html"
        },
        "defaultHost": "localhost"
      },
      "pathSpec": "/welcome"
    }, {
      "class": "foam.nanos.servlet.ServletMapping",
      "className": "foam.nanos.http.NanoRouter",
      "pathSpec": "/service/*"
    }, {
      "class": "foam.nanos.servlet.ServletMapping",
      "className": "foam.nanos.servlet.ImageServlet",
      "pathSpec": "/images/*",
      "initParameters": {
        "paths": "images:merchant/src/net/nanopay/merchant/images:nanopay/src/net/nanopay/images:foam2/src/foam/support/images:foam2/src/foam/u2/images"
      }
    }, {
      "class": "foam.nanos.servlet.ServletMapping",
      "className": "org.eclipse.jetty.servlet.DefaultServlet",
      "pathSpec": "/*",
      "initParameters": {
        "pathInfoOnly": "true",
        "welcomeServlets": "true",
        "dirAllowed": "false"
      }
    }],
    "errorMappings": [{
      "class": "foam.nanos.servlet.ErrorPageMapping",
      "errorCode": 404,
      "location": "/nanopay/src/net/nanopay/ui/errorPage/errorPage.html"
    }, {
      "class": "foam.nanos.servlet.ErrorPageMapping",
      "exceptionType": "javax.ws.rs.NotAuthorizedException",
      "location": "/nanopay/src/net/nanopay/ui/unauthorizedAccess/unauthorizedAccess.html"
    }, {
      "class": "foam.nanos.servlet.ErrorPageMapping",
      "exceptionType": "java.lang.Throwable",
      "location": "/nanopay/src/net/nanopay/ui/errorPage/errorPage.html"
    }],
    "filterMappings": [{
      "class": "foam.nanos.servlet.FilterMapping",
      "filterClass": "net.nanopay.security.csp.CSPFilter",
      "pathSpec": "/*",
      "initParameters": {
        "CONTENT_SECURITY_POLICY": """
          default-src 'none';
          child-src 'self';
          worker-src 'self';
          manifest-src 'self' /favicon/manifest.json;
          connect-src 'self' data: blob: filesystem: ws:;
          script-src 'self' https://cdn.plaid.com/link/v2/stable/link-initialize.js 'unsafe-eval' 'sha256-HY1JzEwuxkis4xx0ggY23gbYY/MCEAE1T6+OQnWS2vA=' 'sha256-NiNrLgJ8wbIXIi5saiR3XTd1Mxm4k0nju66GJsw4b9U=' 'sha256-FLYDXBkz4oo/H5jEfYXqAGYUwERY44OO1yznaMCdMiU=' 'sha256-G3UfiJBy6rwOk3glkBQuQDFA7IoCtiOT56gTh+IfNF0=';
          style-src 'self' https://fonts.googleapis.com/css https://fonts.googleapis.com/icon data: chrome-extension-resource: 'unsafe-inline';
          font-src 'self' https://fonts.gstatic.com data: chrome-extension-resource:;
          img-src 'self' data: blob: filesystem:;
          media-src * data: blob: filesystem:;
          object-src 'self' data: blob: filesystem:;
          frame-src 'self' https://cdn.plaid.com/link/ nanopay.net nanopay.net data: chrome-extension-resource:;
          report-uri /service/CSPReportWebAgent;
        """
      }
    }]
  }
})

p({"class":"foam.nanos.boot.NSpec", "name":"branchDAO",                        "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorize(false).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"branches\").setSeqNo(true).setOf(net.nanopay.model.Branch.getOwnClassInfo()).build();","client":"{\"of\":\"net.nanopay.model.Branch\"}"})

p({
  "class":"foam.nanos.boot.NSpec", 
  "name":"dateAndPlaceOfBirthDAO",           
  "serve":true,  
  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setPm(true)
    .setPipelinePm(true)
    .setJournalName("placesOfBirths")
    .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
    .setSeqNo(true)
    .setOf(net.nanopay.model.DateAndPlaceOfBirth.getOwnClassInfo())
    .build();
  """,
  "client":"{\"of\":\"net.nanopay.model.DateAndPlaceOfBirth\"}"
})

p({
  "class":"foam.nanos.boot.NSpec", 
  "name":"businessSectorDAO",                
  "serve":true,  
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(false)
      .setPm(true)
      .setPipelinePm(true)
      .setReadOnly(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("businessSectors")
      .setSeqNo(true)
      .setOf(net.nanopay.model.BusinessSector.getOwnClassInfo())
      .build();
  """,
  "client":"{\"of\":\"net.nanopay.model.BusinessSector\"}"
})

p({
  "class":"foam.nanos.boot.NSpec", 
  "name":"businessTypeDAO",                  
  "serve":true,
  "authenticate":true, 
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("businessType"))
      .setSeqNo(true)
      .setJournalName("businessTypes")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setOf(net.nanopay.model.BusinessType.getOwnClassInfo())
      .build();
  """,
  "client":"{\"of\":\"net.nanopay.model.BusinessType\"}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"bankAccountVerification",          "serve":true,  "boxClass":"net.nanopay.cico.service.BankAccountVerifierSkeleton", "serviceClass":"net.nanopay.cico.service.BankAccountVerifierService","client":"{ \"class\":\"net.nanopay.cico.service.ClientBankAccountVerifierService\", \"delegate\": { \"class\":\"foam.box.SessionClientBox\", \"url\":\"service/bankAccountVerification\", \"delegate\":{\"class\":\"foam.box.HTTPBox\", \"url\":\"service/bankAccountVerification\"} } }"})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"exchangeRateDAO",
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setSeqNo(true)
      .setAuthorize(false)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("exchangeRates")
      .setIndex(new foam.core.PropertyInfo[] {net.nanopay.fx.ExchangeRate.FROM_CURRENCY, net.nanopay.fx.ExchangeRate.TO_CURRENCY})
      .setOf(net.nanopay.fx.ExchangeRate.getOwnClassInfo())
      .build();
  """,
  "client":"{\"of\":\"net.nanopay.fx.ExchangeRate\",\"requestResponseCaching\":true}"
})

p({
  "class":"foam.nanos.boot.NSpec", 
  "name":"identificationDAO",                
  "serve":true,  
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setAuthorize(false)
      .setSeqNo(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("identifications")
      .setOf(net.nanopay.model.Identification.getOwnClassInfo())
      .build();
  """, 
  "client":"{\"of\":\"net.nanopay.model.Identification\"}"
})

p({
  "class": "foam.nanos.boot.NSpec", 
  "name": "deviceDAO",                        
  "serve": true,  
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.retail.model.Device.getOwnClassInfo())
      .setJournalName("devices")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setPm(true)
      .setPipelinePm(true)
      .setSeqNo(true)
      .setAuthorize(false)
      .setDecorator(new net.nanopay.retail.PreventDuplicateDeviceDAO(x, null))
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.retail.model.Device\"}"
})

p({
  "class": "foam.nanos.boot.NSpec", 
  "name": "invoiceDAO",                       
  "serve": true,  
  "serviceScript":
  """
    import net.nanopay.contacts.InvoiceToContactDAO; 
    import foam.dao.history.HistoryDAO; 
    import net.nanopay.security.HashingJDAO; 
    import net.nanopay.auth.PublicUserInfoDAO; 
    import net.nanopay.invoice.AuthenticatedInvoiceDAO; 
    import net.nanopay.invoice.InvoiceNotificationDAO; 
    import net.nanopay.invoice.InvoiceVoidEmailDAO; 
    import net.nanopay.invoice.AutoDepositPendingAcceptance; 
    import net.nanopay.invoice.PreventRemoveInvoiceDAO; 

    dao = new net.nanopay.invoice.PreventRemoveInvoiceDAO(x, null); 
    dao = new InvoiceNotificationDAO.Builder(x).setDelegate(dao).build(); 
    dao = new AutoDepositPendingAcceptance(x, dao); 
    dao = new InvoiceVoidEmailDAO(x, dao); 
    dao = new PublicUserInfoDAO(x, false, "payerId", "payer", dao); 
    dao = new PublicUserInfoDAO(x, false, "payeeId", "payee", dao); 
    dao = new InvoiceToContactDAO(x, dao); 
    dao = new HistoryDAO(x, \"invoiceHistoryDAO\", dao); 
    dao = new AuthenticatedInvoiceDAO(x, dao); 

    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.invoice.model.Invoice.getOwnClassInfo())
      .setDecorator(dao)
      .setValidated(true)
      .setSeqNo(true)
      .setJournalName("invoices")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setAuthorize(false)
      .build();
  """, 
  "client": "{\"of\":\"net.nanopay.invoice.model.Invoice\",\"remoteListenerSupport\": false,\"decorators\": [{\"class\":\"foam.nanos.fs.FileArrayDAODecorator\"}]}",
})

p({"class":"foam.nanos.boot.NSpec", "name":"invoicePaymentService",            "serve":true,  "serviceScript":"return new net.nanopay.invoice.service.DefaultInvoicePaymentService(x);","boxClass":"net.nanopay.invoice.service.InvoicePaymentServiceSkeleton","client":"{\"class\":\"net.nanopay.invoice.service.ClientInvoicePaymentService\"}"})

p({
  "class": "foam.nanos.boot.NSpec", 
  "name": "txnProcessorDAO",                  
  "serve": true,  
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.TxnProcessor.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .setJournalName("txnProcessors")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setAuthorize(false)
      .build();
  """, 
  "client": "{\"of\":\"net.nanopay.tx.TxnProcessor\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"securitiesDAO",
  "serve":true,
  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
    .setJournalName("securities")
    .setPm(true)
    .setPipelinePm(true)
    .setOf(net.nanopay.exchangeable.Security.getOwnClassInfo())
    .setName("security")
    .setIndex(new foam.core.PropertyInfo[] {net.nanopay.exchangeable.Security.NAME})
    .build();
  """, 
  "client":
  """
  {
    "of":"net.nanopay.exchangeable.Security",
    "cache":true
  }
  """
})

p({
  "class": "foam.nanos.boot.NSpec", 
  "name": "localCorridorDAO",                 
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.fx.Corridor.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("corridors")
      .setPm(true)
      .setPipelinePm(true)
      .setAuthorize(false)
      .build();
  """
})

p({
  "class": "foam.nanos.boot.NSpec", 
  "name": "corridorDAO",                      
  "serve": true,  
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.fx.Corridor.getOwnClassInfo())
      .setPm(true)
      .setEnableInterfaceDecorators(false)
      .setPipelinePm(true)
      .setInnerDAO(x.get("localCorridorDAO"))
      .setAuthorize(true)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.fx.Corridor\"}"
})

p({
  "class":"foam.nanos.boot.NSpec", 
  "name":"feeDAO",                           
  "serve":true,  
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setJournalName("fees")
      .setOf(net.nanopay.tx.model.Fee.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """, 
  "client":
  """
  {
    "of":"net.nanopay.tx.model.Fee"
  }
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"brokerDAO",                        "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new foam.dao.java.JDAO(x, net.nanopay.model.Broker.getOwnClassInfo(), \"brokers\")));", "client":"{\"of\":\"net.nanopay.model.Broker\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"recurringInvoiceDAO",              "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new foam.dao.SequenceNumberDAO(new net.nanopay.security.HashingJDAO(x, \"SHA-256\", false, true, net.nanopay.invoice.model.RecurringInvoice.getOwnClassInfo(), \"recurringInvoices\"))));","client":"{\"of\":\"net.nanopay.invoice.model.RecurringInvoice\"}"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "alterna",
  "serviceClass": "net.nanopay.tx.alterna.AlternaWebAgent"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localTokenDAO",
  "authenticate": false,
  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setAuthorize(false)
    .setPm(true)
    .setPipelinePm(true)
    .setSeqNo(true)
    .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
    .setJournalName("token")
    .setOf(foam.nanos.auth.token.Token.getOwnClassInfo())
    .build();
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"tokenDAO",
  
  "serve":true,
  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setInnerDAO(x.get("localTokenDAO"))
    .setOf(foam.nanos.auth.token.Token.getOwnClassInfo())
    .build();
  """,
  "client":
  """
  {
    "of":"foam.nanos.auth.token.Token"
  }
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"smsToken",                         "serve":true,  "serviceClass":"net.nanopay.auth.sms.PhoneVerificationTokenService","boxClass":"foam.nanos.auth.token.TokenServiceSkeleton","client":"{\"class\":\"foam.nanos.auth.token.ClientTokenService\"}","service":{"class":"net.nanopay.auth.sms.PhoneVerificationTokenService","accountSid":"ACe4c949440e9f057f4701e23bb82e5059","authToken":"fcb37f309069583b874aa7abcd61aac8","phoneNumber":"+14378000353"}})
p({"class":"foam.nanos.boot.NSpec", "name":"push",                             "serviceClass":"foam.nanos.notification.push.FirebasePushService","service":{"class":"foam.nanos.notification.push.FirebasePushService","apiKey":"AAAAMKWTPTs:APA91bFLHRdVt76aQ-kZ8RBPS1ytYjmO-YsDfSktiN3Ka7U_jpRmt_U7HAs4RNL8bwPEiseZaiecatJDYs3DUp4K3vaq-zx6jg-RaH4xqGjo4KDk-VWDLtz9dgFrySSBcpC2F5DjZJqcuATPI0KMwQLE3KzRoSRQDg"}})

p({
  "class": "foam.nanos.boot.NSpec", 
  "name": "bareUserDAO",                      
  "lazy": false,
  "description": "Bare boned userDAO wrapped with essential decorators.", 
  "authenticate": false, 
  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setIndex(new foam.core.PropertyInfo[] {foam.nanos.auth.User.EMAIL})
    .setPm(true)
    .setPipelinePm(true)
    .setSeqNo(true)
    .setSeqStartingValue(1000)
    .setOf(foam.nanos.auth.User.getOwnClassInfo())
    .setDecorator(new foam.dao.history.HistoryDAO(x, "userHistoryDAO", null))
    .setJournalName("users")
    .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
    .setAuthorize(false)
    .build();
  """,
  "client": """
    { "of":"foam.nanos.auth.User" }
  """
})

p({
  "class": "foam.nanos.boot.NSpec", 
  "name": "localUserDAO",                     
  "lazy": false, 
  "description": "Server side userDAO wrapped in decorators.", 
  "serviceScript":
  """
    dao = new net.nanopay.contacts.AddExternalContactToken(x, null);
    dao = new foam.nanos.auth.UserPasswordHashingDAO(x, dao);
    dao = new net.nanopay.business.DeleteAgentJunctionsOnUserDeleteDAO.Builder(x).setDelegate(dao).build();
    dao = new net.nanopay.security.auth.LogoutDisabledUserDAO.Builder(x).setDelegate(dao).build();
    dao = new net.nanopay.meter.AdditionalDocumentsUpdatedIpHistoryDAO.Builder(x).setDelegate(dao).build();
    dao = new net.nanopay.onboarding.email.UserCompliancePassEmailDAO.Builder(x).setDelegate(dao).build();
    dao = new net.nanopay.contacts.UpdateSignUpStatusDAO(x, dao);
    dao = new net.nanopay.onboarding.CreateBusinessDAO(x, dao);
    dao = new net.nanopay.onboarding.email.RegistrationSubmissionEmailDAO(x, dao);
    dao = new net.nanopay.auth.email.EmailVerificationDAO(x, dao);
    dao = new foam.nanos.geocode.GoogleMapsGeocodingDAO(x, "AIzaSyDIf0KB9lok7rg0HU9Q92uK2JuOXpXNnr0", foam.nanos.auth.User.ADDRESS, dao);
    dao = new net.nanopay.admin.AccountStatusUserDAO(x, dao);
    dao = new net.nanopay.contacts.PreventDuplicateContactEmailDAO(x, dao);
    dao = new net.nanopay.auth.email.PreventDuplicateEmailDAO(x, dao);
    dao = new net.nanopay.auth.email.CheckEmailWhitelistDAO(x, dao);

    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.auth.User.getOwnClassInfo())
      .setEnableInterfaceDecorators(false)
      .setRuler(true)
      .setAuthorize(false)
      .setValidated(true)
      .setInnerDAO(x.get("bareUserDAO"))
      .setDecorator(dao)
      .build();
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "userDAO",
  "serve": true,  
  "description": "Client authenticated userDAO", 
  "authenticate": false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
        .setPm(true)
        .setPipelinePm(true)
        .setValidated(true)
        .setValidator(new foam.nanos.auth.validators.UserGroupAndSpidValidator()) 
        .setOf(foam.nanos.auth.User.getOwnClassInfo())
        .setInnerDAO(x.get("localUserDAO"))
        .build();
  """,
  "client":
  """
  {
    "of": "foam.nanos.auth.User",
    "cache": false,
    "decorators": [
      {
        "class":"foam.nanos.fs.FileDAODecorator"
      },
      {
        "class":"foam.nanos.fs.FileArrayDAODecorator"
      }
    ]
  }
  """
})


p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localUserUserDAO",
  "description":"A filter on localUserDAO that filters out all subclasses of User.",
  "authenticate": false,
  "serviceScript":
  """
    foam.mlang.predicate.Predicate[] predicates = {
      foam.mlang.MLang.NOT(foam.mlang.MLang.INSTANCE_OF(net.nanopay.model.Business.class)), 
      foam.mlang.MLang.NOT(foam.mlang.MLang.INSTANCE_OF(net.nanopay.contacts.Contact.class)) 
    };
    inner = x.get("localUserDAO");
    filtered = inner.where(new foam.mlang.predicate.And(predicates));
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setOf(foam.nanos.auth.User.getOwnClassInfo())
      .setInnerDAO(filtered)
      .setAuthorize(false)
      .build();
  """,
  "client":
  """
  {
    "of":"foam.nanos.auth.User",
    "cache":true,"decorators": [
      {
        "class":"foam.nanos.fs.FileDAODecorator"
      },
      {
        "class":"foam.nanos.fs.FileArrayDAODecorator"
      }
    ]
  }
  """
})



p({
  "class": "foam.nanos.boot.NSpec",
  "name":"userUserDAO",
  "serve":true,
  "description":"Adds authorization to localUserUserDAO and is served to the client",
  "authenticate": false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setInnerDAO(x.get("localUserUserDAO"))
      .setPm(true)
      .setPipelinePm(true)
      .setOf(foam.nanos.auth.User.getOwnClassInfo())
      .build();
  """,
  "client":
  """
  {
    "of":"foam.nanos.auth.User",
    "cache":true,
    "decorators": [
      {
        "class":"foam.nanos.fs.FileDAODecorator"
      },
      {
        "class":"foam.nanos.fs.FileArrayDAODecorator"
      }
    ]
  }
  """
})


p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localBusinessDAO",
  "description":"A Business filter on localUserDAO",
  "authenticate": false,
  "serviceScript":
  """
    foam.mlang.predicate.Predicate predicate = foam.mlang.MLang.INSTANCE_OF(net.nanopay.model.Business.class);
    inner = (new net.nanopay.contacts.UpdateExternalContactDAO(x, x.get(\"localUserDAO\"))).where(predicate);
    nuoe = new net.nanopay.onboarding.email.NewUserOnboardedEmailDAO.Builder(x).setDelegate(inner).build();
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(false)
      .setInnerDAO(nuoe)
      .setOf(net.nanopay.model.Business.getOwnClassInfo())
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.model.Business\", \"remoteListenerSupport\": false,\"decorators\": [{\"class\":\"foam.nanos.fs.FileDAODecorator\"},{\"class\":\"foam.nanos.fs.FileArrayDAODecorator\"}]}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "publicBusinessDAO",
  "serve": true,
  "description": "A read-only version of localBusinessDAO that only returns a few properties of businesses that have been marked as public.",
  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setAuthorize(false)
    .setRuler(false)
    .setInnerDAO(x.get("localBusinessDAO"))
    .setEnableInterfaceDecorators(false)
    .setDecorator(new net.nanopay.auth.BusinessToPublicBusinessInfoDAO.Builder(x).setDelegate(null).build())
    .setOf(net.nanopay.model.Business.getOwnClassInfo())
    .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.auth.PublicBusinessInfo",
    "remoteListenerSupport": false
  }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"businessDAO",
  "serve":true,
  "description":"Adds authorization to localBusinessDAO and is served to the client",
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.model.Business.getOwnClassInfo())
      .setInnerDAO(x.get("localBusinessDAO"))
      .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.model.Business",
    "remoteListenerSupport": false,
    "decorators": [
      {
        "class":"foam.nanos.fs.FileDAODecorator"
      },
      {
        "class":"foam.nanos.fs.FileArrayDAODecorator"
      }
    ]
  }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "userHistoryDAO",
  "description": "DAO containing any modifications made to users",
  "serve": true,
  "lazy": false,
  "authNotes": "Protected by service-level access control. This service requires the 'service.userHistoryDAO' permission to access.",
  "serviceScript": 
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(false)
      .setSeqNo(true)
      .setSeqPropertyName("seqNo")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("userHistory")
      .setOf(foam.dao.history.HistoryRecord.getOwnClassInfo())
      .build()
      .orderBy(foam.mlang.MLang.DESC(foam.dao.history.HistoryRecord.TIMESTAMP));
  """,
  "client": 
  """
    { "of": "foam.dao.history.HistoryRecord" }
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"alternaSftp",                      "serve":true,  "service":{"class":"net.nanopay.tx.alterna.AlternaSFTPService","host":"ftp.eftcanada.com","port":22,"username":"eftcadtest2","password":"1a2$3d4f","directory":"/"}, "boxClass":"net.nanopay.tx.alterna.SFTPServiceSkeleton","client":"{ \"class\":\"net.nanopay.tx.alterna.client.ClientAlternaSFTPService\", \"delegate\": { \"class\":\"foam.box.HTTPBox\", \"url\":\"service/alternaSftp\" } }"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "deviceAuth",
  "serve": true,
  "authenticate": false,
  "boxClass": "foam.nanos.auth.AuthServiceSkeleton",
  "serviceScript": 
  """
    return new net.nanopay.auth.DeviceAuthService(x, x.get("auth"));
  """,
  "client": 
  """
    {
      "class": "foam.nanos.auth.ClientLoginAuthService"
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec", 
  "name": "institutionDAO",                   
  "serve": true,  
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setRuler(false)
      .setAuthorize(false)
      .setSeqNo(true)
      .setJournalName("institutions")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setOf(net.nanopay.payment.Institution.getOwnClassInfo())
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.payment.Institution\"}"
})

p({
  "class": "foam.nanos.boot.NSpec", 
  "name": "institutionPurposeCodeDAO",        
  "serve": true,  
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setRuler(false)
      .setAuthorize(false)
      .setSeqNo(true)
      .setJournalName("institutionPurposeCodes")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setOf(net.nanopay.payment.InstitutionPurposeCode.getOwnClassInfo())
      .build();
  """,
  "client":"{\"of\":\"net.nanopay.payment.InstitutionPurposeCode\"}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"flinksAuth",                       "serve":true,  "boxClass":"net.nanopay.flinks.FlinksAuthSkeleton", "serviceClass":"net.nanopay.flinks.FlinksAuthService","client":"{\"class\":\"net.nanopay.flinks.ClientFlinksAuthService\",\"delegate\":{\"class\":\"foam.box.HTTPBox\", \"url\":\"service/flinksAuth\"}}"})
p({"class":"foam.nanos.boot.NSpec", "name":"flinksCredentials",                "lazy":false, "service":{"class":"net.nanopay.flinks.model.FlinksCredentials"}})
p({"class":"foam.nanos.boot.NSpec", "name":"appConfig",                        "description":"","lazy":false,"parameters":false,"pm":true,"service":{"class":"foam.nanos.app.AppConfig","privacy":"Privacy Policy","privacyUrl":"https://www.nanopay.net/wp-content/uploads/2019/04/nanopay-Privacy-Policy.pdf","copyright":"Copyright © 2017-@{currentYear} nanopay Corp. All rights reserved.","urlLabel":"Powered by nanopay","termsAndCondLabel":"Terms and Conditions","termsAndCondLink":"https://nanopay.net/wp-content/uploads/2019/04/nanopay-Terms-of-Service.pdf","mode":0,"appLink":"","playLink":"https://play.google.com/store?hl=en","enableInternationalPayment":true}})
p({"class":"foam.nanos.boot.NSpec", "name":"EFTReturnFileCredentials",         "lazy":false, "service":{"class":"net.nanopay.cico.model.EFTReturnFileCredentials"}})
p({"class":"foam.nanos.boot.NSpec", "name":"blobService",                      "serve":true,  "client": "{ \"class\":\"foam.blob.RestBlobService\", \"serviceName\":\"service/httpFileService\" }"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "qrcode",
  "authenticate": false,
  "serviceClass": "net.nanopay.retail.QrCodeWebAgent"
})

p({"class":"foam.nanos.boot.NSpec", "name":"liquiditySettingsDAO",             "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, \n    new foam.dao.ValidatingDAO(x,\n        new foam.dao.SequenceNumberDAO(\n            new foam.nanos.analytics.FoldManagerDAODecorator.Builder(x)\n                .setFm(new foam.nanos.analytics.DAOFoldManager.Builder(x)\n                  .setDao((foam.dao.DAO) x.get(\"liquidityThresholdCandlestickDAO\"))\n                  .setPeriodLengthMs(60 * 60 * 1000)\n                  .build())\n                .setDelegate(new foam.dao.java.JDAO(x, net.nanopay.liquidity.LiquiditySettings.getOwnClassInfo(), \"liquiditySettings\"))\n                .build()),\n        new net.nanopay.liquidity.LiquiditySettingValidator())));", "client":"{\"of\":\"net.nanopay.liquidity.LiquiditySettings\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"invoiceHistoryDAO",                "serve":true,  "serviceScript":"foam.dao.DAO hashingDAO = new net.nanopay.security.HashingJDAO(x, \"SHA-256\", false, true, foam.dao.history.HistoryRecord.getOwnClassInfo(), \"invoiceHistory\");\n  return new foam.dao.EasyDAO.Builder(x).setAuthorize(false).setInnerDAO(hashingDAO).setSeqNo(true).setSeqPropertyName(\"seqNo\").setOf(foam.dao.history.HistoryRecord.getOwnClassInfo()).build();","client":"{\"of\":\"foam.dao.history.HistoryRecord\"}"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "xeroWebAgent",
  "serviceClass": "net.nanopay.accounting.xero.XeroWebAgent"
})

p({
  "class":"foam.nanos.boot.NSpec", 
  "name":"xeroConfigDAO",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setOf(net.nanopay.accounting.xero.XeroConfig.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName(\"xeroConfig\")
      .setAuthorize(false)
      .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.accounting.xero.XeroConfig"
  }
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"xeroService",                      "serve":true,  "authenticate":false, "serviceClass":"net.nanopay.accounting.xero.XeroIntegrationService","boxClass":"net.nanopay.accounting.IntegrationServiceSkeleton","client":"{\"class\":\"net.nanopay.accounting.ClientIntegrationService\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"xeroTokenDAO",                     "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new net.nanopay.security.HashingJDAO(x, \"SHA-256\", false, true, net.nanopay.accounting.xero.XeroToken.getOwnClassInfo(), \"xeroToken\")));", "client":"{\"of\":\"net.nanopay.accounting.xero.XeroToken\"}"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "quickbooksWebAgent",
  "serviceClass": "net.nanopay.accounting.quickbooks.QuickbooksWebAgent"
})

p({"class":"foam.nanos.boot.NSpec", "name":"quickbooksAuth",                   "serve":true,  "authenticate":false, "service":{"class":"net.nanopay.accounting.quickbooks.QuickbooksOauth"}})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"quickbooksConfigDAO",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("quickbooksConfig")
      .setAuthorize(false)
      .setOf(net.nanopay.accounting.quickbooks.QuickbooksConfig.getOwnClassInfo())
      .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.accounting.quickbooks.QuickbooksConfig"
  }
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"quickbooksService",                "serve":true,  "authenticate":false, "serviceClass":"net.nanopay.accounting.quickbooks.QuickbooksIntegrationService","boxClass":"net.nanopay.accounting.IntegrationServiceSkeleton","client":"{\"class\":\"net.nanopay.accounting.ClientIntegrationService\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"quickbooksTokenDAO",               "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new net.nanopay.security.HashingJDAO(x, \"SHA-256\", false, true, net.nanopay.accounting.quickbooks.QuickbooksToken.getOwnClassInfo(), \"quickbooksToken\")));", "client":"{\"of\":\"net.nanopay.accounting.quickbooks.QuickbooksToken\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"AccountingContactEmailCacheDAO",   "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new foam.dao.java.JDAO(x, net.nanopay.accounting.AccountingContactEmailCache.getOwnClassInfo(), \"accountingContactEmailCache\")));", "client":"{\"of\": \"net.nanopay.accounting.AccountingContactEmailCache\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"accountingBankAccountCacheDAO",    "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new foam.dao.java.JDAO(x, net.nanopay.accounting.AccountingBankAccount.getOwnClassInfo(), \"AccountingBankAccountCache\")));", "client":"{\"of\": \"net.nanopay.accounting.AccountingBankAccount\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"accountingResultDAO",              "serve":true,  "serviceScript":"return new foam.dao.SequenceNumberDAO(new foam.dao.java.JDAO(x, net.nanopay.accounting.ResultResponseWrapper.getOwnClassInfo(), \"AccountingResultResponse\"));",  "client":"{\"of\": \"net.nanopay.accounting.ResultResponseWrapper\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"accountingReportDAO",              "serve":true,  "serviceScript":"return new foam.dao.SequenceNumberDAO(new foam.dao.java.JDAO(x, net.nanopay.accounting.AccountingResultReport.getOwnClassInfo(), \"AccountingResultReport\"));", "client":"{\"of\": \"net.nanopay.accounting.AccountingResultReport\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"questionnaireDAO",                 "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"questionnaireDAO\")).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"questionnaires\").setOf(net.nanopay.onboarding.model.Questionnaire.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.onboarding.model.Questionnaire\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"inviteToken",                      "serve":true,  "serviceClass":"net.nanopay.onboarding.InvitationTokenService","boxClass":"foam.nanos.auth.token.TokenServiceSkeleton","client":"{\"class\":\"foam.nanos.auth.token.ClientTokenService\"}"})

// Disable these DAOs since they're potential security holes. We're not using them for anything right now anyway so there's no reason to keep them open.
// p({"class":"foam.nanos.boot.NSpec", "name":"shopperRegistrationDAO",           "lazy":true,  "serve":true,  "authenticate": false, "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new net.nanopay.onboarding.UserRegistrationDAO(x, \"shopper\", x.get(\"localUserDAO\"))));","client":"{\"of\":\"foam.nanos.auth.User\",\"cache\":true,\"decorators\": [{\"class\":\"foam.nanos.fs.FileDAODecorator\"},{\"class\":\"foam.nanos.fs.FileArrayDAODecorator\"}]}"})
// p({"class":"foam.nanos.boot.NSpec", "name":"businessRegistrationDAO",          "lazy":true,  "serve":true,  "authenticate": false, "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new net.nanopay.onboarding.UserRegistrationDAO(x, \"business\", x.get(\"localUserDAO\"))));","client":"{\"of\":\"foam.nanos.auth.User\",\"cache\":true,\"decorators\": [{\"class\":\"foam.nanos.fs.FileDAODecorator\"},{\"class\":\"foam.nanos.fs.FileArrayDAODecorator\"}]}"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "flinksConnect",
  "authenticate": false,
  "serviceClass": "net.nanopay.flinks.FlinksConnectWebAgent"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "appRedirect",
  "authenticate": false,
  "serviceClass": "net.nanopay.retail.AppRedirectWebAgent"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "terms",
  "authenticate": false,
  "serviceClass": "net.nanopay.settings.TermsAndConditionsWebAgent"
})

p({"class":"foam.nanos.boot.NSpec", "name":"padCaptureDAO",                    "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new foam.dao.SequenceNumberDAO (new net.nanopay.security.HashingJDAO(x, \"SHA-256\", false, true, net.nanopay.model.PadCapture.getOwnClassInfo(), \"padCapture\"))));", "client":"{\"of\":\"net.nanopay.model.PadCapture\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"firebaseInviteToken",              "serve":true,  "serviceClass":"net.nanopay.onboarding.FirebaseInvitationTokenService","boxClass":"foam.nanos.auth.token.TokenServiceSkeleton","client":"{\"class\":\"foam.nanos.auth.token.ClientTokenService\"}","service":{"class":"net.nanopay.onboarding.FirebaseInvitationTokenService","apn":"net.nanopay.mintchip_android","ofl":"https://mintchip.ca","ibi":"com.nanopay.mintchip","isi":"1051748158"},"description":"firebaseInviteToken"})
p({"class":"foam.nanos.boot.NSpec", "name":"paymentCardDAO",                   "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new foam.dao.SequenceNumberDAO(new net.nanopay.cico.paymentCard.ValidatedPaymentCardDAO(x, new net.nanopay.cico.paymentCard.PaymentCardSanitizeDAO(x, new net.nanopay.cico.paymentCard.NetworkedPaymentCardDAO(x, new net.nanopay.cico.paymentCard.RealexPaymentCardStoreDAO(x, new net.nanopay.cico.paymentCard.StripePaymentCardDAO(x, new net.nanopay.cico.paymentCard.PaymentCardTransientDAO(x, new net.nanopay.security.HashingJDAO(x, \"SHA-256\", false, true, net.nanopay.cico.paymentCard.model.PaymentCard.getOwnClassInfo(), \"paymentCards\"))))))))));", "client": "{\"of\":\"net.nanopay.cico.paymentCard.model.PaymentCard\"}", "description": "Payment card DAO"})
p({"class":"foam.nanos.boot.NSpec", "name":"stripeCustomerDAO",                "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new foam.dao.java.JDAO(x, net.nanopay.tx.stripe.StripeCustomer.getOwnClassInfo(), \"stripeCustomers\")));", "client": "{\"of\":\"net.nanopay.tx.stripe.StripeCustomer\"}", "description": "Stripe Customer DAO"})
p({"class":"foam.nanos.boot.NSpec", "name":"txnProcessorUserReferenceDAO",     "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new foam.dao.SequenceNumberDAO(new foam.dao.java.JDAO(x, net.nanopay.tx.TxnProcessorUserReference.getOwnClassInfo(), \"txnProcessorUserReferences\"))));", "client":"{\"of\":\"net.nanopay.tx.TxnProcessorUserReference\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"encryptedUserDAO",                 "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new net.nanopay.security.EncryptingDAO(x, foam.nanos.auth.User.getOwnClassInfo(), new foam.dao.java.JDAO(x, net.nanopay.security.EncryptedObject.getOwnClassInfo(), \"encryptedUsers\"))));","client":"{\"of\":\"foam.nanos.auth.User\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"encryptedBankAccountDAO",          "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new net.nanopay.security.EncryptingDAO(x, net.nanopay.bank.BankAccount.getOwnClassInfo(), new foam.dao.java.JDAO(x, net.nanopay.security.EncryptedObject.getOwnClassInfo(), \"encryptedBankAccounts\"))));","client":"{\"of\":\"net.nanopay.bank.BankAccount\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"privateKeyDAO",                    "serviceScript":"return new net.nanopay.security.PrivateKeyDAO.Builder(x).setAlias(\"net.nanopay.security.PrivateKeyDAO\").setDelegate(new foam.dao.EasyDAO.Builder(x).setAuthorize(false).setOf(net.nanopay.security.PrivateKeyEntry.getOwnClassInfo()).setSeqNo(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"privateKeys\").setOf(net.nanopay.security.PrivateKeyEntry.getOwnClassInfo()).build()).build();"})
p({"class":"foam.nanos.boot.NSpec", "name":"keyPairDAO",                       "serve":true,  "serviceScript":"foam.dao.DAO hashingJDAO = new net.nanopay.security.HashingJDAO(x, \"SHA-256\", false, true, net.nanopay.security.KeyPairEntry.getOwnClassInfo(), \"keyPairs\"); return new net.nanopay.security.KeyPairDAO.Builder(x).setDelegate(new foam.dao.EasyDAO.Builder(x).setAuthorize(false).setInnerDAO(hashingJDAO).setSeqNo(true).setOf(net.nanopay.security.KeyPairEntry.getOwnClassInfo()).build()).build();","client":"{\"of\":\"net.nanopay.security.KeyPairEntry\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"publicKeyDAO",                     "serve":true,  "serviceScript":"return new net.nanopay.security.PublicKeyDAO.Builder(x).setDelegate(new foam.dao.EasyDAO.Builder(x).setAuthorize(false).setOf(net.nanopay.security.PublicKeyEntry.getOwnClassInfo()).setSeqNo(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"publicKeys\").setOf(net.nanopay.security.PublicKeyEntry.getOwnClassInfo()).build()).build();","client":"{\"of\":\"net.nanopay.security.PublicKeyEntry\"}"})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"publicUserDAO",
  "serve":true,
  "description":"A DAO served to the client that lists all Users in the system. However, it only returns the public user info instead of the entire User object.",
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setInnerDAO(new net.nanopay.auth.UserToPublicUserInfoDAO(x, x.get("localUserUserDAO")))
      .setAuthorize(false)
      .setEnableInterfaceDecorators(false)
      .build()
  """,
  "client":
  """
  {
    "of":"net.nanopay.auth.PublicUserInfo",
    "cache":true,
    "decorators": [
      {
        "class":"foam.nanos.fs.FileArrayDAODecorator"
      }
    ]
  }
  """
})

p({
  "class": "foam.nanos.boot.NSpec", 
  "name": "testReportDAO",                    
  "description": "DAO to store all of the meta-data related to tests.",
  "serve": true,
  "pm": false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setJournalName("testreports")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setName("testReportDAO")
      .setOf(net.nanopay.test.TestReport.getOwnClassInfo())
      .build();
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"P2PTxnRequestDAO",                 "serve":true,   "parameters": false, "pm": true, "serviceScript": "foam.dao.DAO hashingJDAO = new net.nanopay.security.HashingJDAO(x, \"SHA-256\", false, true, net.nanopay.retail.model.P2PTxnRequest.getOwnClassInfo(), \"p2pTxnRequests\");\n\nreturn new net.nanopay.retail.P2PTxnRequestUserInfoDAO(x, new net.nanopay.retail.AuthenticatedP2PTxnRequestDAO(x, new net.nanopay.retail.NewP2PTxnRequestDAO(x, new net.nanopay.retail.ExistingP2PTxnRequestDAO(x, new net.nanopay.retail.P2PTxnRequestNotificationDAO(x, new foam.dao.EasyDAO.Builder(x).setAuthorize(false).setInnerDAO(hashingJDAO).setSeqNo(true).setOf(net.nanopay.retail.NewP2PTxnRequestDAO.getOwnClassInfo()).build())))));","client":"{\"of\":\"net.nanopay.retail.model.P2PTxnRequest\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"SPSCredentials",                   "lazy":false, "serve":true, "authenticate":false, "service":{"class":"net.nanopay.sps.SPSCredentials"}})
p({"class":"foam.nanos.boot.NSpec", "name":"bankHolidayDAO",                   "description":"DAO to store bank holidays for EFT processing.","serve":true,"serviceScript":"return new foam.dao.EasyDAO.Builder(x).setAuthorize(false).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"bankHolidays\").setSeqNo(true).setOf(net.nanopay.bank.BankHoliday.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.bank.BankHoliday\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"externalInvoiceToken",             "description":"Generate and process tokens pertaining to external user registration.", "serve":true, "authenticate":false, "serviceClass":"net.nanopay.auth.ExternalInvoiceTokenService","boxClass":"foam.nanos.auth.token.TokenServiceSkeleton","client":"{\"class\":\"foam.nanos.auth.token.ClientTokenService\"}"})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localDocumentDAO",
  
  "serviceScript": 
  """
  return new foam.flow.DocumentationFolderDAO.Builder(x).build();
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"documentDAO",                      "serve": true, "serviceScript": "new foam.nanos.auth.AuthorizationDAO(x, (foam.dao.DAO) x.get(\"localDocumentDAO\"), new foam.nanos.auth.StandardAuthorizer(\"flow\"));","client":"{\"of\":\"foam.flow.Document\"\}"})
p({"class":"foam.nanos.boot.NSpec", "name":"nanopayDocumentDAO",               "serve": true, "serviceScript": "new foam.dao.ReadOnlyDAO.Builder(x).setDelegate((foam.dao.DAO) x.get(\"localDocumentDAO\")).build();","client":"{\"of\":\"foam.flow.Document\"\}"})

p({"class":"foam.nanos.boot.NSpec", "name":"receiptDAO",                       "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setOf(net.nanopay.security.receipt.Receipt.getOwnClassInfo()).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"receipts\").setOf(net.nanopay.security.receipt.Receipt.getOwnClassInfo()).build();","client":"{\"of\":\"net.nanopay.security.receipt.Receipt\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"passwordEntropyService",           "serve":true,  "authenticate": false, "boxClass":"net.nanopay.auth.passwordutil.PasswordEntropySkeleton","client":"{ \"class\":\"net.nanopay.auth.passwordutil.ClientPasswordEntropy\", \"delegate\": { \"class\":\"foam.box.HTTPBox\", \"url\":\"service/passwordEntropyService\" } }","serviceClass":"net.nanopay.auth.passwordutil.PasswordStrengthCalculator"});
p({"class":"foam.nanos.boot.NSpec", "name":"identificationTypeDAO",            "serve":true,  "serviceScript":"return new foam.dao.ReadOnlyDAO.Builder(x).setDelegate(new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorize(false).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"identificationTypes\").setSeqNo(true).setOf(net.nanopay.model.IdentificationType.getOwnClassInfo()).build()).build();","client":"{\"of\":\"net.nanopay.model.IdentificationType\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"agentJunctionDAO",                 "lazy":false, "serve":true, "description":"DAO responsible for storing agent authentication permission information.","serviceScript": "ed = new foam.dao.EasyDAO.Builder(x).setAuthorize(false).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"agentJunctions\").setOf(foam.nanos.auth.UserUserJunction.getOwnClassInfo()).build(); eobad = new net.nanopay.business.EnforceOneBusinessAdminDAO.Builder(x).setDelegate(ed).build(); pid = new net.nanopay.partners.PartnerInfoDAO(x, eobad); puid1 = new net.nanopay.auth.PublicUserInfoDAO(x, \"partnerId\", \"partnerInfo\", pid); puid2 = new net.nanopay.auth.PublicUserInfoDAO(x, \"yourId\", \"yourInfo\", puid1); ppd = new foam.nanos.auth.PermissionedPropertyDAO.Builder(x).setDelegate(puid2).build(); ad = new foam.nanos.auth.AuthorizationDAO(x, ppd, new foam.nanos.auth.AuthorizableAuthorizer(\"agentJunction\")); return new net.nanopay.meter.SkipNullReferencedPropertyDAO.Builder(x).setProperty(foam.nanos.auth.UserUserJunction.TARGET_ID).setDelegate(ad).build();","client":"{\"of\":\"foam.nanos.auth.UserUserJunction\", \"remoteListenerSupport\": false}"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "loginAttemptDAO",
  "serve": true,
  "serviceScript": """
    jdao = new foam.dao.java.JDAO(x, net.nanopay.auth.LoginAttempt.getOwnClassInfo(), "loginAttempts");
    sequenceNumberDAO = new foam.dao.SequenceNumberDAO(jdao);
    authorizationDAO = new foam.nanos.auth.AuthorizationDAO(x, sequenceNumberDAO, new foam.nanos.auth.StandardAuthorizer("loginAttempt"));
    ca = new foam.nanos.auth.CreatedAwareDAO.Builder(x)
      .setDelegate(authorizationDAO)
      .build()
      .orderBy(foam.mlang.MLang.DESC(net.nanopay.auth.LoginAttempt.CREATED));
    return new foam.nanos.ruler.RulerDAO(x, ca, "loginAttemptDAO");
  """,
  "client": "{\"of\":\"net.nanopay.auth.LoginAttempt\"}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"RollingJournal",                   "description":"Decorator around RoutingJournal; it enables rolling journals for single journal system.","serviceScript":"import foam.dao.FileJournal;\nimport net.nanopay.security.snapshooter.RollingJournal;\n\nfileJournal = new FileJournal.Builder(x).setFile(RollingJournal.getNextJournal()).build();\nreturn new RollingJournal.Builder(x).setDelegate(fileJournal).setJournalNumber(RollingJournal.getNextJournalNumber()).build();"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "ipHistoryDAO",
  "serve": true,
  "serviceScript": """
    hashingJDAO = new net.nanopay.security.HashingJDAO(x, "SHA-256", false, true, net.nanopay.meter.IpHistory.getOwnClassInfo(), "ipHistories");
    return new foam.dao.EasyDAO.Builder(x)
      .setSeqNo(true)
      .setInnerDAO(hashingJDAO)
      .setName("ipHistory")
      .setOf(net.nanopay.meter.IpHistory.getOwnClassInfo())
      .setOrder(new foam.mlang.order.Comparator[] { new foam.mlang.order.Desc.Builder(x).setArg1(net.nanopay.meter.IpHistory.CREATED).build() })
      .setCreatedAware(true)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.meter.IpHistory\"}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"historyDAO",                       "serve":true,  "serviceScript":"foam.dao.DAO hashingJDAO = new net.nanopay.security.HashingJDAO(x, \"SHA-256\", false, true, foam.dao.history.HistoryRecord.getOwnClassInfo(), \"historyRecords\"); return new foam.dao.PMDAO(x, hashingJDAO);","client":"{\"of\":\"foam.dao.history.HistoryRecord\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"supportEmailDAO",                  "serve":true, "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new foam.dao.SequenceNumberDAO(new net.nanopay.security.HashingJDAO(x, \"SHA-256\", false, true, foam.support.model.SupportEmail.getOwnClassInfo(), \"supportEmails\"))));","client":"{\"of\":\"foam.support.model.SupportEmail\"}"})

p({"class":"foam.nanos.boot.NSpec", "name":"reportDAO",                        "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, new foam.dao.GUIDDAO(new foam.nanos.script.ScriptRunnerDAO(new net.nanopay.security.HashingJDAO(x, \"SHA-256\", false, true, net.nanopay.meter.reports.Report.getOwnClassInfo(), \"reports\")))));", "client":"{\"of\":\"net.nanopay.meter.reports.Report\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"routingJournal",                   "description":"Single journal to replace all of the individual journals.","authenticate":false,"serviceScript":"java.io.File file = null; String journalName = \"routingJournal\"; try { file = new java.io.File(System.getProperty(\"JOURNAL_HOME\") + \"/\" + journalName); file.createNewFile(); } catch ( Throwable t ) { throw new RuntimeException(t); } journal = new foam.dao.RoutingJournal.Builder(x).setFile(file).setFilename(journalName).build(); journal.replay(x, new foam.dao.NullDAO()); return journal;"})

p({
  "class": "foam.nanos.boot.NSpec", 
  "name": "blacklistDAO",                     
  "serve": true,  
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setOf(net.nanopay.meter.Blacklist.getOwnClassInfo())
      .setJournalName("blacklists")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("blacklist"))
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.meter.Blacklist\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "ascendantFXReports",
  "authenticate": false,
  "serviceScript": 
  """
    httpBlobService = new foam.nanos.blob.HttpBlobService(x, x.get(\"blobStore\"));
    return new net.nanopay.fx.ascendantfx.AscendantFXReportsWebAgent(x, httpBlobService);
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"complianceService",                "service":{"class":"net.nanopay.meter.compliance.NanopayComplianceService","enabled":true}})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"beneficialOwnerDAO",
  "description":"Contains beneficial owners of businesses.",
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.model.BeneficialOwner.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName(\"beneficialOwners\")
      .setSeqNo(true)
      .setPm(true)
      .setName("beneficialOwnerDAO")
      .build();
  """,
  "client":"{\"of\": \"net.nanopay.model.BeneficialOwner\"}"
})

p({
    "class": "foam.nanos.boot.NSpec",
    "name": "signingOfficerJunctionDAO",
    "description": "Stores the junctions for the relationship between signing officers of a business and the business itself.",
    "serve": true,
    "serviceScript": """
      ed = new foam.dao.EasyDAO.Builder(x)
        .setOf(net.nanopay.model.BusinessUserJunction.getOwnClassInfo())
        .setAuthorize(false)
        .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
        .setJournalName("signingOfficerJunctions")
        .setPm(true)
        .build();
      rd = new foam.nanos.ruler.RulerDAO(x, ed,"signingOfficerJunctionDAO");
      soaihd = new net.nanopay.meter.SigningOfficerAssignedIpHistoryDAO.Builder(x)
        .setDelegate(rd)
        .build();
      socsd = new net.nanopay.meter.compliance.SigningOfficerComplianceStatusDAO.Builder(x)
        .setDelegate(soaihd)
        .build();

      return new foam.nanos.auth.AuthorizationDAO(x, socsd, new foam.nanos.auth.AuthorizableAuthorizer("signingOfficerJunction"));
    """,
    "client": "{\"of\": \"net.nanopay.model.BusinessUserJunction\"}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"canadianSanctionDAO",              "lazy":false, "serve":true, "description":"In-memeory datastore for Canadian sanction records.", "authenticate": false, "serviceScript":"new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setSeqNo(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"canadianSanctionDAO\")).setName(\"canadianSanction\").setOf(net.nanopay.meter.compliance.canadianSanction.Record.getOwnClassInfo()).build();","client":"{\"of\":\"net.nanopay.meter.compliance.canadianSanction.Record\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"acceptanceDocumentDAO",            "serve":true,  "serviceScript":"return new foam.nanos.auth.AuthorizationDAO(x, new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorize(false).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"acceptanceDocuments\").setSeqNo(true).setOf(net.nanopay.documents.AcceptanceDocument.getOwnClassInfo()).build(), new foam.nanos.auth.AuthorizableAuthorizer(\"acceptanceDocument\"));","client":"{\"of\":\"net.nanopay.documents.AcceptanceDocument\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"acceptanceDocumentService",        "lazy":false,  "serve":true,  "authenticate": false, "boxClass":"net.nanopay.documents.AcceptanceDocumentServiceSkeleton", "serviceClass":"net.nanopay.documents.AcceptanceDocumentServer","client":"{\"class\":\"net.nanopay.documents.ClientAcceptanceDocumentService\",\"delegate\":{\"class\":\"foam.box.HTTPBox\", \"url\":\"service/acceptanceDocumentService\"}}"})
p({"class":"foam.nanos.boot.NSpec", "name":"userAcceptanceDocumentDAO",        "serve":true,  "serviceScript":"lb = new foam.nanos.auth.LastModifiedByAwareDAO.Builder(x).setDelegate(new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorize(false).setSeqNo(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"userAcceptanceDocuments\").setOf(net.nanopay.documents.UserAcceptanceDocument.getOwnClassInfo()).build()).build(); l = new foam.nanos.auth.LastModifiedAwareDAO.Builder(x).setDelegate(lb).build(); cb = new foam.nanos.auth.CreatedByAwareDAO.Builder(x).setDelegate(l).build(); c = new foam.nanos.auth.CreatedAwareDAO.Builder(x).setDelegate(cb).build(); ar = new foam.nanos.auth.AuthorizationDAO(x, c, new foam.nanos.auth.AuthorizableAuthorizer(\"userAcceptanceDocument\")); return ar;", "client":"{\"of\":\"net.nanopay.documents.UserAcceptanceDocument\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"settlementReports",                "authenticate":false, "description":"This generates a PDF file that is downloaded as a zip file. The report contains a dated range for invoices and specific fields from the invoices.", "serviceScript":"return new net.nanopay.invoice.InvoiceFilteredSettlementReport.Builder(x).setDelegate(new foam.nanos.blob.HttpBlobService(x, x.get(\"blobStore\"))).build();"})
p({"class":"foam.nanos.boot.NSpec","name":"securefactSIDniDAO",                "serve":true,"serviceScript":"ruler = new foam.nanos.ruler.RulerDAO(x, new net.nanopay.security.HashingJDAO(x, \"SHA-256\", false, true, net.nanopay.meter.compliance.secureFact.sidni.SIDniResponse.getOwnClassInfo(), \"securefactSIDni\"), \"securefactSIDniDAO\"); dao = new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setSeqNo(true).setInnerDAO(ruler).setName(\"securefactSIDni\").setOf(net.nanopay.meter.compliance.secureFact.sidni.SIDniResponse.getOwnClassInfo()).build(); return dao;","client":"{\"of\":\"net.nanopay.meter.compliance.secureFact.sidni.SIDniResponse\"}"})
p({"class":"foam.nanos.boot.NSpec","name":"securefactLEVDAO",                  "serve":true,"serviceScript":"ruler = new foam.nanos.ruler.RulerDAO(x, new net.nanopay.security.HashingJDAO(x, \"SHA-256\", false, true, net.nanopay.meter.compliance.secureFact.lev.LEVResponse.getOwnClassInfo(), \"securefactLEV\"), \"securefactLEVDAO\"); dao = new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setSeqNo(true).setInnerDAO(ruler).setName(\"securefactLEV\").setOf(net.nanopay.meter.compliance.secureFact.lev.LEVResponse.getOwnClassInfo()).build(); return dao;","client":"{\"of\":\"net.nanopay.meter.compliance.secureFact.lev.LEVResponse\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"securefactService",                "lazy":false, "service":{"class":"net.nanopay.meter.compliance.secureFact.SecurefactService"}})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "identityMindResponseDAO",
  "serve": true,
  "serviceScript": 
  """
    of = net.nanopay.meter.compliance.identityMind.IdentityMindResponse.getOwnClassInfo();
    hd = new net.nanopay.security.HashingJDAO(x, "SHA-256", false, true, of, "identityMindResponses");
    rd = new foam.nanos.ruler.RulerDAO(x, hd, "identityMindResponseDAO");
    ed = new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setSeqNo(true)
      .setInnerDAO(rd)
      .setName("identityMindResponse")
      .setOf(of)
      .setCreatedAware(true)
      .build();
    return ed;
  """,
  "client":"{\"of\":\"net.nanopay.meter.compliance.identityMind.IdentityMindResponse\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "identityMindService",
  "lazy": false,
  "service": {
    "class": "net.nanopay.meter.compliance.identityMind.IdentityMindService"
  }
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "identityMindWebAgent",
  "parameters": true,
  "serviceClass": "net.nanopay.meter.compliance.identityMind.IdentityMindWebAgent"
})

p({"class":"foam.nanos.boot.NSpec", "name":"dowjonesCredentials",              "lazy":false,  "service":{"class":"net.nanopay.meter.compliance.dowJones.DowJonesCredentials"}})
p({"class":"foam.nanos.boot.NSpec", "name":"dowJonesService",                  "serve":true,  "boxClass":"net.nanopay.meter.compliance.dowJones.DowJonesSkeleton", "serviceClass":"net.nanopay.meter.compliance.dowJones.DowJonesService","client":"{\"class\":\"net.nanopay.meter.compliance.dowJones.ClientDowJonesService\",\"delegate\":{\"class\":\"foam.box.HTTPBox\", \"url\":\"service/dowJonesService\"}}"})
p({"class":"foam.nanos.boot.NSpec", "name":"emailConfig",                      "lazy":false,  "service":{"class":"foam.nanos.app.EmailConfig", "from":"info@nanopay.net", "displayName":"nanopay Corporation", "replyTo":"noreply@nanopay.net"}})
p({"class":"foam.nanos.boot.NSpec", "name":"dowJonesResponseDAO",              "serve":true,  "serviceScript":"ruler = new foam.nanos.ruler.RulerDAO(x, new net.nanopay.security.HashingJDAO(x, \"SHA-256\", false, true, net.nanopay.meter.compliance.dowJones.DowJonesResponse.getOwnClassInfo(), \"dowJonesResponse\"), \"dowJonesResponseDAO\"); dao = new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setSeqNo(true).setInnerDAO(ruler).setName(\"dowJonesResponse\").setOf(net.nanopay.meter.compliance.dowJones.DowJonesResponse.getOwnClassInfo()).build(); return dao;","client":"{\"of\":\"net.nanopay.meter.compliance.dowJones.DowJonesResponse\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"kotakCredentials",                 "lazy":false,  "service":{"class":"net.nanopay.kotak.KotakCredentials"}})
p({"class":"foam.nanos.boot.NSpec", "name":"complianceHistoryDAO",             "serve":true, "serviceScript":"return new foam.dao.ReadOnlyDAO.Builder(x).setDelegate(new foam.dao.FilteredDAO.Builder(x).setPredicate(foam.mlang.MLang.IN(foam.nanos.ruler.RuleHistory.RULE_ID,((foam.dao.ArraySink)((foam.mlang.sink.Map)((foam.dao.DAO) x.get(\"ruleDAO\")).where(foam.mlang.MLang.OR(new foam.mlang.predicate.Predicate[] {foam.mlang.MLang.EQ(foam.nanos.ruler.Rule.RULE_GROUP, \"onboarding\"), foam.mlang.MLang.EQ(foam.nanos.ruler.Rule.RULE_GROUP, \"compliance\"), foam.mlang.MLang.EQ(foam.nanos.ruler.Rule.RULE_GROUP, \"FastPay\")})).select(foam.mlang.MLang.MAP(foam.nanos.ruler.Rule.ID, new foam.dao.ArraySink()))).getDelegate()).getArray().toArray())).setDelegate((foam.dao.DAO)x.get(\"ruleHistoryDAO\")).build()).build();", "client":"{\"of\":\"foam.nanos.ruler.RuleHistory\"}"})


p({"class":"foam.nanos.boot.NSpec", "name":"email",                            "serviceScript":"import foam.nanos.notification.email.EmailService;\nimport foam.nanos.notification.email.NullEmailService; \nimport foam.nanos.notification.email.ProxyEmailService; \n \n ProxyEmailService pet = new ProxyEmailService.Builder(x).build(); \n EmailService es = new NullEmailService.Builder(x).build(); \npet.setDelegate(es);\n return pet;"})

p({
  "class": "foam.nanos.boot.NSpec", 
  "name": "payrollDAO",                       
  "serve": true,  
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.payment.Payroll.getOwnClassInfo())
      .setPm(true)
      .setSeqNo(true)
      .setDecorator(new net.nanopay.payment.PayrollDAO(x, null))
      .setJournalName("payrolls")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
    return new foam.dao.PMDAO(x, new foam.dao.SequenceNumberDAO(new net.nanopay.payment.PayrollDAO(x, new foam.dao.java.JDAO(x, net.nanopay.payment.Payroll.getOwnClassInfo(), \"payrolls\"))));
  """, 
  "client":"{\"of\":\"net.nanopay.payment.Payroll\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "complianceItemDAO",
  "serve": true,
  "serviceScript": 
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setJournalName("complianceItems")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setOf(net.nanopay.meter.compliance.ComplianceItem.getOwnClassInfo())
      .setSeqNo(true)
      .setName("complianceItem")
      .setCreatedAware(true)
      .setOrder(new foam.mlang.order.Comparator[] { new foam.mlang.order.Desc.Builder(x).setArg1(net.nanopay.meter.compliance.ComplianceItem.CREATED).build() })
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.meter.compliance.ComplianceItem\"}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"AFEXCredentials",                  "lazy":false,  "service":{"class":"net.nanopay.fx.afex.AFEXCredentials"}})
p({"class":"foam.nanos.boot.NSpec","name":"liquidityThresholdCandlestickDAO","serve":true,"serviceScript":"return new foam.dao.MDAO(foam.nanos.analytics.Candlestick.getOwnClassInfo());","client":"{\"of\":\"foam.nanos.analytics.Candlestick\"}"})

p({"class":"foam.nanos.boot.NSpec", "name":"JDBCConnectionSpec", "lazy":false, "serve":false, "class":"foam.nanos.boot.NSpec", "service":{"class":"foam.dao.jdbc.JDBCConnectionSpec", "databaseServer":"mysql", "hostName":"localhost", "databaseName":"testSQLDAO", "userName":"foam_user", "userPassword":"foam_password"} })

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"csvUploadScriptDAO",
  "lazy":true,
  "serve":true,
  "serviceScript":"return new foam.dao.EasyDAO.Builder(x)\n  .setPm(true)\n  .setGuid(true)\n  .setOf(net.nanopay.script.CsvUploadScript.getOwnClassInfo())\n  .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)\n  .setJournalName(\"csvUploadScripts\")\n  .setDecorator(new foam.nanos.script.ScriptRunnerDAO(null))\n  .setOrder(new foam.core.PropertyInfo[] {foam.nanos.script.Script.ID})\n  .setIndex(new foam.core.PropertyInfo[] {foam.nanos.script.Script.ID})\n  .build();",
  "client":"{\n    \"of\":\"net.nanopay.script.CsvUploadScript\",\n    \"decorators\": [\n        {\"class\":\"foam.nanos.fs.FileDAODecorator\"},\n        {\"class\":\"foam.nanos.fs.FileArrayDAODecorator\"}\n    ]\n}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "clearingTimeService",
  "serve": false,
  "service": {
    "class": "net.nanopay.meter.clearing.ClearingTimeService",
    "defaultClearingTime": 2
  }
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "jobTitleDAO",
  "lazy": true,
  "serve": true,
  "authenticate": false,
  "serviceScript": 
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setReadOnly(true)
      .setAuthorize(false)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("jobTitles")
      .setSeqNo(false)
      .setOf(net.nanopay.model.JobTitle.getOwnClassInfo())
      .build();
  """,
  "client": """
    { "of": "net.nanopay.model.JobTitle" }
  """
})

// Remove the "static" service since we don't depend on it and it provides unauthenticated access to highly sensitive information.
r({"class":"foam.nanos.boot.NSpec","name":"static"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "bankHolidayService",
  "serve": false,
  "service": {
    "class": "net.nanopay.bank.BankHolidayService"
  }
})

// We need to override ruleDAO on the nanopay side so we can add the
// SetBusinessNameDAO decorator.
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "ruleDAO",
  "serve": true,
  "serviceScript": 
  """
    setBusinessNameDAO = new net.nanopay.business.SetBusinessNameDAO.Builder(x)
      .setReferenceProperty(net.nanopay.tx.ruler.BusinessLimit.BUSINESS)
      .setNameProperty(net.nanopay.tx.ruler.BusinessLimit.BUSINESS_NAME)
      .setDelegate(null)
      .build();
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setGuid(true)
      .setOf(foam.nanos.ruler.Rule.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("rules")
      .setDecorator(setBusinessNameDAO)
      .setValidated(true)
      .setRuler(false)
      .build();
  """,
  "client": """
    {
      "of": "foam.nanos.ruler.Rule"
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "genTxnReport",
  "serviceClass": "net.nanopay.tx.GenTxnReportWebAgent"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"assetClassDAO",
  "serve":true,
  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
    .setJournalName("assetClasses")
    .setPm(true)
    .setPipelinePm(true)
    .setOf(net.nanopay.exchangeable.AssetClass.getOwnClassInfo())
    .setName("assetClass")
    .setIndex(new foam.core.PropertyInfo[] {net.nanopay.exchangeable.AssetClass.NAME})
    .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.exchangeable.AssetClass",
    "cache":true
  }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "abliiBusinessReportDAO",
  "serve": true,
  "serviceScript": """
    abrDAO =  new net.nanopay.meter.report.AbliiBusinessReportDAO.Builder(x)
      .setDelegate(null)
      .build();
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.meter.report.AbliiBusinessReport.getOwnClassInfo())
      .setDecorator(abrDAO)
      .build();
  """,
  "client": """
    {
      "of": "net.nanopay.meter.report.AbliiBusinessReport",
      "cache": true
    }
  """
})

// We need to override om1minDAO to add the AlarmingUniqueNameDAO decorator
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "om1minDAO",
  "serve": true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("OMMinutely")
      .setOf(foam.nanos.analytics.Candlestick.getOwnClassInfo())
      .setDecorator(new net.nanopay.alarming.AlarmingUniqueNameDAO(x))
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.analytics.Candlestick\"}"
})
