p({
    class:"foam.nanos.script.Script",
    id:"Update BusinessSector Translation to match API",
    description:"update businessSector translation to match API",
    code:"""
        import foam.lib.json.JSONParser;
        import foam.core.FObject;
        import foam.dao.DAO;
        import foam.dao.ArraySink;
        import foam.mlang.MLang;
        import foam.mlang.predicate.Predicate;
        import foam.i18n.TranslationService;
        import foam.i18n.Locale;
        import javax.ws.rs.core.UriBuilder;
        import java.io.IOException;
        import javax.security.auth.AuthPermission;
        import java.util.List;
        import net.nanopay.model.BusinessSector;
        import net.nanopay.partner.br.businessSector.Sector;
        import org.apache.http.client.methods.HttpGet;
        import org.apache.http.client.methods.CloseableHttpResponse;
        import org.apache.http.client.config.RequestConfig;
        import org.apache.http.impl.client.HttpClientBuilder;
        import org.apache.http.impl.NoConnectionReuseStrategy;
        import org.apache.http.impl.client.CloseableHttpClient;
        import org.apache.http.HttpResponse;
        import org.apache.http.client.methods.HttpGet;
        import org.apache.http.impl.client.HttpClientBuilder;
        import org.apache.http.util.EntityUtils;
        import org.apache.http.impl.client.BasicResponseHandler;

        HttpGet httpget = new HttpGet("https://servicodados.ibge.gov.br/api/v2/cnae/classes");
        httpget.setHeader("Content-Type", "application/json");
        httpget.setHeader("Accept", "application/json");
        httpget.setHeader("Api-Version", "alpha");
        RequestConfig requestConfig = RequestConfig.custom().setConnectionRequestTimeout(5000).build();
        CloseableHttpClient httpClient = HttpClientBuilder.create().setDefaultRequestConfig(requestConfig).setConnectionReuseStrategy(new NoConnectionReuseStrategy()).build();
        CloseableHttpResponse httpResponse = httpClient.execute(httpget);
        String response = new BasicResponseHandler().handleResponse(httpResponse);
        Object[] obj = x.create(foam.lib.json.JSONParser.class).parseStringForArray(response,Sector.class);
        DAO businessSectorDAO = (DAO) x.get("businessSectorDAO");
        DAO localeDAO = (DAO) x.get("localeDAO");
        List businessSectors = ((ArraySink) businessSectorDAO.where(foam.mlang.MLang.AND( new Predicate[] {MLang.GTE(BusinessSector.ID, 92813), MLang.LTE(BusinessSector.ID, 93485)})).select(new ArraySink())).getArray();
        TranslationService ts = (TranslationService) x.get("translationService");
        for (int i = 0; i < obj.length; i++) {
        String api_Id = ((Sector) obj[i]).getId() + ((Sector) obj[i]).getGrupo().getDivisao().getId();
        String api_parent = ((Sector) obj[i]).getGrupo().getDivisao().getSecao().getId();
        String api_name = ((Sector) obj[i]).getDescricao();
        BusinessSector businessSector = (BusinessSector) businessSectorDAO.find(MLang.EQ(BusinessSector.CODE, api_Id));
        if ( businessSector == null ) {
            System.out.println(api_Id + " not exist in journals, need add it in");
            print(api_Id + " not exist in journals, need add it in");
            continue;
        }
        String sectorName = businessSector.getName();
        String businessSectorName_translated = ts.getTranslation("pt", sectorName, sectorName);
        String businessCode = businessSector.getCode();
        Character api_parent_char = api_parent.charAt(0);
        String api_sector_name = ((Sector) obj[i]).getDescricao();
        StringBuilder converted = new StringBuilder();
        Locale locale =  localeDAO.find(MLang.EQ(Locale.SOURCE, sectorName));
        boolean convertNext = true;
        if (api_sector_name.equals(businessSectorName_translated.toUpperCase())) {
            continue;
        }
        for (char ch : api_sector_name.toCharArray()) {
            if (Character.isSpaceChar(ch)) {
                convertNext = true;
            } else if (convertNext) {
                ch = Character.toTitleCase(ch);
                convertNext = false;
            } else {
                ch = Character.toLowerCase(ch);
            }
            converted.append(ch);
        }
        System.out.println(businessSectorName_translated + " translation has updated to " + converted.toString());
        print(businessSectorName_translated + " translation has updated to " + converted.toString());
        locale = locale.fclone();
        locale.setTarget(converted.toString());
        localeDAO.put(locale);
    }
    """
})

p({
    class:"foam.nanos.script.Script",
    id:"Update BusinessSector journals by BusinessSector API",
    description:"add 9 more businessSector parent and update BusinessSector parent",
    code:"""
        import foam.dao.DAO;
        import foam.dao.ArraySink;
        import foam.mlang.MLang;
        import foam.lib.json.JSONParser;
        import foam.core.FObject;
        import foam.i18n.TranslationService;
        import foam.mlang.predicate.Predicate;
        import java.io.IOException;
        import java.util.List;
        import javax.security.auth.AuthPermission;
        import javax.ws.rs.core.UriBuilder;
        import net.nanopay.model.BusinessSector;
        import net.nanopay.partner.br.businessSector.Sector;
        import org.apache.http.client.methods.HttpGet;
        import org.apache.http.client.methods.CloseableHttpResponse;
        import org.apache.http.client.config.RequestConfig;
        import org.apache.http.impl.client.HttpClientBuilder;
        import org.apache.http.impl.NoConnectionReuseStrategy;
        import org.apache.http.impl.client.CloseableHttpClient;
        import org.apache.http.HttpResponse;
        import org.apache.http.client.methods.HttpGet;
        import org.apache.http.impl.client.HttpClientBuilder;
        import org.apache.http.util.EntityUtils;
        import org.apache.http.impl.client.BasicResponseHandler;

        HttpGet httpget = new HttpGet("https://servicodados.ibge.gov.br/api/v2/cnae/classes");
        httpget.setHeader("Content-Type", "application/json");
        httpget.setHeader("Accept", "application/json");
        httpget.setHeader("Api-Version", "alpha");
        RequestConfig requestConfig = RequestConfig.custom().setConnectionRequestTimeout(5000).build();
        CloseableHttpClient httpClient = HttpClientBuilder.create().setDefaultRequestConfig(requestConfig).setConnectionReuseStrategy(new NoConnectionReuseStrategy()).build();
        CloseableHttpResponse httpResponse = httpClient.execute(httpget);
        String response = new BasicResponseHandler().handleResponse(httpResponse);
        Object[] obj = x.create(foam.lib.json.JSONParser.class).parseStringForArray(response,Sector.class);
        DAO businessSectorDAO = (DAO) x.get("businessSectorDAO");
        businessSectorDAO = businessSectorDAO.getDelegate().getDelegate().getDelegate().getDelegate().getDelegate();
        List businessSectors = ((ArraySink) businessSectorDAO.where(foam.mlang.MLang.AND( new Predicate[] {MLang.GTE(BusinessSector.ID, 92813), MLang.LTE(BusinessSector.ID, 93485)})).select(new ArraySink())).getArray();
        TranslationService ts = (TranslationService) x.get("translationService");
        // use hashMap to match Char to id
        parents = new HashMap();
        String[] bs = {"Extractive industries", "Transformation industries", "Water, sewage, waste management and decontamination activities", "Trade; repair of motor vehicles and motorcycles", "Transport, storage and mail", "Administrative activities and complementary services","Administration public health, defense and social security","Domestic services", "International organizations and other extraterritorial institutions"};
        String[] bs_parent_char = {"B", "C", "E", "G", "H", "N", "O", "T", "U"};
        for (int i = 0; i < bs.length; i++) {
          //Check if this parent exist, if not add them
          BusinessSector businessSector_parent = (BusinessSector) businessSectorDAO.find(MLang.EQ(BusinessSector.NAME, bs[i]));
          if ( businessSector_parent == null ) {
              System.out.println("parent" + bs[i] + " is missing");
              print("parent " + bs[i] + " is missing");
              businessSector_parent = businessSectorDAO.put(new BusinessSector.Builder(x).setCountryId("BR").setName(bs[i]).setParent(0).build());
          }
          parents.put(bs_parent_char[i], businessSector_parent.getId());
        }
        for (int i = 0; i < obj.length; i++) {
          String api_Id = ((Sector) obj[i]).getId() + ((Sector) obj[i]).getGrupo().getDivisao().getId();
          String api_parent = ((Sector) obj[i]).getGrupo().getDivisao().getSecao().getId();
          String api_name = ((Sector) obj[i]).getDescricao();
          //find businessSector by api_Id(BusinessSector Code)
          BusinessSector businessSector = (BusinessSector) businessSectorDAO.find(MLang.EQ(BusinessSector.CODE, api_Id));
          //if businessSector not exist, create it
          if ( businessSector == null ) {
              System.out.println("id" + api_Id + " is missing");
              print("id " + api_Id + " is missing");
              businessSector = new BusinessSector.Builder(x).setCode(api_Id).setCountryId("BR").setName(api_name).build();

          }
          String sectorName = businessSector.getName();
          String name_tr = ts.getTranslation("pt", sectorName, sectorName);
          String businessCode = businessSector.getCode();
          //convert char to number A:1, B:2, C:3 this part isn't nessary just to sure if there are more Char
          Character api_parent_char = api_parent.charAt(0);
          int api_parent_long = (java.lang.Character.getNumericValue(api_parent_char) - 9);
          businessSector = businessSector.fclone();
          switch(api_parent) {
              case "A" :
                  businessSector.setParent(1);
                  break;
              case "B" :
                  businessSector.setParent(parents.get("B"));
                  break;
              case "C" :
                  businessSector.setParent(parents.get("C"));
                  break;
              case "D" :
                  businessSector.setParent(3);
                  break;
              case "E" :
                  businessSector.setParent(parents.get("E"));
                  break;
              case "F":
                  businessSector.setParent(4);
                  break;
              case "G":
                  businessSector.setParent(parents.get("G"));
                  break;        
              case "H":
                  businessSector.setParent(parents.get("H"));
                  break;
              case "I":
                  businessSector.setParent(18);
                  break;
              case "J":
                  businessSector.setParent(9);
                  break;
              case "K":
                  businessSector.setParent(10);
                  break;
              case "L":
                  businessSector.setParent(11);                       
                  break;
              case "M":
                  businessSector.setParent(12);                       
                  break;
              case "N":
                  businessSector.setParent(parents.get("N"));                      
                  break;
              case "O":
                  businessSector.setParent(parents.get("O"));                       
                  break;
              case "P":
                  businessSector.setParent(15);                      
                  break;
              case "Q":
                  businessSector.setParent(16);                
                  break;
              case "R":
                  businessSector.setParent(17);                    
                  break;
              case "S":
                  businessSector.setParent(19);                    
                  break;
              case "T":
                  businessSector.setParent(parents.get("T"));                     
                  break;
              case "U":
                  businessSector.setParent(parents.get("U"));                       
                  break;
              default :
                  businessSector.setParent(api_parent_long);
          }
          businessSector = businessSectorDAO.put(businessSector);
          print(businessSector.getId());
          System.out.println(businessSector.getId());
        }
    """
})