p({"class":"foam.nanos.ruler.Rule","id":"Pending FX Rate Transactions","priority":100,"ruleGroup":"ManualFxTxn","documentation":"Create a FX approval request for FX quote","daoKey":"localTransactionDAO","operation":1,"after":true,"predicate":{"class":"foam.mlang.predicate.And","args":[{"class":"foam.mlang.predicate.Eq","arg1":{"class":"foam.mlang.expr.Dot","arg1":{"class":"foam.mlang.ContextObject","key":"NEW"},"arg2":{"class":"foam.mlang.PredicatedExpr","arg1":{"class":"foam.mlang.predicate.IsInstanceOf","targetClass":"net.nanopay.fx.KotakFxTransaction"}}},"arg2":{"class":"foam.mlang.Constant","value":true}},{"class":"foam.mlang.predicate.Eq","arg1":{"class":"foam.mlang.expr.Dot","arg1":{"class":"foam.mlang.ContextObject","key":"NEW"},"arg2":{"class":"__Property__","forClass_":"net.nanopay.tx.model.Transaction","name":"status"}},"arg2":{"class":"foam.mlang.Constant","value":{"class":"net.nanopay.tx.model.TransactionStatus","ordinal":0}}}]},"action":{"class":"net.nanopay.tx.CreateManualFxRule"},"enabled":true,"saveHistory":false})
p({"class":"foam.nanos.ruler.Rule","id":"Getting FX Rate for Transactions","priority":100,"ruleGroup":"ManualFxTxn","documentation":"Get FX rate if a FX quote is available","daoKey":"approvalRequestDAO","operation":1,"after":false,"predicate":{"class":"foam.mlang.predicate.Eq","arg1":{"class":"foam.mlang.expr.Dot","arg1":{"class":"foam.mlang.ContextObject","key":"NEW"},"arg2":{"class":"foam.mlang.PredicatedExpr","arg1":{"class":"foam.mlang.predicate.IsInstanceOf","targetClass":"net.nanopay.fx.ManualFxApprovalRequest"}}},"arg2":{"class":"foam.mlang.Constant","value":true}},"action":{"class":"net.nanopay.tx.ManualFxRule"},"enabled":true,"saveHistory":false})
p({"class":"foam.nanos.ruler.Rule","id":"The Jackie Rule1","priority":100,"ruleGroup":"compliance","documentation":"when a compliance transaction gets created create an approval request for Jackie","daoKey":"localTransactionDAO","operation":0,"after":true,"predicate":{"class":"net.nanopay.meter.compliance.ruler.predicate.IsComplianceTransaction"},"action":{"class":"net.nanopay.tx.JackieRuleOnCreate"},"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":"The Jackie Rule2","priority":100,"ruleGroup":"compliance","documentation":"When a compliance transaction is saved, check if jackie approved it or not.","daoKey":"localTransactionDAO","predicate":{"class":"foam.mlang.predicate.And","args":[{"class":"foam.mlang.predicate.Eq","arg1":{"class":"foam.mlang.expr.Dot","arg1":{"class":"foam.mlang.ContextObject","key":"NEW"},"arg2":{"class":"foam.mlang.PredicatedExpr","arg1":{"class":"foam.mlang.predicate.IsInstanceOf","targetClass":"net.nanopay.tx.ComplianceTransaction"}}},"arg2":{"class":"foam.mlang.Constant","value":true}},{"class":"foam.mlang.predicate.Eq","arg1":{"class":"foam.mlang.expr.Dot","arg1":{"class":"foam.mlang.ContextObject","key":"NEW"},"arg2":{"class":"__Property__","forClass_":"net.nanopay.tx.model.Transaction","name":"status"}},"arg2":{"class":"foam.mlang.Constant","value":{"class":"net.nanopay.tx.model.TransactionStatus","ordinal":0}}}]},"operation":1,"after":false,"action":{"class":"net.nanopay.tx.JackieRuleOnPut"},"enabled":false,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":"DebtDestroyer","priority":100,"ruleGroup":"FastPay","documentation":"when a CI transaction gets put in complete status for an Ablii FastPay enabled user, create a debtRepaymentTxn","daoKey":"localTransactionDAO","operation":1,"after":true,"action":{"class":"net.nanopay.tx.RepayDebtOnCIRule"},"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":"Proper Status after Pause, Rule","priority":100,"ruleGroup":"StatusRules","documentation":"Change PPC to Pending if parent complete","daoKey":"localTransactionDAO","operation":1,"action":{"class":"net.nanopay.tx.ParentCompleteToPendingRule"},"after":false,"enabled":true,"saveHistory":false})
p({"class":"foam.nanos.ruler.Rule","id":"Set Approved By","priority":100,"ruleGroup":"InvoicePayment","documentation":"Set approvedBy property if the payment status is PROCESSING","daoKey":"invoiceDAO","operation":1,"after":false,"action":{"class":"net.nanopay.tx.ruler.InvoiceApprovedByRule"},"enabled":true,"saveHistory":false})
p({"class":"foam.nanos.ruler.Rule","id":"SwitchToSlowPay","priority":100,"ruleGroup":"FastPay","documentation":"If we know that fast pay will fail due to nsf in some account, transition to slowpay","daoKey":"localTransactionDAO","operation":1,"after":false,"action":{"class":"net.nanopay.tx.ruler.SlowDownRule"},"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":"Modify Cico Status","priority":100,"ruleGroup":"ModifyCicoStatus","documentation":"When a cico transaction is updated, check if status is SENT and check if ApprovalRequest is Approved, then update transaction status to COMPLETED.","daoKey":"localTransactionDAO","operation":1,"after":false,"predicate":{"class":"foam.mlang.predicate.And","args":[{"class":"net.nanopay.meter.compliance.ruler.predicate.IsSentTransaction"},{"class":"net.nanopay.meter.compliance.ruler.predicate.IsCITransaction"}]},"action":{"class":"net.nanopay.tx.ModifyCicoStatus"},"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":"Create Expedite Aproval Request","priority":100,"ruleGroup":"CreateExpediteApprovalRequest","documentation":"When a cico transaction is created, create an approval request that allows the status to be modified.","daoKey":"localTransactionDAO","operation":0,"after":true,"predicate":{"class":"net.nanopay.meter.compliance.ruler.predicate.IsCITransaction"},"action":{"class":"net.nanopay.tx.CreateExpediteApprovalRequest"},"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":"Prune Cico Approval Cleanup","priority":100,"ruleGroup":"PruneCicoApprovalCleanup","documentation":"Clear pending approval requests for a cico transaction.","daoKey":"localTransactionDAO","operation":1,"after":true,"predicate":{"class":"foam.mlang.predicate.And","args":[{"class":"net.nanopay.meter.compliance.ruler.predicate.IsCompletedTransaction"},{"class":"net.nanopay.meter.compliance.ruler.predicate.IsCITransaction"}]},"action":{"class":"net.nanopay.meter.compliance.ruler.PruneApprovalRequests","objDaoKey":"localTransactionDAO"},"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":"Account Liquification","priority":100,"ruleGroup":"Liquidity","documentation":"Triggers liquidity settings","daoKey":"localTransactionDAO","operation":3,"after":true,"enabled":true,"action":{"class":"net.nanopay.liquidity.LiquidityRule"},"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":"ReverseCashIn","priority":100,"ruleGroup":"ReverseTransactions","documentation":"Reverses Failed and Declined CI Transactions","daoKey":"localTransactionDAO","operation":1,"action":{"class":"net.nanopay.tx.cico.ReverseCIRule"},"after":true,"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":"ReverseCashOut","priority":90,"ruleGroup":"ReverseTransactions","documentation":"Reverses Failed and Declined CO Transactions","daoKey":"localTransactionDAO","operation":1,"action":{"class":"net.nanopay.tx.cico.ReverseCORule"},"after":true,"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":"observeStatus","priority":100,"ruleGroup":"Observer","documentation":"Change the last status field to the current time for all transaction status changes","daoKey":"localTransactionDAO","operation":1,"after":false,"predicate":{"class":"net.nanopay.tx.ruler.ObservePredicate","observedProperty":"status","observedClass":"net.nanopay.tx.model.Transaction"},"enabled":true,"saveHistory":true,"action":{"class":"net.nanopay.tx.ruler.ChangePropertyAction","propName":"lastStatusChange","valueExpr":{"class":"foam.mlang.CurrentTime"}}})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Quote Transaction Based on Status",
  "priority":100,
  "ruleGroup":"Quote Transaction",
  "documentation":"Sets is quoted to true on transaction that are in a PAUSED or SCHEDULED state",
  "daoKey":"localTransactionDAO",
  "operation":1,
  "after":false,
  "action":{
    "class":"net.nanopay.tx.ruler.TransactionQuotedStatusRule"
  },
  "enabled":true,
  "saveHistory":true,
  "predicate":{
    "class":"foam.mlang.predicate.OR",
    "args":[
    {
      "class":"foam.mlang.predicate.Eq",
      "arg1":{
        "class":"foam.mlang.expr.Dot",
        "arg1":{
          "class":"foam.mlang.ContextObject","key":"NEW"
        },
        "arg2":{
          "class":"__Property__",
          "forClass_":"net.nanopay.tx.model.Transaction",
          "name":"status"
        }
      },
      "arg2":{
        "class":"foam.mlang.Constant",
        "value":{
          "class":"net.nanopay.tx.model.TransactionStatus",
          "ordinal":10
        }
      }
    },
    {
      "class":"foam.mlang.predicate.Eq",
      "arg1":{
        "class":"foam.mlang.expr.Dot",
        "arg1":{
          "class":"foam.mlang.ContextObject","key":"NEW"
        },
        "arg2":{
          "class":"__Property__",
          "forClass_":"net.nanopay.tx.model.Transaction",
          "name":"status"
        }
      },
      "arg2":{
        "class":"foam.mlang.Constant",
        "value":{
          "class":"net.nanopay.tx.model.TransactionStatus",
          "ordinal":13
        }
      }
    }
  ]}
})

p({"class":"foam.nanos.ruler.Rule","id":"Ablii Completed Transaction Notification","priority":100,"ruleGroup":"Notifications","documentation":"Sends a notification to the sender and receiver of the transaction that their ablii payment has been completed.","enabled":true,"after":true,"daoKey":"localTransactionDAO","operation":0,"predicate":{"class":"foam.mlang.predicate.And","args":[{"class":"net.nanopay.meter.compliance.ruler.predicate.IsCompletedTransaction"},{"class":"net.nanopay.meter.compliance.ruler.predicate.IsInstancePredicate","of":"net.nanopay.tx.AbliiTransaction"},{"class":"net.nanopay.tx.ruler.PropertyNEQValue","propName":"invoiceId","propValue":0}]},"action":{"class":"net.nanopay.tx.ruler.AbliiSendCompletedNotification"},"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":"Ablii FX Completed Transaction Notification","priority":100,"ruleGroup":"Notifications","documentation":"Sends a notification to the sender and receiver of the transaction that their ablii FX (through BMO) payment has been completed.","enabled":true,"after":true,"daoKey":"localTransactionDAO","operation":3,"predicate":{"class":"foam.mlang.predicate.And","args":[{"class":"net.nanopay.meter.compliance.ruler.predicate.IsCompletedTransaction"},{"class":"net.nanopay.meter.compliance.ruler.predicate.IsInstancePredicate","of":"net.nanopay.fx.FXSummaryTransaction"},{"class":"net.nanopay.tx.ruler.PropertyNEQValue","propName":"invoiceId","propValue":0}]},"action":{"class":"net.nanopay.tx.ruler.AbliiSendCompletedNotification"},"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":"Declined Cash In Transaction Notification","priority":100,"ruleGroup":"Notifications","documentation":"Sends a notification when a CashIn is declined","enabled":true,"after":true,"daoKey":"localTransactionDAO","operation":1,"predicate":{"class":"foam.mlang.predicate.And","args":[{"class":"net.nanopay.meter.compliance.ruler.predicate.IsInstancePredicate","of":"net.nanopay.tx.cico.CITransaction"},{"class":"net.nanopay.tx.ruler.PropertyEQValue","propName":"status","propValue":{"class":"net.nanopay.tx.model.TransactionStatus","ordinal":4}},{"class":"foam.nanos.ruler.predicate.PropertyChangePredicate","propName":"status"}]},"action":{"class":"net.nanopay.tx.ruler.SendDeclinedCINotification"},"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":"Declined Verification Transaction Notification","operation":1,"priority":100,"ruleGroup":"Notifications","documentation":"Sends a Notification to support about a failed verification transaction","daoKey":"localTransactionDAO","after":true,"predicate":{"class":"foam.mlang.predicate.And","args":[{"class":"foam.mlang.predicate.Or","args":[{"class":"net.nanopay.tx.ruler.PropertyEQValue","propName":"status","propValue":{"class":"net.nanopay.tx.model.TransactionStatus","ordinal":4}},{"class":"net.nanopay.tx.ruler.PropertyEQValue","propName":"status","propValue":{"class": "net.nanopay.tx.model.TransactionStatus","ordinal":9}}]},{"class":"net.nanopay.meter.compliance.ruler.predicate.IsInstancePredicate","of":"net.nanopay.tx.cico.VerificationTransaction"},{"class":"foam.nanos.ruler.predicate.PropertyChangePredicate","propName":"status"}]},"action":{"class":"net.nanopay.tx.ruler.SendNotification","notification":{"class":"foam.nanos.notification.Notification","notificationType":"Verification Transaction declined","body":"Verification Transaction was declined","groupId":"support","emailIsEnabled":true}},"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":"Declined Compliance Transaction Notification","operation":1,"priority":100,"ruleGroup":"Notifications","documentation":"Sends a Notification to support about a failed compliance transaction","daoKey":"localTransactionDAO","after":true,"predicate":{"class":"foam.mlang.predicate.And","args":[{"class":"net.nanopay.tx.ruler.PropertyEQValue","propName":"status","propValue":{"class":"net.nanopay.tx.model.TransactionStatus","ordinal":4}},{"class":"net.nanopay.meter.compliance.ruler.predicate.IsInstancePredicate","of":"net.nanopay.tx.ComplianceTransaction"}]},"action":{"class":"net.nanopay.tx.ruler.SendNotification","notification":{"class":"foam.nanos.notification.Notification","notificationType":"Compliance Transaction declined","body":"Compliance Transaction was declined","groupId":"support","emailIsEnabled":true}},"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":"statusHistory Update Rule","priority":100,"ruleGroup":"StatusHistory","documentation":"When transaction status changes update the status history array with a timestamped entry.","daoKey":"localTransactionDAO","operation":1,"predicate":{"class":"net.nanopay.tx.ruler.PropertyChangePredicate","propName":"status"},"action":{"class":"net.nanopay.tx.ruler.AddStatusHistoryAction"}})
p({"class":"foam.nanos.ruler.Rule","id":"FOP Transaction Planner","priority":100,"ruleGroup":"SecurityPlanner","daoKey":"securityPlanner","enabled":false,"operation":0})
p({"class":"foam.nanos.ruler.Rule","id":"DVP Transaction Planner","priority":90,"ruleGroup":"SecurityPlanner","daoKey":"securityPlanner","enabled":false,"operation":0})
p({"class":"foam.nanos.ruler.Rule","id":"Bucket Transaction Planner","priority":80,"ruleGroup":"SecurityPlanner","daoKey":"securityPlanner","enabled":false,"operation":0})
p({"class":"foam.nanos.ruler.Rule","id":"Validator Rule","priority":1,"ruleGroup":"SecurityPlanner","daoKey":"securityPlanner","enabled":false,"operation":0})
