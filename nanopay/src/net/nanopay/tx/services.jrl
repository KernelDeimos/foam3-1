p({"class":"foam.nanos.boot.NSpec", "name":"localTransactionDAO",              "lazy":true,  "serve":false, "serviceScript":"import net.nanopay.tx.model.Transaction; import foam.dao.MDAO;import net.nanopay.tx.PayerTransactionDAO; import net.nanopay.tx.PayeeTransactionDAO; import net.nanopay.tx.TransactionAdapterDAO; import net.nanopay.tx.RejectTransactionNotificationDAO; import net.nanopay.tx.DuplicateTransactionCheckDAO; import net.nanopay.tx.BankAccountInvoiceDAO; import net.nanopay.tx.UpdateInvoiceTransactionDAO; import net.nanopay.tx.RefundTransactionCheckDAO; import net.nanopay.tx.EmailVerifiedTransactionDAO; import net.nanopay.tx.TransactionAmountCheckDAO; import net.nanopay.tx.PaidTransactionDAO; import net.nanopay.tx.PaidTransferDAO; import net.nanopay.tx.SetDateTransactionDAO; import net.nanopay.tx.TransactionDAO; import net.nanopay.security.HashingJDAO; import net.nanopay.tx.LiquidityDAO; import foam.dao.SequenceNumberDAO; MDAO transactionMDao = new MDAO(Transaction.getOwnClassInfo()); transactionMDao.addIndex(new foam.core.PropertyInfo[] {Transaction.STATUS, Transaction.SOURCE_ACCOUNT,Transaction.DESTINATION_ACCOUNT, Transaction.TYPE}); TransactionDAO aa = new TransactionDAO(x, transactionMDao); HashingJDAO a = new HashingJDAO(x, \"SHA-512/256\", true, aa, \"transactions\"); foam.dao.ProxyDAO aware = new foam.nanos.auth.CreatedAwareDAO.Builder(x).setDelegate(new foam.nanos.auth.CreatedByAwareDAO.Builder(x).setDelegate(new foam.nanos.auth.LastModifiedAwareDAO.Builder(x).setDelegate(new foam.nanos.auth.LastModifiedByAwareDAO.Builder(x).setDelegate(new SequenceNumberDAO(a)).build()).build()).build()).build(); RejectTransactionNotificationDAO b = new RejectTransactionNotificationDAO(x, aware); DuplicateTransactionCheckDAO c = new DuplicateTransactionCheckDAO(x, b); BankAccountInvoiceDAO d = new BankAccountInvoiceDAO(x, c); UpdateInvoiceTransactionDAO e = new UpdateInvoiceTransactionDAO(x, d); RefundTransactionCheckDAO f = new RefundTransactionCheckDAO(x, e); EmailVerifiedTransactionDAO h = new EmailVerifiedTransactionDAO(x, f); TransactionAmountCheckDAO i = new TransactionAmountCheckDAO(x, h); PaidTransactionDAO j = new PaidTransactionDAO(x, i); PaidTransferDAO k = new PaidTransferDAO(x, j); LiquidityDAO m = new LiquidityDAO(x, k); TransactionAdapterDAO ta = new TransactionAdapterDAO(x, m); PayeeTransactionDAO n = new PayeeTransactionDAO(x, ta); PayerTransactionDAO o = new PayerTransactionDAO(x, n); return new foam.dao.PMDAO(x, o);"})
p({"class":"foam.nanos.boot.NSpec", "name":"transactionDAO",                   "lazy":true,  "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new net.nanopay.tx.tp.realex.RealexTransactionDAO(x, new net.nanopay.tx.AuthenticatedTransactionDAO( x.get(\"localTransactionDAO\")))).orderBy(new foam.mlang.order.Desc(net.nanopay.tx.model.Transaction.CREATED));","client":"{\"of\":\"net.nanopay.tx.model.Transaction\", \"remoteListenerSupport\": false}"})
p({"class":"foam.nanos.boot.NSpec", "name":"liquidityService",                 "lazy":true,  "serve":false, "serviceScript":"return new net.nanopay.tx.model.LiquidityService();"})
p({"class":"foam.nanos.boot.NSpec", "name":"transactionPurposeDAO",            "lazy":true,  "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.AuthenticatedDAO(\"transactionPurpose\", new foam.dao.java.JDAO(x, net.nanopay.tx.TransactionPurpose.getOwnClassInfo(), \"transactionPurposes\")));", "client":"{\"of\":\"net.nanopay.tx.TransactionPurpose\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"transactionLimitDAO",              "lazy":true,  "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.java.JDAO(x, net.nanopay.tx.model.TransactionLimit.getOwnClassInfo(), \"transactionLimits\"));", "client":"{\"of\":\"net.nanopay.tx.model.TransactionLimit\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"userTransactionLimit",             "lazy":true,  "serve":true,  "boxClass":"net.nanopay.tx.UserTransactionLimitSkeleton", "serviceClass":"net.nanopay.tx.UserTransactionLimitService","client":"{ \"class\":\"net.nanopay.tx.client.ClientUserTransactionLimitService\", \"delegate\": { \"class\":\"foam.box.HTTPBox\", \"url\":\"service/userTransactionLimit\" } }"})
p({"class":"foam.nanos.boot.NSpec", "name":"stripeTransactionDAO",             "lazy":true,  "serve":true,  "serviceScript":"return new net.nanopay.tx.tp.stripe.StripeTransactionDAO(x, x.get(\"transactionDAO\"));","client":"{\"of\":\"net.nanopay.tx.model.Transaction\"}","description":"transaction dao for stripe"})
