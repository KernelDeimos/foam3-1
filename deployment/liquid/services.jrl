p({
  "class": "foam.nanos.boot.NSpec",
  "name": "auth",
  "serve": true,
  "authenticate": false,
  "boxClass": "foam.nanos.auth.AuthServiceSkeleton",
  "serviceScript": """
    auth = new net.nanopay.auth.NanopayUserAndGroupAuthService(x);
    auth = new net.nanopay.meter.compliance.ComplianceAuthService.Builder(x).setDelegate(auth).build();
    auth = new net.nanopay.liquidity.crunch.LiquidCapabilityAuthService.Builder(x).setDelegate(auth).build();
    auth = new foam.nanos.auth.CachingAuthService(auth, new String[]{ "signingOfficerJunctionDAO", "blacklistDAO", "userCapabilityJunctionDAO", "localCapabilityDAO", "localAccountDAO" });
    auth = new foam.nanos.auth.EnabledCheckAuthService.Builder(x).setDelegate(auth).build();
    auth = new foam.nanos.auth.PasswordExpiryAuthService.Builder(x).setDelegate(auth).build();
    auth = new net.nanopay.security.auth.LoginAttemptAuthService.Builder(x).setDelegate(auth).build();
    auth = new net.nanopay.security.auth.IPLoggingAuthService.Builder(x).setDelegate(auth).build();
    auth = new net.nanopay.auth.BusinessAuthService.Builder(x).setDelegate(auth).build();
    auth = new foam.nanos.auth.twofactor.TwoFactorAuthService.Builder(x).setDelegate(auth).build();
    auth = new foam.nanos.auth.SystemAuthService.Builder(x).setDelegate(auth).build();
    return auth;
  """,
  "client": """
    {
      "class": "foam.nanos.auth.ClientLoginAuthService"
    }
  """
})
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "http",
  "lazy": false,
  "service": {
    "class": "foam.nanos.jetty.HttpServer",
    "port": 8080,
    "forwardedForProxyWhitelist": [],
    "welcomeFiles": ["welcome"],
    "servletMappings": [{
      "class": "foam.nanos.servlet.ServletMapping",
      "servletObject": {
        "class": "foam.nanos.servlet.VirtualHostRoutingServlet",
        "hostMapping": {
          "ablii": "/nanopay/src/net/nanopay/sme/index.html",
          "localhost": "/nanopay/src/net/nanopay/index.html",
          "liquid": "/nanopay/src/net/nanopay/liquid.html",
          "merchantpos": "/nanopay/src/net/nanopay/merchant/index.html"
        },
        "defaultHost": "liquid"
      },
      "pathSpec": "/welcome"
    }, {
      "class": "foam.nanos.servlet.ServletMapping",
      "className": "foam.nanos.http.NanoRouter",
      "pathSpec": "/service/*"
    }, {
      "class": "foam.nanos.servlet.ServletMapping",
      "className": "foam.nanos.servlet.ImageServlet",
      "pathSpec": "/images/*",
      "initParameters": {
        "paths": "images:merchant/src/net/nanopay/merchant/images:nanopay/src/net/nanopay/images:foam2/src/foam/support/images:foam2/src/foam/u2/images"
      }
    }, {
      "class": "foam.nanos.servlet.ServletMapping",
      "className": "org.eclipse.jetty.servlet.DefaultServlet",
      "pathSpec": "/*",
      "initParameters": {
        "pathInfoOnly": "true",
        "welcomeServlets": "true",
        "dirAllowed": "false"
      }
    }],
    "errorMappings": [{
      "class": "foam.nanos.servlet.ErrorPageMapping",
      "errorCode": 404,
      "location": "/nanopay/src/net/nanopay/ui/errorPage/errorPage.html"
    }, {
      "class": "foam.nanos.servlet.ErrorPageMapping",
      "exceptionType": "javax.ws.rs.NotAuthorizedException",
      "location": "/nanopay/src/net/nanopay/ui/unauthorizedAccess/unauthorizedAccess.html"
    }, {
      "class": "foam.nanos.servlet.ErrorPageMapping",
      "exceptionType": "java.lang.Throwable",
      "location": "/nanopay/src/net/nanopay/ui/errorPage/errorPage.html"
    }],
    "filterMappings": [{
      "class": "foam.nanos.servlet.FilterMapping",
      "filterClass": "net.nanopay.security.csp.CSPFilter",
      "pathSpec": "/*",
      "initParameters": {
        "CONTENT_SECURITY_POLICY": """
          default-src 'none';
          child-src 'self';
          worker-src 'self';
          connect-src 'self' data: blob: filesystem: ws:;
          script-src 'self' https://cdn.plaid.com/link/v2/stable/link-initialize.js 'unsafe-eval' 'sha256-HY1JzEwuxkis4xx0ggY23gbYY/MCEAE1T6+OQnWS2vA=' 'sha256-NiNrLgJ8wbIXIi5saiR3XTd1Mxm4k0nju66GJsw4b9U=' 'sha256-FLYDXBkz4oo/H5jEfYXqAGYUwERY44OO1yznaMCdMiU=' 'sha256-G3UfiJBy6rwOk3glkBQuQDFA7IoCtiOT56gTh+IfNF0=';
          style-src 'self' https://fonts.googleapis.com/css https://fonts.googleapis.com/icon data: chrome-extension-resource: 'unsafe-inline';
          font-src 'self' https://fonts.gstatic.com data: chrome-extension-resource:;
          img-src 'self' data: blob: filesystem:;
          media-src * data: blob: filesystem:;
          object-src 'self' data: blob: filesystem:;
          frame-src 'self' https://cdn.plaid.com/link/ nanopay.net nanopay.net data: chrome-extension-resource:;
          report-uri /service/CSPReportWebAgent;
        """
      }
    }]
  }
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"appConfig",
  "description":"",
  "lazy":false,
  "parameters":false,
  "pm":true,
  "service": {
    "class":"foam.nanos.app.AppConfig",
    "name": "liquid",
    "privacy":"Privacy Policy",
    "privacyUrl":"https://www.nanopay.net/wp-content/uploads/2019/04/nanopay-Privacy-Policy.pdf",
    "copyright":"Copyright Â© 2017-@{currentYear} nanopay Corp. All rights reserved.",
    "urlLabel":"Powered by nanopay",
    "termsAndCondLabel":"Terms and Conditions",
    "termsAndCondLink":"https://nanopay.net/wp-content/uploads/2019/04/nanopay-Terms-of-Service.pdf",
    "playLink":"https://play.google.com/store?hl=en",
    "url":"http://liquid:8080"
  }
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"testRunnerConfig",
  "service": {
    "class":"foam.nanos.script.TestRunnerConfig",
    "testSuite": "liquid"
  }
})

p({
  "class":"foam.nanos.boot.NSpec", 
  "name":"localAccountDAO",
  "lazy":false,
  "serviceScript":
  """
    import net.nanopay.account.Account;
    import foam.dao.DAO;
    import net.nanopay.liquidity.approvalRequest.AccountApprovableAwareDAO;
    import foam.nanos.mrac.*;

    dao = new foam.dao.MDAO(Account.getOwnClassInfo());

    dao.addIndex(new foam.core.PropertyInfo[] { net.nanopay.account.Account.OWNER, net.nanopay.account.Account.IS_DEFAULT });
    dao.addIndex(new foam.core.PropertyInfo[] { net.nanopay.account.Account.NAME });
    dao.addIndex(new foam.core.PropertyInfo[] { net.nanopay.account.Account.DENOMINATION });
    dao.addIndex(new foam.core.PropertyInfo[] { net.nanopay.account.Account.DENOMINATION,net.nanopay.account.Account.SECURITIES_ACCOUNT });
    dao.addIndex(new foam.core.PropertyInfo[] { net.nanopay.account.Account.LIFECYCLE_STATE });
    dao.addIndex(new foam.core.PropertyInfo[] { net.nanopay.account.Account.PARENT });

    if ( "true".equals(System.getProperty("CLUSTER")) ) {
      dao = new MMDAO(x, "localAccountDAO", dao, "singleJournal", "accounts");
    } else {
      dao = new net.nanopay.security.HashingJDAO(x, "SHA-256", false, true, dao, "accounts");
    }
    dao = new AccountApprovableAwareDAO.Builder(x)
      .setOf(Account.getOwnClassInfo())
      .setDaoKey("localAccountDAO")
      .setDelegate(dao)
      .build();

    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setSeqNo(true)
      .setDeletedAware(false)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("accounts")
      .setAuthorize(false)
      .setOf(Account.getOwnClassInfo())
      .setInnerDAO(dao)
      .build();
  """
})
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"accountDAO",
  "lazy":false,
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setInnerDAO(new foam.dao.ValidatingDAO(x, ((foam.dao.DAO) x.get("localAccountDAO"))))
      .setAuthorizer(new net.nanopay.liquidity.crunch.LiquidAuthorizer.Builder(x).setPermissionPrefix("account").build())
      .setOf(net.nanopay.account.Account.getOwnClassInfo())
      .setEnableInterfaceDecorators(false)
      .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.account.Account",
    "decorators": [
      {
        "class":"foam.nanos.fs.FileDAODecorator"
      }
    ]
  }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "id":"balanceDAO",
  "client":
  """
  {
    "of":"net.nanopay.account.Balance",
    "requestResponseCaching":true,
    "decorators": [{
      "class":"foam.nanos.fs.FileArrayDAODecorator"
    }]
  }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "id":"exchangeRateDAO",
  "client":
  """
  {
    "of":"net.nanopay.fx.ExchangeRate",
    "requestResponseCaching":true,
    "cache": true
  }
  """
})

p({
  "class":"foam.nanos.boot.NSpec", "name":"localTransactionDAO",
  "lazy":false,
  "serviceScript":
  """
    import foam.core.PropertyInfo;
    import net.nanopay.tx.model.Transaction;
    import foam.nanos.mrac.*;
    transactionMDao = new foam.dao.MDAO(Transaction.getOwnClassInfo());

    // Add indexes
    transactionMDao.addIndex(new PropertyInfo[] {Transaction.CREATED});
    transactionMDao.addIndex(new PropertyInfo[] {Transaction.LAST_MODIFIED});
    transactionMDao.addIndex(new PropertyInfo[] {Transaction.LIFECYCLE_STATE});
    transactionMDao.addIndex(new PropertyInfo[] {Transaction.STATUS});
    transactionMDao.addIndex(new PropertyInfo[] {Transaction.STATUS, Transaction.PARENT});
    transactionMDao.addIndex(new PropertyInfo[] {Transaction.STATUS, Transaction.DESTINATION_ACCOUNT});
    transactionMDao.addIndex(new PropertyInfo[] {Transaction.TYPE});
    transactionMDao.addIndex(new PropertyInfo[] {Transaction.PARENT});
    transactionMDao.addIndex(new PropertyInfo[] {Transaction.DESTINATION_ACCOUNT});
    transactionMDao.addIndex(new PropertyInfo[] {Transaction.SOURCE_ACCOUNT});
    transactionMDao.addIndex(new PropertyInfo[] {Transaction.LAST_STATUS_CHANGE});

    // Set DAO chain
    dao = new foam.nanos.analytics.DAOFoldManager.Builder(x)
      .setDao(x.get("accountBalanceHourlyCandlestickDAO"))
      .setPeriodLengthMs(60 * 60 * 1000)
      .build();
    dao = new foam.nanos.analytics.FoldManagerDAODecorator.Builder(x)
      .setDelegate(transactionMDao)
      .setFm(dao)
      .build();
    dao = new net.nanopay.tx.TransactionDAO(x, dao);


    if ( "true".equals(System.getProperty("CLUSTER")) ) {
      dao = new MMDAO(x, "localTransactionDAO", dao, "singleJournal", "transactions");
    } else {
      dao = new net.nanopay.security.HashingJDAO(x, "SHA-256", true, dao, "transactions");
    }
    dao = new foam.dao.ValidatingDAO(x, dao, new net.nanopay.tx.LiquidTransactionValidator());
    dao = new foam.nanos.auth.LifecycleAwareDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new foam.dao.ContextualizingDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new foam.nanos.auth.CreatedAwareDAO.Builder(x)
      .setDelegate(new foam.nanos.auth.CreatedByAwareDAO.Builder(x)
        .setDelegate(new foam.nanos.auth.LastModifiedAwareDAO.Builder(x)
          .setDelegate(new foam.nanos.auth.LastModifiedByAwareDAO.Builder(x)
            .setDelegate(dao)
            .build())
          .build())
        .build())
      .build();
    dao = new foam.nanos.ruler.RulerDAO(x, dao, "localTransactionDAO");
    dao = new net.nanopay.tx.UpdateInvoiceTransactionDAO(x, dao);
    dao = new net.nanopay.tx.ExecuteMethodsTransactionDAO.Builder(x)
      .setDelegate(dao)
      .build();

    if ( "true".equals(System.getProperty("CLUSTER")) ) {
      dao = new net.nanopay.tx.ClusterClientTransactionDAO.Builder(x)
        .setServiceName("transactionDAO")
        .setDelegate(dao)
        .build();
    }
    dao = new net.nanopay.tx.CheckQuotedTransactionDAO(x, dao);    
    return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, dao));
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localTransactionQuotePlanDAO",
  "lazy":false,
  "serviceScript":
  """
    dao = new net.nanopay.tx.SplitTransactionPlanDAO.Builder(x)
      .setDelegate(null)
      .build();
    dao = new net.nanopay.tx.TransactionQuoteDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.fx.GenericFXPlanDAO.Builder(x)
          .setDelegate(dao)
          .build();
    dao = new net.nanopay.tx.GenericCIPlanner.Builder(x)
          .setDelegate(dao)
          .build();
    dao = new net.nanopay.tx.DigitalTransactionPlanDAO(x, dao);
    dao = new net.nanopay.tx.planner.TransactionPlannerDAO(x, dao);
    dao = new foam.dao.ValidatingDAO(x, dao, new net.nanopay.tx.RequestTransactionValidator());
    dao = new net.nanopay.tx.QuoteFillerDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.GuidTransactionPlanDAO.Builder(x)
      .setDelegate(dao)
      .build();

    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.TransactionQuote.getOwnClassInfo())
      .setCluster(false)
      .setPm(true)
      .setPipelinePm(true)
      .setNullify(true)
      .setDecorator(dao)
      .build();
  """
})

p({"class":"foam.nanos.boot.NSpec","id":"balanceDAO","client":"{\"of\":\"net.nanopay.account.Balance\",\"requestResponseCaching\":true,\"cache\":true,\"decorators\": [{\"class\":\"foam.nanos.fs.FileArrayDAODecorator\"}]}"})
p({
  "class":
  "foam.nanos.boot.NSpec",
  "id":"exchangeRateDAO",
  "client":"{\"of\":\"net.nanopay.fx.ExchangeRate\",\"requestResponseCaching\":true,\"cache\":true}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "userDAO",
  "serve": true,  
  "description": "Client authenticated userDAO", 
  "authenticate": false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
        .setPm(true)
        .setPipelinePm(true)
        .setValidated(true)
        .setValidator(new foam.nanos.auth.validators.UserGroupAndSpidValidator()) 
        .setOf(foam.nanos.auth.User.getOwnClassInfo())
        .setInnerDAO(x.get("localUserDAO"))
        .setAuthorizer(new net.nanopay.liquidity.crunch.LiquidAuthorizer.Builder(x).setPermissionPrefix("user").build())
        .setDeletedAware(false)
        .build();
  """,
  "client":
  """
  {
    "of": "foam.nanos.auth.User",
    "cache": false,
    "decorators": [
      {
        "class":"foam.nanos.fs.FileDAODecorator"
      },
      {
        "class":"foam.nanos.fs.FileArrayDAODecorator"
      }
    ]
  }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "liquiditySettingsUserDAO",
  "serve": true,
  "description": "filtered DAO for liquidBasic users",
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.auth.User.getOwnClassInfo()) 
      .setInnerDAO(x.get("userDAO"))
      .setDecorator(
        new foam.dao.FilteredDAO.Builder(x)
          .setPredicate(foam.mlang.MLang.AND( new foam.mlang.predicate.Predicate[] {
            foam.mlang.MLang.EQ(foam.nanos.auth.User.GROUP, "liquidBasic"),
            foam.mlang.MLang.EQ(foam.nanos.auth.User.LIFECYCLE_STATE, foam.nanos.auth.LifecycleState.ACTIVE)
          }))
        .build())
      .setDeletedAware(false)
      .build();
  """,
  "client":
  """
  {
    "of": "foam.nanos.auth.User",
    "cache": false,
    "decorators": [
      {
        "class":"foam.nanos.fs.FileDAODecorator"
      },
      {
        "class":"foam.nanos.fs.FileArrayDAODecorator"
      }
    ]
  }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localUserDAO",
  "lazy": false,
  "serviceScript":
  """
    dao = new foam.nanos.approval.ApprovableAwareDAO.Builder(x)
    .setDaoKey("userDAO")
    .setOf(foam.nanos.auth.User.getOwnClassInfo())
    .build();
    
    dao = new net.nanopay.contacts.AddExternalContactToken(x, dao);
    dao = new foam.nanos.auth.UserPasswordHashingDAO(x, dao);
    dao = new net.nanopay.security.auth.LogoutDisabledUserDAO.Builder(x).setDelegate(dao).build();
    dao = new net.nanopay.meter.AdditionalDocumentsUpdatedIpHistoryDAO.Builder(x).setDelegate(dao).build();
    dao = new net.nanopay.contacts.UpdateSignUpStatusDAO(x, dao);
    dao = new net.nanopay.onboarding.CreateBusinessDAO(x, dao);
    dao = new net.nanopay.onboarding.email.RegistrationSubmissionEmailDAO(x, dao);
    dao = new net.nanopay.auth.email.EmailVerificationDAO(x, dao);
    dao = new foam.nanos.geocode.GoogleMapsGeocodingDAO(x, "AIzaSyDIf0KB9lok7rg0HU9Q92uK2JuOXpXNnr0", foam.nanos.auth.User.ADDRESS, dao);
    dao = new net.nanopay.admin.AccountStatusUserDAO(x, dao);
    dao = new net.nanopay.contacts.PreventDuplicateContactEmailDAO(x, dao);
    dao = new net.nanopay.auth.email.PreventDuplicateEmailDAO(x, dao);
    dao = new net.nanopay.auth.email.CheckEmailWhitelistDAO(x, dao);

    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.auth.User.getOwnClassInfo())
      .setEnableInterfaceDecorators(false)
      .setRuler(true)
      .setSeqNo(true)
      .setAuthorize(false)
      .setDeletedAware(false)
      .setValidated(true)
      .setInnerDAO(x.get("bareUserDAO"))
      .setDecorator(dao)
      .build();
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "ruleDAO",
  "serve": true,
  "serviceScript": 
  """
    import foam.dao.DAO;
    import net.nanopay.liquidity.tx.BusinessRule;

    DAO dao = new net.nanopay.business.SetBusinessNameDAO.Builder(x)
      .setReferenceProperty(net.nanopay.tx.ruler.BusinessLimit.BUSINESS)
      .setNameProperty(net.nanopay.tx.ruler.BusinessLimit.BUSINESS_NAME)
      .setDelegate(null)
      .build();

    dao = new foam.nanos.approval.ApprovableAwareDAO.Builder(x)
      .setDaoKey("ruleDAO")
      .setOf(BusinessRule.getOwnClassInfo())
      .setDelegate(dao)
      .build();
      
    dao = new foam.nanos.auth.LifecycleAwareDAO.Builder(x)
      .setDelegate(dao)
      .setName("rule")
      .build();

    dao = new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setGuid(true)
      .setContextualize(true)
      .setOf(foam.nanos.ruler.Rule.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("rules")
      .setDecorator(dao)
      .setValidated(true)
      .setRuler(false)
      .setAuthorizer(new net.nanopay.liquidity.crunch.LiquidAuthorizer.Builder(x).setPermissionPrefix("rule").build())
      .build();

    dao.addPropertyIndex(new foam.core.PropertyInfo[] { foam.nanos.ruler.Rule.NAME });

    return dao;
  """,
  "client": """
    {
      "of": "foam.nanos.ruler.Rule"
    }
  """
})

p({
  "class":"foam.nanos.boot.NSpec", 
  "name":"liquiditySettingsDAO",
  "serve":true,  
  "serviceScript":
  """
  import net.nanopay.liquidity.LiquiditySettings;
  import foam.dao.DAO;

  DAO dao = new foam.nanos.analytics.FoldManagerDAODecorator.Builder(x)
    .setFm(
      new foam.nanos.analytics.DAOFoldManager.Builder(x)
        .setDao((foam.dao.DAO) x.get("liquidityThresholdCandlestickDAO"))
        .setPeriodLengthMs(60 * 60 * 1000)
        .build()
    )
    .build();
  
  dao = new foam.nanos.approval.ApprovableAwareDAO.Builder(x)
    .setDaoKey("liquiditySettingsDAO")
    .setOf(LiquiditySettings.getOwnClassInfo())
    .setDelegate(dao)
    .build();

  return new foam.dao.EasyDAO.Builder(x)
    .setPm(true)
    .setSeqNo(true)
    .setValidator(new net.nanopay.liquidity.LiquiditySettingValidator())
    .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
    .setJournalName("liquiditySettings")
    .setAuthorizer(new net.nanopay.liquidity.crunch.LiquidAuthorizer.Builder(x).setPermissionPrefix("liquiditysettings").build())
    .setOf(net.nanopay.liquidity.LiquiditySettings.getOwnClassInfo())
    .setDecorator(dao)
    .build();
  """, 
  "client": "{\"of\":\"net.nanopay.liquidity.LiquiditySettings\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"transactionDAO",
  "lazy":false,
  "serve":true,
  "serviceScript":
  """
    import foam.mlang.order.Comparator;

    Comparator[] cArray = new Comparator[1];

    // TODO: should we change this LastModified not Created
    cArray[0] = new foam.mlang.order.Desc(net.nanopay.tx.model.Transaction.LAST_MODIFIED);

    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.model.Transaction.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .setPermissioned(true)
      .setOrder(cArray)
      .setInnerDAO(x.get("localTransactionDAO"))
      .setAuthorizer(new net.nanopay.liquidity.crunch.LiquidTransactionAuthorizer("transaction"))
      .setEnableInterfaceDecorators(false)
      .build();
  """,
  "client":
  """
    {
      "of":"net.nanopay.tx.model.Transaction", 
      "remoteListenerSupport": false,
      "serverBox": { 
        "class":"foam.box.SessionClientBox", 
        "url":"service/transactionDAO", 
        "delegate": { 
          "class":"foam.box.TimeoutBox",
          "timeout":60000,
          "delegate": {
            "class":"foam.box.HTTPBox", 
            "url":"service/transactionDAO"
          }
        }
      }
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "approvalRequestDAO",
  "serve": true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.approval.ApprovalRequest.getOwnClassInfo())
      .setAuthorizer(new net.nanopay.liquidity.crunch.LiquidApprovalRequestAuthorizer.Builder(x).setPermissionPrefix("approve").build())
      .setPm(true)
      .setPipelinePm(true)
      .setSeqNo(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("approvalRequests")
      .setValidated(true)
      .setRulerDaoKey("approvalRequestDAO")
      .setDecorator(
        new foam.nanos.approval.SendGroupRequestApprovalDAO(x,
          new net.nanopay.approval.ApprovalRequestNotificationDAO(x,
            new foam.nanos.approval.ApprovalDAO(x, null)
          )
        )
      )
      .setIndex(new foam.core.PropertyInfo[] {foam.nanos.approval.ApprovalRequest.CREATED})
      .build()
      .orderBy(foam.mlang.MLang.DESC(foam.nanos.approval.ApprovalRequest.CREATED));
  """,
  "client": "{\"of\":\"foam.nanos.approval.ApprovalRequest\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "tableViewTransactionDAO",
  "lazy": false,
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.model.Transaction.getOwnClassInfo())
      .setInnerDAO(x.get("transactionDAO"))
      .setDecorator(new net.nanopay.tx.TransactionEntitiesDAO(x, null))
      .setAuthorize(false)
      .setPm(true)
      .setPipelinePm(false)
      .setPermissioned(false)
      .setRuler(false)
      .setEnableInterfaceDecorators(false)
      .build();
  """,
  "client": 
  """
  {
    "of":"net.nanopay.tx.model.Transaction", 
    "remoteListenerSupport": false, 
    "serverBox": { 
      "class":"foam.box.SessionClientBox", 
      "url":"service/tableViewTransactionDAO", 
      "delegate": { 
        "class":"foam.box.TimeoutBox", 
        "timeout":25000,
        "delegate": {
          "class":"foam.box.HTTPBox", 
          "url":"service/tableViewTransactionDAO"
        }
      }
    }
  }
  """
})
