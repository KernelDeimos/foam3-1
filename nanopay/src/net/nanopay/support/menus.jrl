p({"class":"foam.nanos.menu.Menu","id":"Dev-intro","label":"Introduction","handler":{"class":"foam.nanos.menu.DocumentMenu","text":"<h2>Introduction</h2>\n<p>\nnanopay is a financial market infrastructure (FMI) platform that enables central banks, banks, businesses and government agencies to securely store & transfer digital fiat between parties instantly. The platform allows real time transaction settlement with data-rich payments.  It effectively creates virtual immutable ledgers that can transfer value in one or multiple currencies in real time. Transactions support ISO 20022 and can be integrated directly into accounting ledgers for both accounting and regulatory capital calculations. \n</p>\n<p>\nThe nanopay system uses a novel in-memory data architecture, coupled with an append-only transaction journal, to achieve extremely high transaction throughput and very low settlement latency. Since the system is designed for handling financial transactions it is designed to deliver high degrees of both security and resilience. Transactions are irrevocable, incontestable and demonstrate finality of settlement. It ensures that settlement can only complete when sufficient funds are available. In addition, the system is able to achieve an unprecedented level of performance, an exceptional level of availability and high degrees of resilience against both platform failures and deliberate attacks.\n</p>\n<p>\nIt is important to point out that nanopay platform is not a cryptocurrency nor does it create new value. Since the nanopay system represents digital fiat currency, value may be transferred into the system or out of the system, but it is not created in the system in the way that it is in many cryptocurrency systems. Furthermore, the nanopay system is built on the principle that a single authority will be the final arbiter of whether a transaction has completed or not. \n</p>\n\n<h2>Architecture</h2>\n<p>\nThere are many parts to the nanopay system but at its heart the two components that embody the central authority are the transaction ledger and the transaction engine. User and accounts are also key concepts of the platform which are worth highlighting.\n</p>\n<p>\nFrom an implementation point of view, the nanopay architecture is purpose built to enable easy integration and horizontal scalability. Today nanopay has over 140 nano-services that create a rich loosely-coupled, highly-configurable and easily extensible payment platform to support a broad range of solutions.\n</p>"},"parent":"Dev-Portal"})
p({"class":"foam.nanos.menu.Menu","id":"Dev-QuickStart","label":"Quick Start","handler":{"class":"foam.nanos.menu.LinkMenu","link":"#sample-request"},"parent":"Dev-Portal"})
p({"class":"foam.nanos.menu.Menu","id":"Dev-UML-Docs","label":"UML Documentation","handler":{"class":"foam.nanos.menu.LinkMenu","link":"#model-doc"},"parent":"Dev-Portal"})
p({"class":"foam.nanos.menu.Menu","id":"Dev-Portal","label":"Development Portal","handler":{"class":"foam.nanos.menu.SubMenu"},"order":90,"parent":""})
p({"class":"foam.nanos.menu.Menu","id":"Dev-API-Docs","label":"API Documentation","handler":{"class":"foam.nanos.menu.LinkMenu","link":"#api-doc"},"parent":"Dev-Portal"})
p({"class":"foam.nanos.menu.Menu","id":"Dev-concepts","label":"Concepts","handler":{"class":"foam.nanos.menu.DocumentMenu","text":"<h2>Core Concepts</h2>\n<b>Users</b>\n<p>\nIn the nanopay platform, a user can be a human or a legal entity (e.g. department, organization, etc). Users can be authorized to perform specific operations or access certain services, views or actions. A digital account is created and associated to a user when a new user is created within the system. The transfer of digital cash can then occur between users or accounts.\n<p>\n\n\n<b>Accounts</b>\n<p>\nIn the nanopay platform, accounts accept customer financial assets, e.g. digital cash, and hold them on behalf of the user. To support the digital cash platform, two types of accounts are provided - a bank account and a digital cash account. Bank accounts represent the user's actual bank accounts, enabling money flow in and out of the nanopay platform. Digital cash accounts hold fully collateralized representations of digital cash and enables users to transfer digital cash in real time.\n</p>\n\n<b>The transaction ledger</b>\n<p>\nAs with most transaction processing architectures, at the heart of the system is a ledger of all the transactions that have occurred to bring the system to its current state. In the case of the nanopay system however, the ledger is not simply an audit trail; it is the definitive store of data. \n</p>\n\n<p>\nIn order to ensure resilience against failure, the ledger can be replicated in multiple locations. When replication is used one system acts as the `master' and the other systems operate as `copy' working in lock-step as active standbys, processing the same transactions and\nkeeping the same ledger.\n\n</p>\n\n<p>\n\nSince it is impractical to have to reexamine the entire transaction history before executing each transaction, the relevant current state of the system is replicated in memory. Since all instances of the system execute the same sequence of transactions they all retain the same state internally. If any instance of the system ever fails (or is deliberately shut down) then when it restarts the internal state can be recreated by executing the entire history again. The system is also capable of saving its entire current state as a snapshot and recording this along side, but bound into the ledger, along with the transactional information. By doing so a newly started system only needs to reload the most recently saved snapshot and then execute the transactions that were recorded after the last snapshot.\nThe transaction engine\nTightly coupled to the transaction ledger is the transaction engine. This embodies the logic that determines if a transaction can added to the ledger and if so, what change of state results from doing so. The engine must decide if a transaction is properly authorised and if all of the requirements for the transaction have been met.\n\n</p>\n<p>\n\nOnce a transaction has been authorised it is not possible for the authorisers to make any plausible claim that they did not authorise the transaction. If there is a reason to undo a transaction then this needs to be done by issuing another (properly authorised) reverse transaction. A transaction can process multiple currencies in a single atomic transaction.\n</p>"},"parent":"Dev-Portal"})