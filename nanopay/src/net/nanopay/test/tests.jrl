// p({"class":"net.nanopay.test.ModelledTest","id":"modelledTest"})
p({"class":"net.nanopay.test.DateAndPlaceOfBirthDAOTest","id":"DateAndPlaceOfBirthDAOTest"})
p({"class":"net.nanopay.test.BranchDAOTest","id":"BranchDAO-Test"})
p({"class":"net.nanopay.test.BranchDAOAuthorizationTest","id":"BranchDAOAuthorizationTest"})
p({"class":"net.nanopay.test.BusinessSectorDAOTest","id":"BusinessSectorDAOTest"})
p({"class":"net.nanopay.test.api.AuthenticationApiTest","id":"AuthenticationApiTest"})
p({"class":"net.nanopay.test.api.AuthenticationFailureApiTest","id":"AuthenticationFailureApiTest"})
p({"class":"net.nanopay.test.api.SessionAuthenticationFailureApiTest","id":"SessionAuthenticationFailureApiTest"})
p({"class":"net.nanopay.test.api.PostMethodTest","id":"PostMethodTest"})

// DAO Security Tests
p({"class":"net.nanopay.test.api.DAOSecurityTest.DAOSecurityTestFind","id":"DAOSecurityTestFind"})
p({"class":"net.nanopay.test.api.DAOSecurityTest.DAOSecurityTestSelect","id":"DAOSecurityTestSelect"})
p({"class":"net.nanopay.test.api.DAOSecurityTest.DAOSecurityTestRemoveAll","id":"DAOSecurityTestRemoveAll"})

p({
  class:"foam.nanos.test.Test",
  id:"AbliiOnboardingTest",
  description: "AbliiOnboardingTest",
  server: false,
  code:"""
/* Ablii Onboarding Test */
/* Run this script symultaniously from at least two machines */

/* Number of times to execute this script */
runs = 1;

/* see deployment/test/sessions.jrl for unattended test session associated with admin user 1348 */
adminSession = 'DBFDD224-774E-4716-8508-43FA72E003D9'
/* support both attended and unattended runs */
defaultSession = localStorage && localStorage['defaultSession'] || adminSession;
realUser = x.subject.realUser;
user = x.subject.user;

/* model with helper methods for sudo, creating user, sessions... */
support = net.nanopay.test.AbliiOnboardingSupport.create({
  adminSessionId: defaultSession,
    adminSubject: foam.nanos.auth.Subject.create({
      realUser: realUser,
      user: user
    }, x),
    subject: foam.nanos.auth.Subject.create({
      realUser: realUser,
      user: user
    }, x)
  }, x);

async function execute(x) {
    try {
      support.setup(x);
      console.info('start');
      let n = Math.floor(Math.random() * 10000);

      // create user under admin
      var u;
      try {
        u = await support.createUser(x, 'test-'+support.uid+'-'+n, 'password', 'sme');
        test(true, 'createUser');
      } catch (e) {
        test(false, 'createUser: '+(e.message || e));
        throw e;
      }
      var s;
      try {
        s = await support.createSession(x, u.id, u.id);
        test(true, 'createSession');
      } catch (e) {
        test(false, 'createSession: '+(e.message || e));
        throw e;
      }

      // switch to user.
      support.sudoStore(x);
      x = support.sudo(x, s.id, u, u);

      // general admission 'ablii'
      try {
        await support.generalAdmission(x, u);
        test(true, 'generalAdmission');
      } catch (e) {
        test(false, 'generalAdmission: '+(e.message || e));
        throw e;
      }
      
      try {
        await support.userDateOfBirth(x, u);
        test(true, 'userDateOfBirth');
      } catch (e) {
        test(false, 'userDateOfBirth: '+(e.message || e));
        throw e;
      }
            
      // try {
      //   let cap = await support.abliiUserOnboardingCapability(x, u);
      //   test(true, 'abliiUserOnboardingCapability');
      // } catch (e) {
      //   test(false, 'abliiUserOnboardingCapability: '+(e.message || e));
      //   throw e;
      // }
      // try {
      //   u = await support.updateUserComplianceStatus(x, u);
      //   test(true, 'updateUserComplianceStatus');
      // } catch (e) {
      //   test(false, 'updateUserComplianceStatus: '+(e.message || e));
      //   throw e;
      // }

      // Required for business onboarding
      try {
        await support.userDetails(x, u);
        test(true, 'userDetails');
      } catch (e) {
        test(false, 'userDetails: '+(e.message || e));
        throw e;
      }

      var business;
      try {
        business = await support.createBusiness(x, u);
        test(true, 'createBusiness');
      } catch (e) {
        test(false, 'createBusiness: '+(e.message || e));
        throw e;
      }

      var businessSession;
      try {
        businessSession = await support.createSession(x, u.id, business.id);
        test(true, 'createBusinessSession');
      } catch (e) {
        test(false, 'createBusinessSession: '+(e.message || e));
        throw e;
      }

      // switch to business
      support.sudoStore(x);
      x = support.sudo(x, businessSession.id, u, business);

      try {
        await support.signingOfficerPersonalData(x, u, business);
        test(true, 'signingOfficerPersonalData');
      } catch (e) {
        test(false, 'signingOfficerPersonalData: '+(e.message || e));
        throw e;
      }
      try {
        let cap = await support.abliiBusinessOnboardingCapability(x, u, business);
        test(true, 'abliiBusinessOnboardingCapability');
      } catch (e) {
        test(false, 'abliiBusinessOnboardingCapability: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessInitialData(x, business);
        test(true, 'businessInitialData');
      } catch (e) {
        test(false, 'businessInitialData: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessRegistrationDate(x, business);
        test(true, 'businessRegistrationDate');
      } catch (e) {
        test(false, 'businessRegistrationDate: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessIncorporationDate(x, business);
        test(true, 'businessIncorporationDate');
      } catch (e) {
        test(false, 'businessIncorporationDate: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessTaxIdNumber(x, business);
        test(true, 'businessTaxIdNumber');
      } catch (e) {
        test(false, 'businessTaxIdNumber: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessAnnualFinancialStatement(x, business);
        test(true, 'businessAnnualFinancialStatement');
      } catch (e) {
        test(false, 'businessAnnualFinancialStatement: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessArticleOfIncoporation(x, business);
        test(true, 'businessArticleOfIncoporation');
      } catch (e) {
        test(false, 'businessArticleOfIncoporation: '+(e.message || e));
        throw e;
      }
      try {
        await support.updateBusinessComplianceStatus(x, business);
        test(true, 'updateBusinessComplianceStatus');
      } catch (e) {
        test(false, 'updateBusinessComplianceStatus: '+(e.message || e));
        throw e;
      }
      try {
        await support.transactionDetailsData(x, business);
        test(true, 'transactionDetailsData');
      } catch (e) {
        test(false, 'transactionDetailsData: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessDirectorsData(x, business);
        test(true, 'businessDirectorsData');
      } catch (e) {
        test(false, 'businessDirectorsData: '+(e.message || e));
        throw e;
      }
      try {
        await support.certifyDirectorsListed(x, business);
        test(true, 'certifyDirectorsListed');
      } catch (e) {
        test(false, 'certifyDirectorsListed: '+(e.message || e));
        throw e;
      }
      try {
        await support.ownersPercent(x, business);
        test(true, 'ownersPercent');
      } catch (e) {
        test(false, 'ownersPercent: '+(e.message || e));
        throw e;
      }
      try {
        await support.certifyOwnersPercent(x, business);
        test(true, 'certifyOwnersPercent');
      } catch (e) {
        test(false, 'certifyOwnersPercent: '+(e.message || e));
        throw e;
      }
      try {
        let bank = await support.createUSBankAccount(x, business);
        test(true, 'createBusinessBankAccount');
      } catch (e) {
        test(false, 'createBusinessBankAccount: '+(e.message || e));
        throw e;
      }
      var contact;
      try {
        contact = await support.createContact(x, business);
        test(true, 'createBusinessContact');
      } catch (e) {
        test(false, 'createBusinessContact: '+(e.message || e));
        throw e;
      }
      try {
        let contactbank = await support.createUSBankAccount(x, contact);
        test(true, 'createBusinessContactBankAccount');
      } catch (e) {
        test(false, 'createBusinessContactBankAccount: '+(e.message || e));
        throw e;
      }

      console.info('done');
      support.teardown(x);
    } catch (e) {
      console.error(e.message || e);
      support.teardown(x);
    }
}

async function run(x) {
  var i;
  for ( i = 0; i < runs; i++ ) {
    await execute(x);
  }
}

run(x);
  """
})
