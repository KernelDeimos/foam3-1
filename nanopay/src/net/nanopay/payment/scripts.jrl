p({
  class:"foam.nanos.script.Script",
  id:"Payment provider corridor setup - (AFEX)",
  description:"Sets up payment provider corridor and it's prerequisites",
  code: """
    // Sets up all payment provider corridors for AFEX\
    import foam.mlang.MLang;
    import foam.mlang.predicate.Predicate;
    import net.nanopay.payment.*;
    import foam.core.Currency;
    
    // Supported currencies by AFEX
    String[] supportedCurrencies = {"AED","AFN","ALL","AMD","ARS","AUD","AWG","AZN","BBD","BDT","BGN","BHD","BIF","BMD","BOB","BRL",
      "BSD","BTN","BWP","BZD","CAD","CDF","CHF","CLP","CNH","CNY","COP","CRC","CZK","DJF","DKK","DOP","DZD","EGP","EUR","FJD","GBP","GEL",
      "GHS","GNF","GTQ","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","ISK","JMD","JOD","JPY","KES","KHR","KRW","KWD","KZT","LBP",
      "LKR","LSL","MAD","MDL","MGA","MKD","MMK","MUR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PEN","PGK",
      "PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SEK","SGD","SLL","THB","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX",
      "USD","UYU","UZS","VND","VUV","WST","XAF","XCD","XOF","XPF","ZAR","ZMW"};
    
    // Filter currencies based on currency in journals and AFEX support currencies.
    currs = (x.get("currencyDAO")).where(foam.mlang.MLang.IN(Currency.ID, supportedCurrencies)).select().getArray();
    availableCurrencies = new String[currs.size()];
    int ind = 0;
    for ( currency : currs) {
      id = currency.getId();
      availableCurrencies[ind++] = id;
    }
    countryDAO = x.get("countryDAO");
    countryCapabilityDAO = x.get("countryCapabilityDAO");
    ppcDAO = x.get("paymentProviderCorridorDAO");
    afex = (x.get("paymentProviderDAO")).find("AFEX");
    countries = countryDAO.select().getArray();

    for ( country : countries ) {
      for ( pairCountry : countries ) {
        // Create afex payment provider corridors if missing
        corridor = ppcDAO.find(MLang.AND(new Predicate[] {
          MLang.EQ(PaymentProviderCorridor.SOURCE_COUNTRY, country.getId()),
          MLang.EQ(PaymentProviderCorridor.TARGET_COUNTRY, pairCountry.getId()),
          MLang.EQ(PaymentProviderCorridor.PROVIDER, afex.getId())
        }));
        
        if ( corridor == null ) {
          corridor = new PaymentProviderCorridor();
          corridor.setSourceCountry(country.getId());
          corridor.setTargetCountry(pairCountry.getId());
          corridor.setEnabled(true);
          corridor.setAvailabilityPredicate(foam.mlang.MLang.TRUE);
          corridor.setProvider(afex.getId());
          corridor.setSourceCurrencies(availableCurrencies);
          corridor.setTargetCurrencies(availableCurrencies);
          corridor.setName(country.getId() + "-" + pairCountry.getId() + " Corridor - AFEX");
          corridor = ppcDAO.put(corridor);
          print("New AFEX corridor added: source " + corridor.getSourceCountry() + " target " + corridor.getTargetCountry());
        }
        // inverse of above logic
        trgCorridor = ppcDAO.find(MLang.AND(new Predicate[] {
          MLang.EQ(PaymentProviderCorridor.SOURCE_COUNTRY, pairCountry.getId()),
          MLang.EQ(PaymentProviderCorridor.TARGET_COUNTRY, country.getId()),
          MLang.EQ(PaymentProviderCorridor.PROVIDER, afex.getId())
        }));
        
        if ( trgCorridor == null ) {
          trgCorridor = new PaymentProviderCorridor();
          trgCorridor.setSourceCountry(pairCountry.getId());
          trgCorridor.setTargetCountry(country.getId());
          trgCorridor.setEnabled(true);
          trgCorridor.setAvailabilityPredicate(foam.mlang.MLang.TRUE);
          trgCorridor.setSourceCurrencies(availableCurrencies);
          trgCorridor.setTargetCurrencies(availableCurrencies);
          trgCorridor.setProvider(afex.getId());
          trgCorridor.setName(pairCountry.getId() + "-" + country.getId() + " Corridor AFEX\");
          trgCorridor = ppcDAO.put(trgCorridor);
          print("New AFEX corridor added: source " + trgCorridor.getSourceCountry() + " target " + trgCorridor.getTargetCountry());
        }
      }
    }
    print("Script finished.");
  """
})

p({
  class:"foam.nanos.script.Script",
  id:"Payment Provider Corridor Setup - (BMO)",
  description:"Sets up payment provider corridor and it's prerequisites for BMO",
  code:"""
    // Sets up all payment provider corridors for BMO
    // Prior to running - verify no BMO related corridors exist.
    // Script ensures all prerequisites for payment provider corridor are associated with the newly created corridor.
    // Prerequisite associations are handled by rules on the paymentProviderCorridorDAO
    import foam.mlang.MLang;
    import foam.mlang.predicate.Predicate;
    import net.nanopay.payment.*;

    String[] availableCurrency = {"CAD"};

    ppcDAO = x.get("paymentProviderCorridorDAO");

    bmo = x.get("paymentProviderDAO").find("BMO");

    // Create bmo payment provider corridors if missing
    corridor = ppcDAO.find(MLang.AND(new Predicate[] {
    MLang.EQ(PaymentProviderCorridor.SOURCE_COUNTRY, "CA"),
    MLang.EQ(PaymentProviderCorridor.TARGET_COUNTRY, "CA"),
    MLang.EQ(PaymentProviderCorridor.PROVIDER, bmo.getId())
    }));

    // Remove deprecated corridor
    if ( corridor != null && corridor.getSourceCountry() == null ) {
      ppcDAO.remove(corridor);
    }

    if ( corridor == null ) {
    corridor = new PaymentProviderCorridor();
    corridor.setSourceCountry("CA");
    corridor.setTargetCountry("CA");
    corridor.setSourceCurrencies(availableCurrency);
    corridor.setTargetCurrencies(availableCurrency);
    corridor.setEnabled(true);
    corridor.setAvailabilityPredicate(foam.mlang.MLang.TRUE);
    corridor.setProvider(bmo.getId());
    corridor.setName("CA-CA Corridor BMO");
    corridor = ppcDAO.put(corridor);
    print("BMO corridor added: source CA target CA");
    }

    print("Script Finished.");
  """
})

p({
  class:"foam.nanos.script.Script",
  id:"Payment Provider Corridor Setup - (RBC)",
  description:"Sets up payment provider corridor and it's prerequisites for RBC",
  code:"""
    // Sets up all payment provider corridors for RBC
    // Prior to running - verify no RBC related corridors exist.
    // Script ensures all prerequisites for payment provider corridor are associated with the newly created corridor.
    // Prerequisite associations are handled by rules on the paymentProviderCorridorDAO
    import foam.mlang.MLang;
    import foam.mlang.predicate.Predicate;
    import net.nanopay.payment.*;

    String[] availableCurrency = {"CAD"};

    ppcDAO = x.get("paymentProviderCorridorDAO");

    rbc = x.get("paymentProviderDAO").find("RBC");

    // Create RBC payment provider corridors if missing
    corridor = ppcDAO.find(MLang.AND(new Predicate[] {
    MLang.EQ(PaymentProviderCorridor.SOURCE_COUNTRY, "CA"),
    MLang.EQ(PaymentProviderCorridor.TARGET_COUNTRY, "CA"),
    MLang.EQ(PaymentProviderCorridor.PROVIDER, rbc.getId())
    }));

    // Remove deprecated corridor
    if ( corridor != null && corridor.getSourceCountry() == null ) {
      ppcDAO.remove(corridor);
    }

    if ( corridor == null ) {
    corridor = new PaymentProviderCorridor();
    corridor.setSourceCountry("CA");
    corridor.setTargetCountry("CA");
    corridor.setSourceCurrencies(availableCurrency);
    corridor.setTargetCurrencies(availableCurrency);
    corridor.setEnabled(true);
    corridor.setAvailabilityPredicate(foam.mlang.MLang.TRUE);
    corridor.setProvider(rbc.getId());
    corridor.setName("CA-CA Corridor RBC");
    corridor = ppcDAO.put(corridor);
    print("RBC corridor added: source CA target CA");
    }

    print("Script Finished.");
  """
})

p({
  class:"foam.nanos.script.Script",
  id:"Payment Provider Corridor Setup - (Alterna)",
  description:"Sets up payment provider corridor and it's prerequisites for Alterna",
  code:"""
    // Sets up all payment provider corridors for Alterna
    // Script ensures all prerequisites for payment provider corridor are associated with the newly created corridor.
    // Prerequisite associations are handled by rules on the paymentProviderCorridorDAO

    import foam.mlang.MLang;
    import foam.mlang.predicate.Predicate;
    import net.nanopay.payment.*;

    String[] availableCurrency = {"CAD"};

    ppcDAO = x.get("paymentProviderCorridorDAO");

    alterna = x.get("paymentProviderDAO").find("Alterna");

    // Create Alterna payment provider corridors if missing
    corridor = ppcDAO.find(MLang.AND(new Predicate[] {
    MLang.EQ(PaymentProviderCorridor.SOURCE_COUNTRY, "CA"),
    MLang.EQ(PaymentProviderCorridor.TARGET_COUNTRY, "CA"),
    MLang.EQ(PaymentProviderCorridor.PROVIDER, alterna.getId())
    }));

    // Remove deprecated corridor
    if ( corridor != null && corridor.getSourceCountry() == null ) {
      ppcDAO.remove(corridor);
    }

    if ( corridor == null ) {
    corridor = new PaymentProviderCorridor();
    corridor.setSourceCountry("CA");
    corridor.setTargetCountry("CA");
    corridor.setSourceCurrencies(availableCurrency);
    corridor.setTargetCurrencies(availableCurrency);
    corridor.setEnabled(true);
    corridor.setAvailabilityPredicate(foam.mlang.MLang.TRUE);
    corridor.setProvider(alterna.getId());
    corridor.setName("CA-CA Corridor Alterna");
    corridor = ppcDAO.put(corridor);
    print("Alterna corridor added: source CA target CA");
    }

    print("Script Finished.");
  """
})

p({
  class:"foam.nanos.script.Script",
  id:"Payment Provider Corridor Setup - (Kotak)",
  description:"Sets up payment provider corridor and it's prerequisites for Kotak",
  code:"""
    // Sets up all payment provider corridors for Kotak
    // Script ensures all prerequisites for payment provider corridor are associated with the newly created corridor.
    // Prerequisite associations are handled by rules on the paymentProviderCorridorDAO

    import foam.mlang.MLang;
    import foam.mlang.predicate.Predicate;
    import net.nanopay.payment.*;

    String[] sourceCurrency = {"CAD"};
    String[] targetCurrency = {"INR"};

    ppcDAO = x.get("paymentProviderCorridorDAO");

    kotak = x.get("paymentProviderDAO").find("Kotak");

    // Create Kotak payment provider corridors if missing
    corridor = ppcDAO.find(MLang.AND(new Predicate[] {
    MLang.EQ(PaymentProviderCorridor.SOURCE_COUNTRY, "CA"),
    MLang.EQ(PaymentProviderCorridor.TARGET_COUNTRY, "IN"),
    MLang.EQ(PaymentProviderCorridor.PROVIDER, kotak.getId())
    }));

    // Remove deprecated corridor
    if ( corridor != null && corridor.getSourceCountry() == null ) {
      ppcDAO.remove(corridor);
    }

    if ( corridor == null ) {
    corridor = new PaymentProviderCorridor();
    corridor.setSourceCountry("CA");
    corridor.setTargetCountry("IN");
    corridor.setSourceCurrencies(sourceCurrency);
    corridor.setTargetCurrencies(targetCurrency);
    corridor.setEnabled(true);
    corridor.setAvailabilityPredicate(foam.mlang.MLang.TRUE);
    corridor.setProvider(kotak.getId());
    corridor.setName("CA-IN Corridor Kotak");
    corridor = ppcDAO.put(corridor);
    print("Kotak corridor added: source CA target IN");
    }

    print("Script Finished.");
  """
})

p({
  class:"foam.nanos.script.Script",
  id:"Payment Provider Corridor Setup - (Treviso)",
  description:"Sets up payment provider corridor and it's prerequisites for Treviso",
  code:"""
    // Sets up all payment provider corridors for Treviso
    // Script ensures all prerequisites for payment provider corridor are associated with the newly created corridor.
    // Prerequisite associations are handled by rules on the paymentProviderCorridorDAO

    import foam.mlang.MLang;
    import foam.mlang.predicate.Predicate;
    import net.nanopay.payment.*;

    String[] caCurrency = {"CAD"};
    String[] brCurrency = {"INR"};
    String[] usCurrency = {"USD"};

    ppcDAO = x.get("paymentProviderCorridorDAO");

    treviso = x.get("paymentProviderDAO").find("Treviso");

    // Create Treviso payment provider corridors if missing
    // Treviso Corridor BR-CA creation
    corridor = ppcDAO.find(MLang.AND(new Predicate[] {
    MLang.EQ(PaymentProviderCorridor.SOURCE_COUNTRY, "BR"),
    MLang.EQ(PaymentProviderCorridor.TARGET_COUNTRY, "CA"),
    MLang.EQ(PaymentProviderCorridor.PROVIDER, treviso.getId())
    }));

    // Remove deprecated corridor
    if ( corridor != null && corridor.getSourceCountry() == null ) {
      ppcDAO.remove(corridor);
    }

    if ( corridor == null ) {
    corridor = new PaymentProviderCorridor();
    corridor.setSourceCountry("BR");
    corridor.setTargetCountry("CA");
    corridor.setSourceCurrencies(caCurrency);
    corridor.setTargetCurrencies(brCurrency);
    corridor.setEnabled(true);
    corridor.setAvailabilityPredicate(foam.mlang.MLang.TRUE);
    corridor.setProvider(treviso.getId());
    corridor.setName("BR-CA Corridor Treviso");
    corridor = ppcDAO.put(corridor);
    print("Treviso corridor added: source BR target CA");
    }

    // Treviso Corridor BR-US creation
    usCorridor = ppcDAO.find(MLang.AND(new Predicate[] {
    MLang.EQ(PaymentProviderCorridor.SOURCE_COUNTRY, "BR"),
    MLang.EQ(PaymentProviderCorridor.TARGET_COUNTRY, "US"),
    MLang.EQ(PaymentProviderCorridor.PROVIDER, treviso.getId())
    }));

    // Remove deprecated corridor
    if ( usCorridor != null && usCorridor.getSourceCountry() == null ) {
      ppcDAO.remove(usCorridor);
    }

    if ( usCorridor == null ) {
    usCorridor = new PaymentProviderCorridor();
    usCorridor.setSourceCountry("BR");
    usCorridor.setTargetCountry("US");
    usCorridor.setSourceCurrencies(caCurrency);
    usCorridor.setTargetCurrencies(usCurrency);
    usCorridor.setEnabled(true);
    usCorridor.setAvailabilityPredicate(foam.mlang.MLang.TRUE);
    usCorridor.setProvider(treviso.getId());
    usCorridor.setName("BR-US Corridor Treviso");
    usCorridor = ppcDAO.put(usCorridor);
    print("Treviso corridor added: source BR target US");
    }

    print("Script Finished.");
  """
})

p({
  class:"foam.nanos.script.Script",
  id:"Payment Provider Corridor Setup - (AscendantFX)",
  description:"Sets up payment provider corridor and it's prerequisites for AscendantFX",
  code:"""
    // Sets up all payment provider corridors for AscendantFX
    // Script ensures all prerequisites for payment provider corridor are associated with the newly created corridor.
    // Prerequisite associations are handled by rules on the paymentProviderCorridorDAO

    import foam.mlang.MLang;
    import foam.mlang.predicate.Predicate;
    import net.nanopay.payment.*;

    String[] caCurrency = {"CAD"};
    String[] usCurrency = {"USD"};

    ppcDAO = x.get("paymentProviderCorridorDAO");

    afx = x.get("paymentProviderDAO").find("AscendantFX");

    // Create AscendantFX payment provider corridors if missing
    // AscendantFX Corridor CA-US creation
    corridor = ppcDAO.find(MLang.AND(new Predicate[] {
    MLang.EQ(PaymentProviderCorridor.SOURCE_COUNTRY, "CA"),
    MLang.EQ(PaymentProviderCorridor.TARGET_COUNTRY, "US"),
    MLang.EQ(PaymentProviderCorridor.PROVIDER, afx.getId())
    }));

    // Remove deprecated corridor
    if ( corridor != null && corridor.getSourceCountry() == null ) {
      ppcDAO.remove(corridor);
    }

    if ( corridor == null ) {
    corridor = new PaymentProviderCorridor();
    corridor.setSourceCountry("CA");
    corridor.setTargetCountry("US");
    corridor.setSourceCurrencies(caCurrency);
    corridor.setTargetCurrencies(usCurrency);
    corridor.setEnabled(true);
    corridor.setAvailabilityPredicate(foam.mlang.MLang.TRUE);
    corridor.setProvider(afx.getId());
    corridor.setName("CA-US Corridor AscendantFX");
    corridor = ppcDAO.put(corridor);
    print("AscendantFX corridor added: source CA target US");
    }

    // AscendantFX Corridor US-CA creation
    usCorridor = ppcDAO.find(MLang.AND(new Predicate[] {
    MLang.EQ(PaymentProviderCorridor.SOURCE_COUNTRY, "US"),
    MLang.EQ(PaymentProviderCorridor.TARGET_COUNTRY, "CA"),
    MLang.EQ(PaymentProviderCorridor.PROVIDER, afx.getId())
    }));

    // Remove deprecated corridor
    if ( usCorridor != null && usCorridor.getSourceCountry() == null ) {
      ppcDAO.remove(usCorridor);
    }

    if ( usCorridor == null ) {
    usCorridor = new PaymentProviderCorridor();
    usCorridor.setSourceCountry("US");
    usCorridor.setTargetCountry("CA");
    usCorridor.setSourceCurrencies(usCurrency);
    usCorridor.setTargetCurrencies(caCurrency);
    usCorridor.setEnabled(true);
    usCorridor.setAvailabilityPredicate(foam.mlang.MLang.TRUE);
    usCorridor.setProvider(afx.getId());
    usCorridor.setName("US-CA Corridor AscendantFX");
    usCorridor = ppcDAO.put(usCorridor);
    print("AscendantFX corridor added: source US target CA");
    }

    // AscendantFX Corridor US-US creation
    uCorridor = ppcDAO.find(MLang.AND(new Predicate[] {
    MLang.EQ(PaymentProviderCorridor.SOURCE_COUNTRY, "US"),
    MLang.EQ(PaymentProviderCorridor.TARGET_COUNTRY, "US"),
    MLang.EQ(PaymentProviderCorridor.PROVIDER, afx.getId())
    }));

    // Remove deprecated corridor
    if ( uCorridor != null && uCorridor.getSourceCountry() == null ) {
      ppcDAO.remove(uCorridor);
    }

    if ( uCorridor == null ) {
    uCorridor = new PaymentProviderCorridor();
    uCorridor.setSourceCountry("US");
    uCorridor.setTargetCountry("US");
    uCorridor.setSourceCurrencies(usCurrency);
    uCorridor.setTargetCurrencies(usCurrency);
    uCorridor.setEnabled(true);
    uCorridor.setAvailabilityPredicate(foam.mlang.MLang.TRUE);
    uCorridor.setProvider(afx.getId());
    uCorridor.setName("US-US Corridor AscendantFX");
    uCorridor = ppcDAO.put(uCorridor);
    print("AscendantFX corridor added: source US target US");
    }

    print("Script Finished.");
  """
})

p({
  class:"foam.nanos.script.Script",
  id:"Set CountryCapabilityDAO",
  description:"set CountryCapabilityDAO by using existing PaymentProviderCorridors",
  code:"""
    import foam.core.X;
    import foam.dao.ArraySink;
    import foam.dao.DAO;
    import foam.mlang.MLang;
    import foam.mlang.predicate.Predicate;
    import foam.nanos.crunch.CapabilityCapabilityJunction;
    import net.nanopay.payment.*;
    import net.nanopay.payment.CountryCapability;
    import net.nanopay.payment.PaymentProviderCorridor;
    import java.util.List;

    ppcDAO = x.get("paymentProviderCorridorDAO");
    countryCapabilityDAO = (DAO) x.get("countryCapabilityDAO");
    List corridors = ppcDAO.select(new ArraySink()).getArray();
    for(  corridor : corridors ) {
      sourceCountryCapability = (CountryCapability) countryCapabilityDAO.find(
        MLang.AND(
          new Predicate[]{
          MLang.EQ(CountryCapability.COUNTRY, corridor.getSourceCountry()),
          MLang.EQ(CountryCapability.TYPE, SourceTargetType.SOURCE)
          }
        ));

      targetCountryCapability = (CountryCapability) countryCapabilityDAO.find(
        MLang.AND(
          new Predicate[]{
          MLang.EQ(CountryCapability.COUNTRY, corridor.getTargetCountry()),
          MLang.EQ(CountryCapability.TYPE, SourceTargetType.TARGET)
          }
        ));
      if ( sourceCountryCapability == null ) {
        sourceCountryCapability = new CountryCapability();
        sourceCountryCapability.setCountry(corridor.getSourceCountry());
        sourceCountryCapability.setType(SourceTargetType.SOURCE);
        sourceCountryCapability.setName("Source Country Capability " + corridor.getSourceCountry());
        sourceCountryCapability.setAvailabilityPredicate(foam.mlang.MLang.TRUE);
        sourceCountryCapability.setEnabled(true);
        sourceCountryCapability = (CountryCapability) countryCapabilityDAO.put(sourceCountryCapability);
      }

      if ( targetCountryCapability == null ) {
        targetCountryCapability = new CountryCapability();
        targetCountryCapability.setCountry(corridor.getTargetCountry());
        targetCountryCapability.setType(SourceTargetType.TARGET);
        targetCountryCapability.setName("Target Country Capability " + corridor.getTargetCountry());
        targetCountryCapability.setAvailabilityPredicate(foam.mlang.MLang.TRUE);
        targetCountryCapability.setEnabled(true);
        targetCountryCapability = (CountryCapability) countryCapabilityDAO.put(targetCountryCapability);
      }
    }
    print("done");
  """
})