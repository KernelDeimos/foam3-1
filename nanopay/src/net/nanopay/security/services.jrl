p({
  "class": "foam.nanos.boot.NSpec",
  "name": "keyStoreManager",
  "serviceScript": """
    import net.nanopay.security.PKCS12KeyStoreManager;
    return new PKCS12KeyStoreManager.Builder(x)
      .setKeyStorePath(System.getenv("NANOPAY_HOME") + "/var/keys/keystore.p12")
      .setPassphrasePath(System.getenv("NANOPAY_HOME") + "/var/keys/passphrase")
      .build();
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"CSPViolationsDAO",
  "description":"DAO containing CSP violation reports that are sent to the server by the clients.",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setSeqNo(true)
      .setJournalName("CSPViolation")
      .setOf(net.nanopay.security.csp.CSPViolation.getOwnClassInfo())
      .setCluster(false)
      .build();
    """,
  "client":"{\"of\":\"net.nanopay.security.csp.CSPViolation\"}",
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "CSPReportWebAgent",
  "authenticate": false,
  "serviceClass": "net.nanopay.security.csp.CSPReportWebAgent"
})

p({
  "class": "foam.nanos.boot.NSpec", 
  "name": "viewPIIRequestDAO",                
  "serve": true,  
  "serviceScript":
  """ 
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.security.pii.ViewPIIRequest.getOwnClassInfo())
      .setSeqNo(true)
      .setJournalName("viewPIIRequest")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setDecorator(new net.nanopay.security.pii.AuthenticatedPIIRequestDAO(x, 
        new net.nanopay.security.pii.FreezeApprovedPIIRequestsDAO.Builder(x).setDelegate( 
        new net.nanopay.security.pii.PreventDuplicatePIIRequestsDAO.Builder(x).setDelegate(
        new net.nanopay.security.pii.ApprovedPIIRequestDAO.Builder(x).setDelegate(new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.security.pii.ViewPIIRequest.getOwnClassInfo()).build()).build()).build()).build()))
      .build();
  """, 
  "client": "{\"of\":\"net.nanopay.security.pii.ViewPIIRequest\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "PIIWebAgent",
  "serviceClass": "net.nanopay.security.pii.PIIWebAgent"
})

p({
  "class":"foam.nanos.boot.NSpec", 
  "name":"privateKeyDAO",                    
  "serviceScript":"""
    easyDAO = new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(false)
      .setOf(net.nanopay.security.PrivateKeyEntry.getOwnClassInfo())
      .setSeqNo(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("privateKeys")
      .setOf(net.nanopay.security.PrivateKeyEntry.getOwnClassInfo())
      .build();
    pgpPrivateKeyDAO = new net.nanopay.security.PGPPrivateKeyDAO.Builder(x)
      .setDelegate(easyDAO)
      .build();
    privateKeyDAO = new net.nanopay.security.PrivateKeyDAO.Builder(x)
      .setAlias("net.nanopay.security.PrivateKeyDAO")
      .setDelegate(pgpPrivateKeyDAO)
      .build();
    return privateKeyDAO;
  """
})
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"keyPairDAO",
  "serve":true,
  "serviceScript":"""
    mdao = new foam.dao.MDAO(net.nanopay.security.KeyPairEntry.getOwnClassInfo());
    inner = new net.nanopay.security.HashingJDAO(x, "SHA-256", false, true, mdao, "keyPairs", "true".equals(System.getProperty("CLUSTER")));
    return new net.nanopay.security.KeyPairDAO.Builder(x)
      .setDelegate(new foam.dao.EasyDAO.Builder(x)
        .setAuthorize(false)
        .setMdao(mdao)
        .setInnerDAO(inner)
        .setSeqNo(true)
        .setOf(net.nanopay.security.KeyPairEntry.getOwnClassInfo())
        .build())
    .build();
  """,
  "client":"{\"of\":\"net.nanopay.security.KeyPairEntry\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "publicKeyDAO",
  "serve": true,
  "serviceScript": """
    easyDAO = new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(true)
      .setOf(net.nanopay.security.PublicKeyEntry.getOwnClassInfo())
      .setSeqNo(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("publicKeys")
      .setOf(net.nanopay.security.PublicKeyEntry.getOwnClassInfo())
      .build();
    pgpPublicKeyDAO = new net.nanopay.security.PGPPublicKeyDAO.Builder(x).setDelegate(easyDAO).build();
    return new net.nanopay.security.PublicKeyDAO.Builder(x).setDelegate(pgpPublicKeyDAO).build();
  """,
  "client": "{\"of\":\"net.nanopay.security.PublicKeyEntry\"}"
})
