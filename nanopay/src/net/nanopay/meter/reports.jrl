// Daily Reconciliation
p({class:"net.nanopay.meter.Report",id:"Report-Reconciliation",code:"import net.nanopay.account.Balance;\nimport net.nanopay.account.Account;\nimport net.nanopay.bank.BankAccount;\nimport net.nanopay.account.TrustAccount;\nimport net.nanopay.account.DigitalAccount;\nimport net.nanopay.tx.model.Transaction;\nimport net.nanopay.tx.cico.COTransaction;\nimport net.nanopay.tx.alterna.AlternaCOTransaction;\nimport net.nanopay.tx.alterna.CsvUtil;\nimport foam.nanos.notification.Notification;\nimport foam.dao.ArraySink;\nimport foam.mlang.MLang;\nimport foam.mlang.predicate.Predicate;\n\ns = new StringBuilder();\ns.append(\"Account, denomination, trust, system, net, (cash-out)\");\ns.append(System.getProperty(\"line.separator\"));\n\nnow = new Date();\n// calculate the completion data in the past to determine \n// money in transit for CO transactions \nalternaSFTPService = x.get(\"alternaSftp\");\ncutOffTime = alternaSFTPService.getCutOffTime();\nholdTimeInBusinessDays = alternaSFTPService.getHoldTimeInBusinessDays();\n\ncurDate = Calendar.getInstance();\ncurDate.setTime(now);\nint k = curDate.get(Calendar.HOUR_OF_DAY) < cutOffTime ? (1 + holdTimeInBusinessDays) : (2 + holdTimeInBusinessDays);\nint i = 0;\nwhile ( i < k ) {\ncurDate.add(Calendar.DAY_OF_YEAR, -1);\nif ( curDate.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY\n&& curDate.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY\n&& ! CsvUtil.cadHolidays.contains(curDate.get(Calendar.DAY_OF_YEAR)) ) {\ni = i + 1;\n}\n}\n\ntd = x.get(\"localTransactionDAO\");\nd = x.get(\"localAccountDAO\");\ntrustAccounts = ((ArraySink) d.where(MLang.INSTANCE_OF(TrustAccount.class)).select(new ArraySink())).getArray();\nfor (Object ta : trustAccounts) {\ncashout = 0;\ntotal = 0;\naccounts = ((ArraySink) d.where(\nMLang.OR(new Predicate[] {\nMLang.AND(new Predicate[] {\nMLang.INSTANCE_OF(DigitalAccount.class),\nMLang.NOT(MLang.INSTANCE_OF(TrustAccount.class)),\nMLang.EQ(Account.DENOMINATION, ta.getDenomination())\n}),\nMLang.AND(new Predicate[] {\nMLang.INSTANCE_OF(BankAccount.class),\nMLang.EQ(Account.DENOMINATION, ta.getDenomination())\n})\n})\n)    \n.select(new ArraySink())).getArray();\nfor (Object a : accounts) {\nif ( a instanceof BankAccount ) {\ntransactions = td.where(\nMLang.AND(new Predicate[] {\nMLang.GTE(Transaction.COMPLETION_DATE, curDate),\nMLang.EQ(Transaction.DESTINATION_ACCOUNT, a.getId()),\nMLang.INSTANCE_OF(COTransaction.class)\n})\n)\n.select(new ArraySink()).getArray();\n\nfor (Object t : transactions) {\ncashout += t.getAmount();\n}\n}\ntotal += a.findBalance(x);\n}\nbalance = ta.findBalance(x);\ndelta = balance + total;\ns.append(ta.getName()+\",\"+ta.getDenomination()+\",\"+balance+\",\"+total+\",\"+delta+\",\"+cashout);\ns.append(System.getProperty(\"line.separator\"));\n}\n\nn = new Notification.Builder(x).setTemplate(\"report\").setBody(s.toString()).build();\nx.get(\"notificationDAO\").put(n);\n\nprint(s.toString());"})

// Transaction Summary Reports
p({class:"net.nanopay.meter.Report",id:"Report-TxSummary-Daily",code:"import net.nanopay.meter.TransactionSummaryReport;\nimport java.util.Date;\nimport java.util.Calendar;\n\nc = Calendar.getInstance();\n\n// Start\nc.add(Calendar.DATE, -1);\nc.set(Calendar.HOUR_OF_DAY, 0);\nc.set(Calendar.MINUTE, 0);\nc.set(Calendar.SECOND, 0);\nc.set(Calendar.MILLISECOND, 0);\nstartDate = c.getTime();\n\n// End\nc.set(Calendar.HOUR_OF_DAY, 23);\nc.set(Calendar.MINUTE, 59);\nc.set(Calendar.SECOND, 59);\nc.set(Calendar.MILLISECOND, 999);\nendDate = c.getTime();\n\ntsm = new TransactionSummaryReport();\nreports = tsm.createReport(x, startDate, endDate);\n\nprint(\" *** SUMMARY *** \");\nprint(reports[1]);\nprint(reports[2]);\n\nprint(\"\");\nprint(\" *** TRANSACTIONS *** \");\nprint(reports[0]);\n\n"})
p({class:"net.nanopay.meter.Report",id:"Report-TxSummary-Monthly",code:"import net.nanopay.meter.TransactionSummaryReport;\n\ntsm = new TransactionSummaryReport();\nreports = tsm.createReport(x, null, null);\n\nprint(\" *** SUMMARY *** \");\nprint(reports[1]);\nprint(reports[2]);\n\nprint(\"\");\nprint(\" *** TRANSACTIONS *** \");\nprint(reports[0]);\n\n"})
p({class:"net.nanopay.meter.Report",id:"Report-TxSummary-Range",code:"import net.nanopay.meter.TransactionSummaryReport;\nimport java.util.Date;\nimport java.util.Calendar;\nimport java.text.SimpleDateFormat;\n\nstart = \"2018-11-25\";\nend   = \"2018-11-28\";\n\nSimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd\");\nstartDate = formatter.parse(start);\nendDate = formatter.parse(end);\n\nc = Calendar.getInstance();\n\n// Update start to beginning of the day\nc.setTime(startDate);\nc.set(Calendar.HOUR_OF_DAY, 0);\nc.set(Calendar.MINUTE, 0);\nc.set(Calendar.SECOND, 0);\nc.set(Calendar.MILLISECOND, 0);\nstartDate = c.getTime();\n\n// Update end to the end of the day\nc.setTime(endDate);\nc.set(Calendar.HOUR_OF_DAY, 23);\nc.set(Calendar.MINUTE, 59);\nc.set(Calendar.SECOND, 59);\nc.set(Calendar.MILLISECOND, 999);\nendDate = c.getTime();\n\nprint(\"start: \" + startDate);\nprint(\"end:   \" + endDate);\nprint(\"\");\n\ntsm = new TransactionSummaryReport();\nreports = tsm.createReport(x, startDate, endDate);\n\nprint(\" *** SUMMARY *** \");\nprint(reports[1]);\nprint(reports[2]);\n\nprint(\"\");\nprint(\" *** TRANSACTIONS *** \");\nprint(reports[0]);\n\n"})
