// net.nanopay.tx.QuotePlanTest
p({"class":"foam.nanos.test.Test","passed":12,"id":"net.nanopay.tx.QuotePlanTest","lastRun":"2018-08-29T20:02:07.470Z","lastDuration":42,"code":"userDAO        = x.get(\"userDAO\");\naccountDAO     = x.get(\"accountDAO\");\ninstitutionDAO = x.get(\"institutionDAO\");\ntransactionDAO = x.get(\"localTransactionDAO\");\nbalanceDAO     = x.get(\"balanceDAO\");\nquoteDAO       = x.get(\"localTransactionQuotePlanDAO\");\nliquiditySettingsDAO = x.get(\"liquiditySettingsDAO\");\n\nRandom ran = new Random();\n\n//Create a Test User\nuser = new foam.nanos.auth.User();\nuser.setId(Long.valueOf(850));\nuser.setGroup(\"business\");\nuser.setOrganization(\"Balony\");\nuser.setEmailVerified(true);\nuser.setFirstName(\"test8\");\nuser.setLastName(\"TEST8\");\nuser.setEmail(\"test8@t.com\");\nuserDAO.put(user);\n\n//Create a Test User\nuser = new foam.nanos.auth.User();\nuser.setId(Long.valueOf(855));\nuser.setGroup(\"business\");\nuser.setOrganization(\"Balony\");\nuser.setEmailVerified(true);\nuser.setFirstName(\"test9\");\nuser.setLastName(\"TEST9\");\nuser.setEmail(\"test9@t.com\");\nuserDAO.put(user);\n\n//Grab Users for test\ntestDigital1        =(foam.nanos.auth.User) userDAO.find(850);\ntestDigital2        =(foam.nanos.auth.User) userDAO.find(855);\nadmin               =(foam.nanos.auth.User) userDAO.find(1350);\n\n//Grab Digital Accounts for test\nuserDigitalAccount  = net.nanopay.account.DigitalAccount.findDefault(x,admin,\"CAD\");\ntestDigitalAccount1 = net.nanopay.account.DigitalAccount.findDefault(x,testDigital1,\"CAD\");\ntestDigitalAccount2 = net.nanopay.account.DigitalAccount.findDefault(x,testDigital2,\"CAD\");\n\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(userDigitalAccount.getId());\nliquiditySettingsDAO.put(ls);\n\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(testDigitalAccount1.getId());\nliquiditySettingsDAO.put(ls);\n\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(testDigitalAccount2.getId());\nliquiditySettingsDAO.put(ls);\n\n//Create a bank account to User 1350\ncaaccount1 = new net.nanopay.bank.CABankAccount();\ncaaccount1.setAccountNumber(\"\"+(ran.nextInt(1000000)+10000));\ncaaccount1.setInstitutionNumber(\"\"+(ran.nextInt(899) + 100));\ncaaccount1.setBranchId(\"\"+(ran.nextInt(89999) + 10000));\ncaaccount1.setOwner(1350);\ncaaccount1.setName(\"\"+ran.nextInt(1000));\ncaaccount1.setStatus(net.nanopay.bank.BankAccountStatus.VERIFIED);\ncaaccount1.setDenomination(\"CAD\");\ncaaccount1.setId(1351);\ncaaccount1 = accountDAO.put(caaccount1);\n\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(caaccount1.getId());\nliquiditySettingsDAO.put(ls);\n\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(userDigitalAccount.getId());\ntransaction.setSourceAccount(caaccount1.getId());\ntransaction.setAmount(300000);\ntransaction.setType(net.nanopay.tx.TransactionType.CASHIN);\ntransaction.setStatus(net.nanopay.tx.model.TransactionStatus.COMPLETED);\n\nquote = new net.nanopay.tx.QuoteTransaction.Builder(x).setRequestTransaction(transaction).build();\nquote = quoteDAO.put(quote);\ntest(quote != null, \"Quote returned\");\nprint(\"quote: \"+quote);\ntest(quote.getPlan() != null, \"Plan created and selected.\");\nplan = quote.getPlan();\nprint(\"plan: \"+plan);\ntest(plan.hasError() == false, \"Plan does not have error.\");\ntest(plan.getQueued()[0] instanceof net.nanopay.tx.alterna.AlternaCITransaction, \"Plan[0] AlternaCITransaction\");\ntransaction = transactionDAO.put(plan);\ntest(transaction == null, \"CABankAccount/DigitalAccount -> AlternaTransaction COMPLETED\");\n\n//Create a bank account to User 855\ncaaccount2 = new net.nanopay.bank.CABankAccount();\ncaaccount2.setAccountNumber(\"\"+(ran.nextInt(1000000)+10000));\ncaaccount2.setInstitutionNumber(\"\"+(ran.nextInt(899) + 100));\ncaaccount2.setBranchId(\"\"+(ran.nextInt(89999) + 10000));\ncaaccount2.setOwner(855);\ncaaccount2.setName(\"\"+ran.nextInt(1000));\ncaaccount2.setStatus(net.nanopay.bank.BankAccountStatus.VERIFIED);\ncaaccount2.setDenomination(\"CAD\");\ncaaccount2 = accountDAO.put(caaccount2);\n\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(caaccount2.getId());\nliquiditySettingsDAO.put(ls);\n\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(caaccount2.getId());\ntransaction.setSourceAccount(caaccount1.getId());\ntransaction.setAmount(300);\n\nquote = new net.nanopay.tx.QuoteTransaction.Builder(x).setRequestTransaction(transaction).build();\nquote = quoteDAO.put(quote);\ntest(quote != null, \"Quote returned\");\nplan = quote.getPlan();\ntest(plan.hasError() == false, \"Plan does not have error.\");\ntransactions = plan.queued;\ntest(transactions.length >= 1, \"Plan transactions size >= 1\");\ntest(transactions[0] instanceof net.nanopay.tx.alterna.AlternaTransaction, \"Plan transactions[0] AlternaTransaction\");\n\ntransaction = transactionDAO.put(plan);\n\nbalance = userDigitalAccount.findBalance(x);\ntest(balance > 0, \"balance > 0\");\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(testDigitalAccount2.getId());\ntransaction.setSourceAccount(userDigitalAccount.getId());\ntransaction.setAmount(balance);\n\nquote = quoteDAO.put(transaction);\nplan = quote.getPlan();\ntest(plan.hasError() == false, \"Plan does not have errors\");\ntransaction = transactionDAO.put(plan);\ntest(transaction == null, \"DigitalAccount/DigitalAccount -> COMPLETED\");\n","output":"SUCCESS: Quote returned\nquote: QuoteTransaction[PlanTransaction[AlternaCITransaction(id: , type: CASHIN, status: COMPLETED), null, ], ]\nSUCCESS: Plan created and selected.\nplan: PlanTransaction[AlternaCITransaction(id: , type: CASHIN, status: COMPLETED), null, ]\nSUCCESS: Plan does not have error.\nSUCCESS: Plan[0] AlternaCITransaction\nSUCCESS: CABankAccount/DigitalAccount -> AlternaTransaction COMPLETED\nSUCCESS: Quote returned\nSUCCESS: Plan does not have error.\nSUCCESS: Plan transactions size >= 1\nSUCCESS: Plan transactions[0] AlternaTransaction\nSUCCESS: balance > 0\nSUCCESS: Plan does not have errors\nSUCCESS: DigitalAccount/DigitalAccount -> COMPLETED\n"})

// net.nanopay.tx.QuoteTransactionTest
p({"class":"foam.nanos.test.Test","passed":2,"failed":0,"id":"net.nanopay.tx.QuoteTransactionTest","enabled":true,"description":"","lastRun":"2018-08-28T19:59:04.459Z","lastDuration":19,"server":true,"status":1,"code":"td = x.get(\"localTransactionDAO\");\nad = x.get(\"localAccountDAO\");\nud = x.get(\"localUserDAO\");\nqd = x.get(\"localTransactionQuotePlanDAO\");\nprint(\"qd: \"+qd);\nu1 = ud.find(1348);\nu2 = ud.find(1368);\nprint(\"u1: \"+u1);\nprint(\"u2: \"+u2);\na1 = ad.find(foam.mlang.MLang.AND(new foam.mlang.predicate.Predicate[]{foam.mlang.MLang.EQ(net.nanopay.account.Account.OWNER, u1.getId()), foam.mlang.MLang.EQ(net.nanopay.account.Account.TYPE, \"CABankAccount\")}));\na2 = ad.find(foam.mlang.MLang.AND(new foam.mlang.predicate.Predicate[]{foam.mlang.MLang.EQ(net.nanopay.account.Account.OWNER, u2.getId()), foam.mlang.MLang.EQ(net.nanopay.account.Account.TYPE, \"CABankAccount\")}));\nprint(\"a1: \"+a1);\nprint(\"a2: \"+a2);\nt = new net.nanopay.tx.model.Transaction.Builder(x).setSourceAccount(a1.getId()).setDestinationAccount(a2.getId()).setAmount(10).build();\nq = new net.nanopay.tx.QuoteTransaction.Builder(x).setRequestTransaction(t).build();\nq = qd.put(q);\ntest(q.getPlan() != null, \"Quote has Plan.\");\np = q.getPlan();\ntest(p.hasError() == false, \"Plan does not have error.\");\nprint(\"plan: \"+p);\n\n\n","output":"qd: delegate: enabled: true, delegate: enabled: true, delegate: of: null, primaryKey: null, of: null, primaryKey: null, of: null, primaryKey: null, of: null, primaryKey: null\nu1: id: 1348, enabled: true, lastLogin: null, firstName: admin, middleName: , lastName: , legalName: admin , organization: , department: , email: admin@nanopay.net, emailVerified: true, phone: null, phoneNumber: , mobile: null, type: , birthday: null, profilePicture: null, address: null, language: en, timeZone: , desiredPassword: , password: RAosri2pHX0=:KmtXlFF9KqA4tdsVqrBdcokHxJJnKbrzItO7kGxAFWZvzLQ+38uPV0p5kL9e29i+c5u2IiRoIiFzWulTshSK9A==, previousPassword: , passwordLastModified: Sun Dec 03 13:02:50 EST 2017, passwordExpiry: null, note: , businessName: , bankIdentificationCode: , businessHoursEnabled: false, disabledTopics: [Ljava.lang.String;@3a9a090c, disabledTopicsEmail: [Ljava.lang.String;@7f98903b, website: , created: null, lastModified: null, group: admin, files: null, spid: nanopay, createdBy: 0, lastModifiedBy: 0, twoFactorEnabled: false, twoFactorSecret: , deviceToken: , businessTypeId: 0, businessSectorId: 0, invited: false, invitedBy: 0, previousStatus: PENDING, status: ACTIVE, compliance: PASSED, questionnaire: null, additionalDocuments: null, principalOwners: null, jobTitle: , principleType: , welcomeEmailSent: false, portalAdminCreated: false, businessPhone: null, businessIdentificationNumber: , businessRegistrationNumber: , issuingAuthority: , businessRegistrationAuthority: , businessRegistrationDate: null, businessAddress: null, businessProfilePicture: null, onboarded: true, createdPwd: false, inviteAttempts: 0, sales: null, expenses: null, accounts: null, paymentCards: null, transactionLimits: null, partners: null, partnered: null, contacts: null\nu2: id: 1368, enabled: true, lastLogin: null, firstName: , middleName: , lastName: , legalName:  , organization: , department: , email: testuser1@nanopay.net, emailVerified: true, phone: null, phoneNumber: , mobile: null, type: , birthday: null, profilePicture: null, address: null, language: , timeZone: , desiredPassword: , password: , previousPassword: , passwordLastModified: null, passwordExpiry: null, note: , businessName: , bankIdentificationCode: , businessHoursEnabled: false, disabledTopics: [Ljava.lang.String;@5cca7c36, disabledTopicsEmail: [Ljava.lang.String;@4e2d8835, website: , created: null, lastModified: null, group: , files: null, spid: , createdBy: 0, lastModifiedBy: 0, twoFactorEnabled: false, twoFactorSecret: , deviceToken: , businessTypeId: 0, businessSectorId: 0, invited: false, invitedBy: 0, previousStatus: PENDING, status: PENDING, compliance: REQUESTED, questionnaire: null, additionalDocuments: null, principalOwners: null, jobTitle: , principleType: , welcomeEmailSent: false, portalAdminCreated: false, businessPhone: null, businessIdentificationNumber: , businessRegistrationNumber: , issuingAuthority: , businessRegistrationAuthority: , businessRegistrationDate: null, businessAddress: null, businessProfilePicture: null, onboarded: false, createdPwd: false, inviteAttempts: 0, sales: null, expenses: null, accounts: null, paymentCards: null, transactionLimits: null, partners: null, partnered: null, contacts: null\na1: branch: 9, accountNumber: 12345678, status: VERIFIED, denomination: CAD, institution: 4, institutionNumber: , branchId: , randomDepositAmount: 76, verificationAttempts: 0, id: 5, name: EFT Test Account, desc: , transferIn: true, transferOut: true, isDefault: false, type: CABankAccount, owner: 1348\na2: branch: 0, accountNumber: 2131412443534534, status: VERIFIED, denomination: CAD, institution: 0, institutionNumber: , branchId: , randomDepositAmount: 86, verificationAttempts: 0, id: 6, name: , desc: , transferIn: true, transferOut: true, isDefault: false, type: CABankAccount, owner: 1368\nSUCCESS: Quote has Plan.\nSUCCESS: Plan does not have error.\nplan: PlanTransaction[AlternaTransaction(id: , type: CASHIN, status: PENDING), AlternaTransaction(id: , type: CASHOUT, status: PENDING), null, null, ]\n","notes":""})
