p({
  "class":"foam.nanos.ruler.Rule",
  "id":29,"name":"Pending FX Rate Transactions",
  "priority":100,
  "ruleGroup":"ManualFxTxn",
  "documentation":"Create a FX approval request for FX quote",
  "daoKey":"localTransactionDAO",
  "operation":1,
  "after":true,
  "predicate":{
    "class":"foam.mlang.predicate.And",
    "args":[{
      "class":"foam.mlang.predicate.Eq",
      "arg1":{
        "class":"foam.mlang.expr.Dot",
        "arg1":{
          "class":"foam.mlang.ContextObject",
          "key":"NEW"
        },
        "arg2":{
          "class":"foam.mlang.PredicatedExpr",
          "arg1":{
            "class":"foam.mlang.predicate.IsInstanceOf",
            "targetClass":"net.nanopay.fx.KotakFxTransaction"
      }}},
      "arg2":{
        "class":"foam.mlang.Constant",
        "value":true
    }},{
      "class":"foam.mlang.predicate.Eq",
      "arg1":{
        "class":"foam.mlang.expr.Dot",
        "arg1":{
          "class":"foam.mlang.ContextObject",
          "key":"NEW"
        },
        "arg2":{
          "class":"__Property__",
          "forClass_":"net.nanopay.tx.model.Transaction",
          "name":"status"
      }},
      "arg2":{
        "class":"foam.mlang.Constant",
        "value":{
          "class":"net.nanopay.tx.model.TransactionStatus",
          "ordinal":0
  }}}]},
  "action":{
    "class":"net.nanopay.tx.CreateManualFxRule"
  },
  "enabled":true,
  "saveHistory":false
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":30,"name":"Getting FX Rate for Transactions",
  "priority":100,
  "ruleGroup":"ManualFxTxn",
  "documentation":"Get FX rate if a FX quote is available",
  "daoKey":"approvalRequestDAO",
  "operation":1,
  "after":false,
  "predicate":{
    "class":"foam.mlang.predicate.Eq",
    "arg1":{
      "class":"foam.mlang.expr.Dot",
      "arg1":{
        "class":"foam.mlang.ContextObject",
        "key":"NEW"
      },
      "arg2":{
        "class":"foam.mlang.PredicatedExpr",
        "arg1":{
          "class":"foam.mlang.predicate.IsInstanceOf",
          "targetClass":"net.nanopay.fx.ManualFxApprovalRequest"
    }}},
    "arg2":{
      "class":"foam.mlang.Constant",
      "value":true
  }},
  "action":{
    "class":"net.nanopay.tx.ManualFxRule"
  },
  "enabled":true,
  "saveHistory":false
})
p({"class":"foam.nanos.ruler.Rule","id":31,"name":"The Jackie Rule1","priority":100,"ruleGroup":"compliance","documentation":"when a compliance transaction gets created create an approval request for Jackie","daoKey":"localTransactionDAO","operation":0,"after":true,"predicate":{"class":"net.nanopay.meter.compliance.ruler.predicate.IsComplianceTransaction"},"action":{"class":"net.nanopay.tx.JackieRuleOnCreate"},"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":32,"name":"The Jackie Rule2","priority":100,"ruleGroup":"compliance","documentation":"When a compliance transaction is saved, check if jackie approved it or not.","daoKey":"localTransactionDAO","predicate":{"class":"foam.mlang.predicate.And","args":[{"class":"foam.mlang.predicate.Eq","arg1":{"class":"foam.mlang.expr.Dot","arg1":{"class":"foam.mlang.ContextObject","key":"NEW"},"arg2":{"class":"foam.mlang.PredicatedExpr","arg1":{"class":"foam.mlang.predicate.IsInstanceOf","targetClass":"net.nanopay.tx.ComplianceTransaction"}}},"arg2":{"class":"foam.mlang.Constant","value":true}},{"class":"foam.mlang.predicate.Eq","arg1":{"class":"foam.mlang.expr.Dot","arg1":{"class":"foam.mlang.ContextObject","key":"NEW"},"arg2":{"class":"__Property__","forClass_":"net.nanopay.tx.model.Transaction","name":"status"}},"arg2":{"class":"foam.mlang.Constant","value":{"class":"net.nanopay.tx.model.TransactionStatus","ordinal":0}}}]},"operation":1,"after":false,"action":{"class":"net.nanopay.tx.JackieRuleOnPut"},"enabled":false,"saveHistory":true})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":33,"name":"DebtDestroyer","priority":100,
  "ruleGroup":"FastPay",
  "documentation":"when a CI transaction gets put in complete status for an Ablii FastPay enabled user, create a debtRepaymentTxn",
  "daoKey":"localTransactionDAO",
  "operation":1,
  "after":true,
  "action":{
    "class":"net.nanopay.tx.RepayDebtOnCIRule"
  },
  "enabled":true,
  "saveHistory":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":34,"name":"Proper Status after Pause, Rule",
  "priority":100,
  "ruleGroup":"StatusRules",
  "documentation":"Change PPC to Pending if parent complete",
  "daoKey":"localTransactionDAO",
  "operation":1,
  "action":{
    "class":"net.nanopay.tx.ParentCompleteToPendingRule"
  },
  "after":false,
  "enabled":true,
  "saveHistory":false
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":35,"name":"Set Approved By",
  "priority":100,
  "ruleGroup":"InvoicePayment",
  "documentation":"Set approvedBy property if the payment status is PROCESSING",
  "daoKey":"invoiceDAO",
  "operation":1,
  "after":false,
  "action":{
    "class":"net.nanopay.tx.ruler.InvoiceApprovedByRule"
  },
  "enabled":true,
  "saveHistory":false
})
p({"class":"foam.nanos.ruler.Rule","id":36,"name":"SwitchToSlowPay","priority":100,"ruleGroup":"FastPay","documentation":"If we know that fast pay will fail due to nsf in some account, transition to slowpay","daoKey":"localTransactionDAO","operation":1,"after":false,"action":{"class":"net.nanopay.tx.ruler.SlowDownRule"},"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":37,"name":"Modify Cico Status","priority":100,"ruleGroup":"ModifyCicoStatus","documentation":"When a cico transaction is updated, check if status is SENT and check if ApprovalRequest is Approved, then update transaction status to COMPLETED.","daoKey":"localTransactionDAO","operation":1,"after":false,"predicate":{"class":"foam.mlang.predicate.And","args":[{"class":"net.nanopay.meter.compliance.ruler.predicate.IsSentTransaction"},{"class":"net.nanopay.meter.compliance.ruler.predicate.IsCITransaction"}]},"action":{"class":"net.nanopay.tx.ModifyCicoStatus"},"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":38,"name":"Create Expedite Aproval Request","priority":100,"ruleGroup":"CreateExpediteApprovalRequest","documentation":"When a cico transaction is created, create an approval request that allows the status to be modified.","daoKey":"localTransactionDAO","operation":0,"after":true,"predicate":{"class":"net.nanopay.meter.compliance.ruler.predicate.IsCITransaction"},"action":{"class":"net.nanopay.tx.CreateExpediteApprovalRequest"},"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":39,"name":"Prune Cico Approval Cleanup","priority":100,"ruleGroup":"PruneCicoApprovalCleanup","documentation":"Clear pending approval requests for a cico transaction.","daoKey":"localTransactionDAO","operation":1,"after":true,"predicate":{"class":"foam.mlang.predicate.And","args":[{"class":"net.nanopay.meter.compliance.ruler.predicate.IsCompletedTransaction"},{"class":"net.nanopay.meter.compliance.ruler.predicate.IsCITransaction"}]},"action":{"class":"net.nanopay.meter.compliance.ruler.PruneApprovalRequests","objDaoKey":"localTransactionDAO"},"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":40,"name":"Account Liquification","priority":100,"ruleGroup":"Liquidity","documentation":"Triggers liquidity settings","daoKey":"localTransactionDAO","operation":3,"after":true,"enabled":true,"action":{"class":"net.nanopay.liquidity.LiquidityRule"},"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":41,"name":"ReverseCashIn","priority":100,"ruleGroup":"ReverseTransactions","documentation":"Reverses Failed and Declined CI Transactions","daoKey":"localTransactionDAO","operation":1,"action":{"class":"net.nanopay.tx.cico.ReverseCIRule"},"after":true,"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":42,"name":"ReverseCashOut","priority":90,"ruleGroup":"ReverseTransactions","documentation":"Reverses Failed and Declined CO Transactions","daoKey":"localTransactionDAO","operation":1,"action":{"class":"net.nanopay.tx.cico.ReverseCORule"},"after":true,"enabled":true,"saveHistory":true})
p({"class":"foam.nanos.ruler.Rule","id":43,"name":"observeStatus","priority":100,"ruleGroup":"Observer","documentation":"Change the last status field to the current time for all transaction status changes","daoKey":"localTransactionDAO","operation":1,"after":false,"predicate":{"class":"foam.nanos.ruler.predicate.PropertyChangePredicate","observedProperty":"status","observedClass":"net.nanopay.tx.model.Transaction"},"enabled":true,"saveHistory":true,"action":{"class":"foam.nanos.ruler.action.ChangePropertyAction","propName":"lastStatusChange","valueExpr":{"class":"foam.mlang.CurrentTime"}}})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":44,"name":"Quote Transaction Based on Status",
  "priority":100,
  "ruleGroup":"Quote Transaction",
  "documentation":"Sets is quoted to true on transaction that are in a PAUSED or SCHEDULED state",
  "daoKey":"localTransactionDAO",
  "operation":1,
  "after":false,
  "action":{
    "class":"net.nanopay.tx.ruler.TransactionQuotedStatusRule"
  },
  "enabled":true,
  "saveHistory":true,
  "predicate":{
    "class":"foam.mlang.predicate.OR",
    "args":[
    {
      "class":"foam.mlang.predicate.Eq",
      "arg1":{
        "class":"foam.mlang.expr.Dot",
        "arg1":{
          "class":"foam.mlang.ContextObject","key":"NEW"
        },
        "arg2":{
          "class":"__Property__",
          "forClass_":"net.nanopay.tx.model.Transaction",
          "name":"status"
        }
      },
      "arg2":{
        "class":"foam.mlang.Constant",
        "value":{
          "class":"net.nanopay.tx.model.TransactionStatus",
          "ordinal":10
        }
      }
    },
    {
      "class":"foam.mlang.predicate.Eq",
      "arg1":{
        "class":"foam.mlang.expr.Dot",
        "arg1":{
          "class":"foam.mlang.ContextObject","key":"NEW"
        },
        "arg2":{
          "class":"__Property__",
          "forClass_":"net.nanopay.tx.model.Transaction",
          "name":"status"
        }
      },
      "arg2":{
        "class":"foam.mlang.Constant",
        "value":{
          "class":"net.nanopay.tx.model.TransactionStatus",
          "ordinal":13
        }
      }
    }
  ]}
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":45,"name":"Ablii Completed Transaction Notification",
  "priority":100,
  "ruleGroup":"Notifications",
  "documentation":"Sends a notification to the sender and receiver of the transaction that their ablii payment has been completed.",
  "enabled":true,
  "after":true,
  "daoKey":"localTransactionDAO",
  "operation":0,
  "predicate":{
    "class":"foam.mlang.predicate.And",
    "args":[
      {"class":"net.nanopay.meter.compliance.ruler.predicate.IsCompletedTransaction"},
      {"class":"foam.nanos.ruler.predicate.IsInstancePredicate","of":"net.nanopay.tx.AbliiTransaction"},
      {"class":"foam.nanos.ruler.predicate.PropertyNEQValue","propName":"invoiceId","propValue":0}
  ]},
  "action":{"class":"net.nanopay.tx.ruler.AbliiSendCompletedNotification"},
  "saveHistory":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":46,"name":"Ablii FX Completed Transaction Notification",
  "priority":100,
  "ruleGroup":"Notifications",
  "documentation":"Sends a notification to the sender and receiver of the transaction that their ablii FX (through BMO) payment has been completed.",
  "enabled":true,
  "after":true,
  "daoKey":"localTransactionDAO",
  "operation":3,
  "predicate":
    {"class":"foam.mlang.predicate.And",
      "args":[
        {"class":"net.nanopay.meter.compliance.ruler.predicate.IsCompletedTransaction"},
        {"class":"foam.nanos.ruler.predicate.IsInstancePredicate","of":"net.nanopay.fx.FXSummaryTransaction"},
        {"class":"foam.nanos.ruler.predicate.PropertyNEQValue","propName":"invoiceId","propValue":0}
    ]},
  "action":{"class":"net.nanopay.tx.ruler.AbliiSendCompletedNotification"},
  "saveHistory":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":47,"name":"Declined Cash In Transaction Notification",
  "priority":100,
  "ruleGroup":"Notifications",
  "documentation":"Sends a notification when a CashIn is declined",
  "enabled":true,
  "after":true,
  "daoKey":"localTransactionDAO",
  "operation":1,
  "predicate":
    {"class":"foam.mlang.predicate.And",
      "args":[
        {"class":"foam.nanos.ruler.predicate.IsInstancePredicate","of":"net.nanopay.tx.cico.CITransaction"},
        {"class":"foam.nanos.ruler.predicate.PropertyEQValue","propName":"status","propValue":{"class":"net.nanopay.tx.model.TransactionStatus","ordinal":4}},
        {"class":"foam.nanos.ruler.predicate.PropertyChangePredicate","propName":"status"}
    ]},
  "action":{"class":"net.nanopay.tx.ruler.SendDeclinedCINotification"},
  "saveHistory":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":48,"name":"Declined Verification Transaction Notification",
  "operation":1,
  "priority":100,
  "ruleGroup":"Notifications",
  "documentation":"Sends a Notification to support about a failed verification transaction",
  "daoKey":"localTransactionDAO",
  "after":true,
  "predicate":
    {"class":"foam.mlang.predicate.And",
      "args":[
        {"class":"foam.mlang.predicate.Or",
          "args":[
            {"class":"net.nanopay.tx.ruler.PropertyEQValue","propName":"status","propValue":{"class":"net.nanopay.tx.model.TransactionStatus","ordinal":4}},
            {"class":"foam.nanos.ruler.predicate.PropertyEQValue","propName":"status","propValue":{"class": "net.nanopay.tx.model.TransactionStatus","ordinal":9}
          }]
        },
        {"class":"foam.nanos.ruler.predicate.IsInstancePredicate","of":"net.nanopay.tx.cico.VerificationTransaction"},
        {"class":"foam.nanos.ruler.predicate.PropertyChangePredicate","propName":"status"}
    ]},
  "action":{
    "class":"foam.nanos.ruler.action.SendNotification",
    "notification":{
      "class":"foam.nanos.notification.Notification",
      "notificationType":"Verification Transaction declined",
      "body":"Verification Transaction was declined",
      "groupId":"support",
      "emailIsEnabled":true
    }
  },
  "enabled":true,
  "saveHistory":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":49,"name":"Declined Compliance Transaction Notification",
  "operation":1,
  "priority":100,
  "ruleGroup":"Notifications",
  "documentation":"Sends a Notification to support about a failed compliance transaction",
  "daoKey":"localTransactionDAO",
  "after":true,
  "predicate":
    {"class":"foam.mlang.predicate.And",
      "args":[
        {"class":"foam.nanos.ruler.predicate.PropertyEQValue","propName":"status","propValue":{"class":"net.nanopay.tx.model.TransactionStatus","ordinal":4}},
        {"class":"foam.nanos.ruler.predicate.IsInstancePredicate","of":"net.nanopay.tx.ComplianceTransaction"}
    ]},
  "action":{
    "class":"foam.nanos.ruler.action.SendNotification",
    "notification":{
      "class":"foam.nanos.notification.Notification",
      "notificationType":"Compliance Transaction declined",
      "body":"Compliance Transaction was declined",
      "groupId":"support",
      "emailIsEnabled":true
    }
  },
  "enabled":true,
  "saveHistory":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":50,"name":"statusHistory Update Rule",
  "priority":100,
  "ruleGroup":"StatusHistory",
  "documentation":"When transaction status changes update the status history array with a timestamped entry.",
  "enabled":true,
  "daoKey":"localTransactionDAO",
  "operation":1,
  "predicate":{
    "class":"foam.mlang.predicate.OR",
    "args":[
      {
        "class":"foam.nanos.ruler.predicate.PropertyChangePredicate",
        "propName":"status"
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyChangePredicate",
        "propName":"lifecycleState"
      }
    ]
  },
  "action":{"class":"net.nanopay.tx.ruler.AddStatusHistoryAction"}
})
p({
  "class": "foam.nanos.ruler.Rule",
  "id":55,"name": "Compliance Transaction Planner",
  "ruleGroup": "Planner",
  "documentation": "Plans compliance transaction before money changes hands. Currently only used on the children transactions of a BulkTransaction to check each beneficiary compliance.",
  "daoKey": "localTransactionQuotePlanDAO",
  "operation": 0,
  "after": true,
  "priority": 100,
  "predicate": {
    "class":"foam.mlang.predicate.And",
    "args":[
      {
        "class": "foam.nanos.ruler.predicate.PropertyNEQValue",
        "propName": "parent",
        "propValue": null
      },
      {
        "class": "foam.mlang.predicate.Eq",
        "arg1": {
          "class": "foam.mlang.expr.Dot",
          "arg1": {
            "class": "foam.mlang.expr.Dot",
            "arg1": {
              "class": "foam.mlang.expr.Dot",
              "arg1": {
                "class": "foam.mlang.ContextObject",
                "key": "NEW"
              },
              "arg2": {
                "class": "__Property__",
                "forClass_": "net.nanopay.tx.TransactionQuote",
                "name":"parent"
              }
            },
            "arg2": {
              "class": "__Property__",
              "forClass_": "net.nanopay.tx.TransactionQuote",
              "name":"requestTransaction"
            }
          },
          "arg2": {
            "class": "foam.mlang.PredicatedExpr",
            "arg1": {
              "class": "foam.mlang.predicate.IsInstanceOf",
              "targetClass": "net.nanopay.tx.BulkTransaction"
            }
          }
        },
        "arg2": {
          "class": "foam.mlang.Constant",
          "value": true
        }
      }
    ]
  },
  "action": {
    "class": "net.nanopay.tx.ruler.ComplianceTransactionPlanner"
  },
  "enabled": true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":56,"name":"GD Fee",
  "daoKey":"localTransactionQuotePlanDAO",
  "ruleGroup":"GD",
  "operation":0,
  "priority":100,
  "documentation":"A customized rule to add cash-out transaction fee for Grain Discovery.",
  "action":{
    "class":"net.nanopay.tx.ruler.AddGDTxnFeeLineItem",
    "fee":150
  },
  "enabled":false
})

p({
    "class":"foam.nanos.ruler.Rule",
    "id":57,"name":"Send email when the micro deposit had failed",
    "priority":100,
    "ruleGroup":"DepositTransacationVerify",
    "documentation":"Send email to business that micro deposit had failed",
    "daoKey":"localTransactionDAO",
    "operation":1,
    "predicate":{
      "class":"foam.mlang.predicate.And",
      "args":[
        {
          "class":"foam.nanos.ruler.predicate.PropertyEQValue",
          "propName":"status",
          "propValue": {
            "class": "net.nanopay.tx.model.TransactionStatus",
            "ordinal":4
          }
        },
        {
          "class":"foam.mlang.predicate.And",
          "args":[
            {
              "class":"foam.nanos.ruler.predicate.PropertyNEQValue",
              "propName":"status",
              "propValue": {
                "class": "net.nanopay.tx.model.TransactionStatus",
                "ordinal":5
              },
              "isNew":false
            },
            {
              "class":"foam.nanos.ruler.predicate.PropertyNEQValue",
              "propName":"status",
              "propValue": {
                "class": "net.nanopay.tx.model.TransactionStatus",
                "ordinal":4
              },
              "isNew":false
            }
          ]
        }
      ]
    },
    "after":true,
    "action":{
        "class":"net.nanopay.tx.ruler.MicroDepositFailed"
    },
    "enabled":true,
    "saveHistory":true
})
p({
    "class":"foam.nanos.ruler.Rule",
    "id":58,"name":"Send email when the micro deposit succeeded",
    "priority":100,
    "ruleGroup":"DepositTransacationVerify",
    "documentation":"Send email when micro deposit succeeded",
    "daoKey":"localTransactionDAO",
    "operation":1,
    "predicate":{
      "class":"foam.mlang.predicate.And",
      "args":[
        {
          "class":"foam.nanos.ruler.predicate.PropertyEQValue",
          "propName":"status",
          "propValue": {
            "class": "net.nanopay.tx.model.TransactionStatus",
            "ordinal":5
          }
        },
        {
          "class":"foam.nanos.ruler.predicate.PropertyNEQValue",
          "propName":"status",
          "propValue": {
            "class": "net.nanopay.tx.model.TransactionStatus",
            "ordinal":5
          },
          "isNew":false
        }
      ]
    },
    "after":true,
    "action":{
        "class":"net.nanopay.tx.ruler.MicroDepositSuccessed"
    },
    "enabled":false,
    "saveHistory":true
})
p({
    "class":"foam.nanos.ruler.Rule",
    "id":59,"name":"Send email when the micro deposit sent",
    "priority":100,
    "ruleGroup":"DepositTransacationVerify",
    "documentation":"Send email when micro deposit sent",
    "daoKey":"localTransactionDAO",
    "operation":0,
    "predicate":{
      "class":"foam.nanos.ruler.predicate.PropertyEQValue",
      "propName":"status",
      "propValue": {
        "class": "net.nanopay.tx.model.TransactionStatus",
        "ordinal":0
      }
    },
    "after":true,
    "action":{
        "class":"net.nanopay.tx.ruler.MicroDepositSent"
    },
    "enabled":true,
    "saveHistory":true
})
p({
    "class":"foam.nanos.ruler.Rule",
    "id":"Ascendant fx transaction after put",
    "priority":100,
    "ruleGroup":"Payment",
    "documentation":"Ascendant fx transaction after put",
    "daoKey":"localTransactionDAO",
    "operation":0,
    "predicate":{
      "class":"foam.nanos.ruler.predicate.IsInstancePredicate",
      "of":"net.nanopay.fx.ascendantfx.AscendantFXTransaction"
    },
    "after":true,
    "action":{
      "class":"net.nanopay.tx.ruler.AscendantFXTransactionAfterPutRule"
    },
    "enabled":true,
    "saveHistory":true
})
p({
    "class":"foam.nanos.ruler.Rule",
    "id":"Invoice transaction after put",
    "priority":100,
    "ruleGroup":"InvoicePayment",
    "documentation":"Invoice transaction after put",
    "daoKey":"localTransactionDAO",
    "operation":1,
    "predicate":{
      "class":"foam.nanos.ruler.predicate.IsInstancePredicate",
      "of":"net.nanopay.tx.InvoiceTransaction"
    },
    "after":true,
    "action":{
      "class":"net.nanopay.tx.ruler.InvoiceTransactionAfterPutRule"
    },
    "enabled":true,
    "saveHistory":true
})
p({
    "class":"foam.nanos.ruler.Rule",
    "id":"Send complete retail transaction notification ",
    "priority":100,
    "ruleGroup":"Payment",
    "documentation":"Send notification once retail transaction is complete.",
    "daoKey":"localTransactionDAO",
    "operation":3,
    "predicate":{
      "class":"foam.nanos.ruler.predicate.IsInstancePredicate",
      "of":"net.nanopay.tx.RetailTransaction"
    },
    "after":true,
    "action":{
      "class":"net.nanopay.tx.ruler.SendCompleteRetailTransactionNotificationRule"
    },
    "enabled":true,
    "saveHistory":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":60,"name":"Set transaction lifecycleState to PENDING",
  "documentation":"Set transaction lifecycle state to PENDING. Used in liquid to force all transactions going through approval.",
  "ruleGroup":"(Default)",
  "daoKey":"localTransactionDAO",
  "priority":1000,
  "after":false,
  "action":{
    "class":"foam.nanos.ruler.action.ChangePropertyAction",
    "propName":"lifecycleState",
    "valueExpr":{
      "class":"foam.mlang.Constant",
      "value":{
        "class":"foam.nanos.auth.LifecycleState",
        "ordinal":0
      }
    }
  },
  "enabled":false
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":61,"name":"Transaction Auto-Approval",
  "documentation":"Set transaction lifecycle state to ACTIVE.",
  "ruleGroup":"(Default)",
  "daoKey":"localTransactionDAO",
  "priority":1000,
  "after":false,
  "action":{
    "class":"foam.nanos.ruler.action.ChangePropertyAction",
    "propName":"lifecycleState",
    "valueExpr":{
      "class":"foam.mlang.Constant",
      "value":{
        "class":"foam.nanos.auth.LifecycleState",
        "ordinal":1
      }
    }
  },
  "enabled":true
})
