<title>Nanopay Invoice Model</title>

<foam class="foam.flow.widgets.DocumentationIncomplete" status="wip" />

<h2>Invoice</h2>

<h4>Purpose</h4>
<foam class="foam.flow.widgets.DocumentationIncomplete" status="todo" isSection="true" />

<h2>Features</h2>

<h4>Capable</h4>

The `Invoice` model implements Capable

<h4>Brazil Nature Codes</h4>

<h4>Rules</h4>

<h4>Treviso</h4>

<h5>Invoice Nature Code Rule (TrevisoInvoiceCapabilityRule)</h5>

<foam class="foam.flow.widgets.ModelSummary" of="net.nanopay.invoice.ruler.TrevisoInvoiceCapabilityRule" visibleModelProps="id,constants" />

This is a `BEFORE` rule which does the following:

<ol>
  <li>Throw intercept if user does not have `USER_CAPABILITY_ID`</li>
  <li>Add empty payload for `OBJECT_CAPABILITY_ID` to invoice</li>
</ol>

This rule is here to prevent users who haven't finished onboarding from creating
an invoice, and to prepare the invoice for its own requirements which will be
obtained via `crunch.lite`. For more information on how the Capable interface
allows an invoice to have its own process of gathering data from the user, refer
to the `crunch.lite` documentation. (TODO: link)

<h5>Invoice No Capability Check Rule (NoCapabilityCheckRule)<h5>

This is a BEFORE rule which sets an invoice's status to QUOTED if no
requirements were added by any previous rule.

<h5>Invoice Validate Capabilities Rule (TrevisoCapabilityValidateRule)</h5>

This is an AFTER rule which invokes a CRUNCH intercept (CapabilityIntercept)
when the client sends an invoice with insufficient requirements.

This rule uses the `OBJECT_CAPABILITY_ID` constant from
TrevisoInvoiceCapabilityRule as the capable payload to check for GRANTED status.

<h5>Update Transaction on Invoice Validation (UpdateTransactionOnInvoiceValidationRule)</h5>

<foam class="foam.flow.widgets.ModelSummary" of="net.nanopay.invoice.ruler.UpdateTransactionOnInvoiceValidationRule" visibleModelProps="id,documentation,constants" />
