// Daily Reconciliation
p({"class":"foam.nanos.script.Script","id":"Report-Reconciliation","lastRun":"2018-11-17T20:47:42.919Z","lastDuration":33,"code":"import net.nanopay.account.Balance;\nimport net.nanopay.account.Account;\nimport net.nanopay.bank.BankAccount;\nimport net.nanopay.account.TrustAccount;\nimport net.nanopay.account.DigitalAccount;\nimport net.nanopay.tx.model.Transaction;\nimport net.nanopay.tx.cico.COTransaction;\nimport net.nanopay.tx.alterna.AlternaCOTransaction;\nimport net.nanopay.tx.alterna.CsvUtil;\nimport foam.nanos.notification.Notification;\nimport foam.dao.ArraySink;\nimport foam.mlang.MLang;\nimport foam.mlang.predicate.Predicate;\n\ns = new StringBuilder();\ns.append(\"Account, denomination, trust, system, net, (cash-out)\");\ns.append(System.getProperty(\"line.separator\"));\n\nnow = new Date();\n// calculate the completion data in the past to determine \n// money in transit for CO transactions \n    alternaSFTPService = x.get(\"alternaSftp\");\n    cutOffTime = alternaSFTPService.getCutOffTime();\n    holdTimeInBusinessDays = alternaSFTPService.getHoldTimeInBusinessDays();\n\n    curDate = Calendar.getInstance();\n    curDate.setTime(now);\n    int k = curDate.get(Calendar.HOUR_OF_DAY) < cutOffTime ? (1 + holdTimeInBusinessDays) : (2 + holdTimeInBusinessDays);\n    int i = 0;\n    while ( i < k ) {\n      curDate.add(Calendar.DAY_OF_YEAR, -1);\n      if ( curDate.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY\n        && curDate.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY\n        && ! CsvUtil.cadHolidays.contains(curDate.get(Calendar.DAY_OF_YEAR)) ) {\n        i = i + 1;\n      }\n    }\n\ntd = x.get(\"localTransactionDAO\");\nd = x.get(\"localAccountDAO\");\ntrustAccounts = ((ArraySink) d.where(MLang.INSTANCE_OF(TrustAccount.class)).select(new ArraySink())).getArray();\nfor (Object ta : trustAccounts) {\ncashout = 0;\ntotal = 0;\naccounts = ((ArraySink) d.where(\n  MLang.OR(new Predicate[] {\n  MLang.AND(new Predicate[] {\n   MLang.INSTANCE_OF(DigitalAccount.class),\n   MLang.NOT(MLang.INSTANCE_OF(TrustAccount.class)),\n   MLang.EQ(Account.DENOMINATION, ta.getDenomination())\n  }),\n  MLang.AND(new Predicate[] {\n    MLang.INSTANCE_OF(BankAccount.class),\n    MLang.EQ(Account.DENOMINATION, ta.getDenomination())\n  })\n  })\n)    \n.select(new ArraySink())).getArray();\nfor (Object a : accounts) {\n  if ( a instanceof BankAccount ) {\n    transactions = td.where(\n                     MLang.AND(new Predicate[] {\n                       MLang.GTE(Transaction.COMPLETION_DATE, curDate),\n                       MLang.EQ(Transaction.DESTINATION_ACCOUNT, a.getId()),\n                       MLang.INSTANCE_OF(COTransaction.class)\n                     })\n                   )\n                   .select(new ArraySink()).getArray();\n\n    for (Object t : transactions) {\n      cashout += t.getAmount();\n    }\n  }\n  total += a.findBalance(x);\n}\nbalance = ta.findBalance(x);\ndelta = balance + total;\ns.append(ta.getName()+\",\"+ta.getDenomination()+\",\"+balance+\",\"+total+\",\"+delta+\",\"+cashout);\ns.append(System.getProperty(\"line.separator\"));\n}\n\nn = new Notification.Builder(x).setTemplate(\"report\").setBody(s.toString()).build();\nx.get(\"notificationDAO\").put(n);\n\nprint(s.toString());","output":"Account, denomination, trust, system, net, (transit)\nnanopay Trust Account CAD,CAD,-100000,100000,0,0\nnanopay Trust Account INR,INR,0,0,0,0\n\n"})

// Transaction Summary Reports
p({"class":"foam.nanos.script.Script","id":"Report-TxSummary-Monthly","code":"import net.nanopay.meter.TransactionSummaryReport;\n\ntsm = new TransactionSummaryReport();\nreports = tsm.createReport(x, null, null);\n\nprint(\" *** SUMMARY *** \");\nprint(reports[1]);\nprint(reports[2]);\n\nprint(\"\");\nprint(\" *** TRANSACTIONS *** \");\nprint(reports[0]);\n\n"})
p({"class":"foam.nanos.script.Script","id":"Report-TxSummary-Daily","code":"import net.nanopay.meter.TransactionSummaryReport;\nimport java.util.Date;\nimport java.util.Calendar;\n\nc = Calendar.getInstance();\n\n// Start\nc.add(Calendar.DATE, -1);\nc.set(Calendar.HOUR_OF_DAY, 0);\nc.set(Calendar.MINUTE, 0);\nc.set(Calendar.SECOND, 0);\nc.set(Calendar.MILLISECOND, 0);\nstartDate = c.getTime();\n\n// End\nc.set(Calendar.HOUR_OF_DAY, 23);\nc.set(Calendar.MINUTE, 59);\nc.set(Calendar.SECOND, 59);\nc.set(Calendar.MILLISECOND, 999);\nendDate = c.getTime();\n\ntsm = new TransactionSummaryReport();\nreports = tsm.createReport(x, startDate, endDate);\n\nprint(\" *** SUMMARY *** \");\nprint(reports[1]);\nprint(reports[2]);\n\nprint(\"\");\nprint(\" *** TRANSACTIONS *** \");\nprint(reports[0]);\n\n"})
p({"class":"foam.nanos.script.Script","id":"Report-TxSummary-Range","code":"import net.nanopay.meter.TransactionSummaryReport;\nimport java.util.Date;\nimport java.util.Calendar;\nimport java.text.SimpleDateFormat;\n\nstart = \"2018-11-25\";\nend   = \"2018-11-28\";\n\nSimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd\");\nstartDate = formatter.parse(start);\nendDate = formatter.parse(end);\n\nc = Calendar.getInstance();\n\n// Update start to beginning of the day\nc.setTime(startDate);\nc.set(Calendar.HOUR_OF_DAY, 0);\nc.set(Calendar.MINUTE, 0);\nc.set(Calendar.SECOND, 0);\nc.set(Calendar.MILLISECOND, 0);\nstartDate = c.getTime();\n\n// Update end to the end of the day\nc.setTime(endDate);\nc.set(Calendar.HOUR_OF_DAY, 23);\nc.set(Calendar.MINUTE, 59);\nc.set(Calendar.SECOND, 59);\nc.set(Calendar.MILLISECOND, 999);\nendDate = c.getTime();\n\nprint(\"start: \" + startDate);\nprint(\"end:   \" + endDate);\nprint(\"\");\n\ntsm = new TransactionSummaryReport();\nreports = tsm.createReport(x, startDate, endDate);\n\nprint(\" *** SUMMARY *** \");\nprint(reports[1]);\nprint(reports[2]);\n\nprint(\"\");\nprint(\" *** TRANSACTIONS *** \");\nprint(reports[0]);\n\n"})
