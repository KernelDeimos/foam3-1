/*
 * This file was generated by the Gradle "init" task.
 */

plugins {
    id "java"
    id "maven-publish"
    id "com.moowork.node" version "0.12"
}

repositories {
    mavenLocal()
    maven {
        url = "http://repo.maven.apache.org/maven2"
    }
}

dependencies {
	compile "org.jtwig:jtwig-core:5.87.0.RELEASE"
	compile "org.apache.commons:commons-collections4:4.3"
	compile "xerces:xercesImpl:2.12.0"
	compile "com.github.xeroapi:xero-java:2.1.3"
	compile "com.intuit.quickbooks-online:ipp-v3-java-data:5.0.4"
	compile "com.intuit.quickbooks-online:ipp-v3-java-devkit:5.0.4"
	compile "com.intuit.quickbooks-online:oauth2-platform-api:5.0.4"
	compile "javax.json:javax.json-api:1.0"
	compile "javax.websocket:javax.websocket-api:1.1"
	compile "javax.mail:javax.mail-api:1.6.2"
	compile "javax.servlet:javax.servlet-api:3.1.0"
	compile "jstl:jstl:1.2"
	compile ("org.apache.commons:commons-dbcp2:2.0.1") {
        exclude group: 'xml-apis'
        exclude module: 'xml-apis'
        exclude group: 'xerces'
        exclude module: 'xerces'
    }
	compile "org.apache.commons:commons-text:1.1"
	compile "commons-codec:commons-codec:1.11"
	compile "com.jcraft:jsch:0.1.54"
	compile "org.apache-extras.beanshell:bsh:2.0b6"
	compile "com.google.api-client:google-api-client:1.22.0"
	compile "org.bouncycastle:bcpkix-jdk15on:1.57"
	compile "org.bouncycastle:bcprov-jdk15on:1.57"
	compile "org.mindrot:jbcrypt:0.3m"
	compile "org.mongodb:mongodb-driver:3.4.2"
	compile "org.java-websocket:Java-WebSocket:1.3.4"
	compile "com.twilio.sdk:twilio:7.23.0"
	compile "com.stripe:stripe-java:5.35.1"
	compile "com.realexpayments.remote.sdk:rxp-remote-java:1.3.1"
	compile "javax.xml.bind:jaxb-api:2.1"
	compile "org.eclipse.jetty:jetty-server:9.4.10.v20180503"
	compile "org.eclipse.jetty:jetty-servlet:9.4.10.v20180503"
	compile "org.eclipse.jetty.websocket:websocket-server:9.4.10.v20180503"
	// compile "com.redhat.victims.maven:security-versions:1.0.6"
	compile "org.apache.logging.log4j:log4j-slf4j-impl:2.1"
	compile "org.slf4j:slf4j-api:1.8.0-beta2"
	compile "org.slf4j:slf4j-jdk14:1.7.25"
	compile "com.nulab-inc:zxcvbn:1.2.5"
	compile "com.plaid:plaid-java:3.0.5"
	compile "com.itextpdf:itextpdf:5.5.12"
	compile "com.itextpdf:html2pdf:1.0.2"
	compile "xml-apis:xml-apis:1.4.01"
}

configurations.all {
    resolutionStrategy {
        force 'xml-apis:xml-apis:1.4.01'
        dependencySubstitution {
            substitute module('asm:asm-tree:3.3.1') with module ('org.ow2.asm:asm-tree:5.0.3')
            substitute module('asm:asm-commons:3.3.1') with module ('org.ow2.asm:asm-commons:5.0.3')
            substitute module('asm:asm:3.3.1') with module ('org.ow2.asm:asm:5.0.3')
        }
    }
}

group = "net.nanopay"
description = "nanopay"
sourceCompatibility = "1.8"
libsDirName = "lib"

def genJavaDir = "build"
def targetDir = "target"
def workingDir = System.getProperty("user.dir")
def journalOut = workingDir + "/target/journals"

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = [
                    "$rootDir/foam2/src",
                    "$rootDir/nanopay/src",
                    "$rootDir/build"
            ]
            exclude "com/chrome/**"
            exclude "foam/nanos/tomcat/**"
            exclude "foam/dao/DatastoreDAO.java"
            exclude "net/nanopay/blob/**"
        }
    }
}

class IncrementalTask extends DefaultTask {
// https://android.googlesource.com/platform/tools/base/+/studio-master-dev/build-system/gradle-core/src/main/java/com/android/build/gradle/internal/tasks/IncrementalTask.java
// https://mrhaki.blogspot.com/2017/04/gradle-goodness-using-incremental-task.html

    @Input
    List<File> includeDirs = new ArrayList<>();

    @InputFiles
    FileCollection getIncludedFiles() {
        FileCollection files = getProject().files();
        for(File f : includeDirs) {
            files = files + getProject().fileTree(f);
        }

        return files;
    }

    @OutputDirectory
    File outputDir

    @Input
    def inputProperty

    @TaskAction
    void execute(IncrementalTaskInputs inputs) {
        if (inputs.incremental) {
            println "CHANGED inputs considered out of date"
            inputs.outOfDate { change ->
                println "out of date: ${change.file.name}"
            }
            inputs.removed { change ->
                println "removed: ${change.file.name}"
            }
        } else {
            println "ALL inputs considered out of date"
            project.delete(outputDir.listFiles())
        }
    }
}

task incrementalGenTask(type: IncrementalTask) {
    FileTree trees = fileTree(dir: "nanopay/src") + fileTree(dir: "foam2/src")
    trees.matching{include "**/*.js"}.each { File f ->
        includeDirs.add(f)
    }
    includeDirs.add(file("foam2/tools/classes.js"))
    includeDirs.add(file("nanopay/tools/classes.js"))
    outputDir = file(genJavaDir)
    inputProperty = project.properties['taskInputProperty'] ?: "original"
}

task genJava(type: Exec) {
    // https://stackoverflow.com/a/43358562 - flags for controller tasks
    dependsOn {
        tasks.incrementalGenTask
    }
    onlyIf { 
        !tasks.incrementalGenTask.state.upToDate
    }
    commandLine 'bash', './gen.sh', genJavaDir
}

task incrementalFindTask(type: IncrementalTask) {
    FileTree trees = fileTree(dir: "deployment") + fileTree(dir: "nanopay/src") + fileTree(dir: "foam2/src") + fileTree(dir: "interac/src")
    trees.matching{include "**/*.jrl"}.each { File f ->
        includeDirs.add(f)
    }
    outputDir = file(journalOut)
    inputProperty = project.properties['taskInputProperty'] ?: "original"
}

task findSH(type: Exec) {
    dependsOn {
        tasks.incrementalFindTask
    }
    onlyIf {
        !tasks.incrementalFindTask.state.upToDate
    }
    commandLine 'bash', './find.sh', workingDir, journalOut, project.hasProperty("journalConfig") ? "${journalConfig}" : ""
}

task packageFoam(type: NodeTask) {
    dependsOn {
        tasks.incrementalGenTask
    }
    onlyIf { 
        !tasks.incrementalGenTask.state.upToDate
    }
    script = file('./tools/js_build/build.js')
    args = [project.version]
}

task foamNodeModulesCopy(type: Copy) {
    from "$rootDir/foam2/node_modules/ace-builds/src-min-noconflict"
    into "$targetDir/classes/webroot"
    include "*.js"
}

task nanopayNodeModulesCopy(type: Copy) {
    from "$rootDir/node_modules/html2canvas/dist/html2canvas.min.js", "node_modules/jspdf/dist/jspdf.min.js", "node_modules/jspdf-autotable/dist/jspdf.plugin.autotable.min.js"
    into "$targetDir/classes/webroot"
}

task foamCopy(type: Copy) {
    dependsOn tasks.packageFoam
    dependsOn tasks.foamNodeModulesCopy
    dependsOn tasks.nanopayNodeModulesCopy
    
    from "tools/js_build/foam-bin-${project.version}.js"
    into "$targetDir/classes/webroot"
}

task copyLib(type: Copy) {
    from configurations.runtime
    into "$targetDir/lib"
}

task copyResources(type: Copy) {
    from "$rootDir/nanopay/src/resources"
    from "$rootDir/foam2/src/resources"
    into "$targetDir/classes"
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [VERSION:project.version] )
}

task copyJournals(type: Copy) {
    from "$targetDir/journals"
    into "$targetDir/classes/journals"
    include "*.0"
}

task copyImages(type: Copy) {
    from "$rootDir/foam2/src/foam/u2"
    from "$rootDir/foam2/src/foam/nanos"
    from "$rootDir/foam2/src/foam/support"
    from "$rootDir/nanopay/src/net/nanopay"
    into "$targetDir/classes"
    include "images/**"
}

task copyFlows(type: Copy) {
    from "$rootDir/documents"
    into "$targetDir/classes/documents"
    include "**"
}

task copyFavicon(type: Copy) {
    from "$rootDir/favicon"
    into "$targetDir/classes/webroot/favicon"
    include "**"
}

jar {
  dependsOn tasks.withType(Copy)
  destinationDirectory = file("$targetDir/lib")

  from "$buildDir/classes/java/main"
  from "$targetDir/classes"
  include "**"

  manifest {
    attributes "Main-Class": "foam.nanos.boot.Boot"
    attributes "Class-Path": configurations.runtimeClasspath.files.collect { it.getName() }.join(" ")
    attributes "Implementation-Title": "${project.name}"
    /* version - see settings.gradle and override on the command line
        with -Pversion=x.y.z */
    attributes "Implementation-Version": "${project.version}"
    attributes "Implementation-Timestamp": new Date()
    attributes "Implementation-Vendor-Id": group
    attributes "Implementation-Vendor": "nanopay"
  }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task tarz(type: Tar) {
    into("bin/") {
        from "deploy/bin"
    }
    into("lib/") {
        from "target/lib"
    }
    into("etc/") {
        from "deploy/etc"
    }

    archiveBaseName = "nanopay-deploy"
    archiveExtension = "tar.gz"
    destinationDirectory = file("target/package")
    compression = Compression.GZIP
}

clean {
    delete "${workingDir}/${targetDir}"
    delete "${buildDir}"
}

compileJava {
    dependsOn tasks.genJava
    dependsOn tasks.copyLib
}
