p({
  class:"foam.nanos.test.Test",
  id:"TrevisoOnboardingTest",
  description: "TrevisoOnboardingTest",
  server: false,
  code:"""
/* Treviso Onboarding Test */
/* Run this script symultaniously from at least two machines */

/* Number of times to execute this script */
runs = 1;

/* see deployment/test/sessions.jrl for unattended test session associated with admin user 1348 */
adminSession = 'DBFDD224-774E-4716-8508-43FA72E003D9'
/* support both attended and unattended runs */
defaultSession = localStorage && localStorage['defaultSession'] || adminSession;
realUser = x.subject.realUser;
user = x.subject.user;

/* model with helper methods for sudo, creating user, sessions... */
support = net.nanopay.partner.treviso.test.TrevisoOnboardingSupport.create({
  adminSessionId: defaultSession,
    adminSubject: foam.nanos.auth.Subject.create({
      realUser: realUser,
      user: user
    }, x),
    subject: foam.nanos.auth.Subject.create({
      realUser: realUser,
      user: user
    }, x)
  }, x);

async function execute(x) {
    try {
      support.setup(x);
      console.info('start');
      let n = Math.floor(Math.random() * 10000);

      // create user under admin
      var u;
      try {
        u = await support.createUser(x, 'u-'+support.uid+'-'+n, 'password', 'sme');
        test(true, 'createUser: '+u.id+', '+u.userName);
      } catch (e) {
        test(false, 'createUser: '+(e.message || e));
        throw e;
      }
      var s;
      try {
        s = await support.createSession(x, u.id, u.id);
        test(true, 'createSession: '+s.id);
      } catch (e) {
        test(false, 'createSession: '+(e.message || e));
        throw e;
      }

      // switch to user.
      support.sudoStore(x);
      x = support.sudo(x, s.id, u, u);

      try {
        await support.userRegistrationData(x, u);
        test(true, 'userRegistrationData');
      } catch (e) {
        test(false, 'userRegistrationData: '+(e.message || e));
        throw e;
      }
      try {
        await support.abliiPrivacyPolicy(x, u);
        test(true, 'abliiPrivacyPolicy');
      } catch (e) {
        test(false, 'abliiPrivacyPolicy: '+(e.message || e));
        throw e;
      }
      try {
        await support.trevisoTermsAndConditions(x, u);
        test(true, 'trevisoTermsAndConditions');
      } catch (e) {
        test(false, 'trevisoTermsAndConditions: '+(e.message || e));
        throw e;
      }
      try {
        await support.generalAdmission(x, u);
        test(true, 'generalAdmission');
      } catch (e) {
        test(false, 'generalAdmission: '+(e.message || e));
        throw e;
      }

      // Required for business onboarding
      try {
        await support.userDetails(x, u);
        test(true, 'userDetails');
      } catch (e) {
        test(false, 'userDetails: '+(e.message || e));
        throw e;
      }

      var business;
      // try {
      //   business = await support.createBusiness(x, u);
      //   test(true, 'createBusiness: '+business.id);
      // } catch (e) {
      //   test(false, 'createBusiness: '+(e.message || e));
      //   throw e;
      // }
      try {
        business = await support.businessInitialData(x, u);
        test(true, 'businessInitialData: '+business.id);
      } catch (e) {
        test(false, 'businessInitialData: '+(e.message || e));
        throw e;
      }


      var businessSession;
      try {
        businessSession = await support.createSession(x, u.id, business.id);
        test(true, 'createBusinessSession: '+businessSession.id);
      } catch (e) {
        test(false, 'createBusinessSession: '+(e.message || e));
        throw e;
      }

      // switch to business
      support.sudoStore(x);
      x = support.sudo(x, businessSession.id, u, business);

      try {
        await support.updateBusinessComplianceStatus(x, business);
        test(true, 'updateBusinessComplianceStatus');
      } catch (e) {
        test(false, 'updateBusinessComplianceStatus: '+(e.message || e));
        throw e;
      }

      // Signing Officer
      try {
        await support.userDateOfBirth(x, u);
        test(true, 'userDateOfBirth');
      } catch (e) {
        test(false, 'userDateOfBirth: '+(e.message || e));
        throw e;
      }

      try {
        await support.trevisoUserCPF(x, u);
        test(true, 'trevisoUserCPF');
      } catch (e) {
        test(false, 'trevisoUserCPF: '+(e.message || e));
        throw e;
      }
      try {
        await support.trevisoUserUtilityBill(x, u);
        test(true, 'trevisoUserUtilityBill');
      } catch (e) {
        test(false, 'trevisoUserUtilityBill: '+(e.message || e));
        throw e;
      }
      try {
        await support.trevisoUserIdentification(x, u);
        test(true, 'trevisoUserIdentification');
      } catch (e) {
        test(false, 'trevisoUserIdentification: '+(e.message || e));
        throw e;
      }
      try {
        await support.signingOfficerPersonalData(x, u, business);
        test(true, 'signingOfficerPersonalData');
      } catch (e) {
        test(false, 'signingOfficerPersonalData: '+(e.message || e));
        throw e;
      }


      // payments
      try {
        await support.internationalPaymentsAgreement(x);
        test(true, 'internationalPaymentsAgreement');
      } catch (e) {
        test(false, 'internationalPaymentsAgreement: '+(e.message || e));
        throw e;
      }
      try {
        await support.sourceCountryCapabilityBR(x);
        test(true, 'sourceCountryCapabilityBR');
      } catch (e) {
        test(false, 'sourceCountryCapabilityBR: '+(e.message || e));
        throw e;
      }
      try {
        await support.targetCountryCapabilityBR(x);
        test(true, 'targetCountryCapabilityBR');
      } catch (e) {
        test(false, 'targetCountryCapabilityBR: '+(e.message || e));
        throw e;
      }

      try {
        await support.businessDetailExpandedData(x, business);
        test(true, 'businessDetailExpandedData');
      } catch (e) {
        test(false, 'businessDetailExpandedData: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessTypeData(x, business);
        test(true, 'businessTypeData');
      } catch (e) {
        test(false, 'businessTypeData: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessExtraBusinessTypeDataNotRequired(x, business);
        test(true, 'businessExtraBusinessTypeDataNotRequired');
      } catch (e) {
        test(false, 'businessExtraBusinessTypeDataNotRequired: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessExtraBusinessTypeDataRequired(x, business);
        test(true, 'businessExtraBusinessTypeDataRequired');
      } catch (e) {
        test(false, 'businessExtraBusinessTypeDataRequired: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessAnnualFinancialStatement(x, business);
        test(true, 'businessAnnualFinancialStatement');
      } catch (e) {
        test(false, 'businessAnnualFinancialStatement: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessArticleOfIncorporation(x, business);
        test(true, 'businessArticleOfIncorporation');
      } catch (e) {
        test(false, 'businessArticleOfIncorporation: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessIncorporationDate(x, business);
        test(true, 'businessIncorporationDate');
      } catch (e) {
        test(false, 'businessIncorporationDate: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessRegistrationDate(x, business);
        test(true, 'businessRegistrationDate');
      } catch (e) {
        test(false, 'businessRegistrationDate: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessTaxIdNumber(x, business);
        test(true, 'businessTaxIdNumber');
      } catch (e) {
        test(false, 'businessTaxIdNumber: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessTypeAndSector(x, business);
        test(true, 'businessTypeAndSector');
      } catch (e) {
        test(false, 'businessTypeAndSector: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessOfficeConsumptionDocument(x, business);
        test(true, 'businessOfficeConsumption');
      } catch (e) {
        test(false, 'businessOfficeConsumption: '+(e.message || e));
        throw e;
      }
      try {
        await support.trevisoBusinessIdentificationNumbers(x, business);
        test(true, 'trevisoBusinessIdentificationNumbers');
      } catch (e) {
        test(false, 'trevisoBusinessIdentificationNumbers: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessCapitalAndEquity(x, business);
        test(true, 'businessCaptialAndEquity');
      } catch (e) {
        test(false, 'businessCapitalAndEquity: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessAccountData(x, business);
        test(true, 'businessCaptialAndEquity');
      } catch (e) {
        test(false, 'businessCapitalAndEquity: '+(e.message || e));
        throw e;
      }
      try {
        await support.transactionDetailsData(x, business);
        test(true, 'transactionDetailsData');
      } catch (e) {
        test(false, 'transactionDetailsData: '+(e.message || e));
        throw e;
      }
      try {
        await support.businessDirectorsData(x, business);
        test(true, 'businessDirectorsData');
      } catch (e) {
        test(false, 'businessDirectorsData: '+(e.message || e));
        throw e;
      }
      try {
        await support.ownersPercent(x, business);
        test(true, 'ownersPercent');
      } catch (e) {
        test(false, 'ownersPercent: '+(e.message || e));
        throw e;
      }
      try {
        await support.certifyReviewed(x, u);
        test(true, 'certifyReviewed');
      } catch (e) {
        test(false, 'certifyReviewed: '+(e.message || e));
        throw e;
      }
      try {
        await support.brazilOnboardingReviewed(x, u);
        test(true, 'brazilOnboardingReviewed');
      } catch (e) {
        test(false, 'brazilOnboardingReviewed: '+(e.message || e));
        throw e;
      }

      // business bank account
      try {
        let bank = await support.createBRBankAccount(x, business);
        test(true, 'createBusinessBankAccount');
      } catch (e) {
        test(false, 'createBusinessBankAccount: '+(e.message || e));
        throw e;
      }

      var contact;
      var contactbank;
      // US Contact US-USD bank Account
      try {
        contact = await support.createUSContact(x, business);
        test(true, 'createUSContact: '+contact.id);
      } catch (e) {
        test(false, 'createUSContact: '+(e.message || e));
        throw e;
      }
      try {
        contactbank = await support.createUSBankAccount(x, contact, true);
        test(true, 'createUSBankAccount: '+contactbank.id);
      } catch (e) {
        test(false, 'createUSBankAccount: '+(e.message || e));
        throw e;
      }
      try {
        contact.bankAccount = contactbank.id;
        await support.updateContact(x, contact);
        // await business.contacts.put(contact);
        test(true, 'adding business US contact: ' + contact.id + ', account: ' + contactbank.id);
      } catch (e) {
        test(false, 'adding business US contact: ' + contact.id + ', account: ' + contactbank.id + '. ' +(e.message || e));
        throw e;
      }
      // CA Contact CA-CAD bank Account
      try {
        contact = await support.createCAContact(x, business);
        test(true, 'createCAContact: '+contact.id);
      } catch (e) {
        test(false, 'createCAContact: '+(e.message || e));
        throw e;
      }
      try {
        contactbank = await support.createCABankAccount(x, contact, true);
        test(true, 'createContactCABankAccount: '+contactbank.id);
      } catch (e) {
        test(false, 'createContactCABankAccount: '+(e.message || e));
        throw e;
      }
      try {
        contact.bankAccount = contactbank.id;
        await support.updateContact(x, contact);
        // await business.contacts.put(contact);
        test(true, 'adding business CA contact: ' + contact.id + ', account: ' + contactbank.id);
      } catch (e) {
        test(false, 'adding business CA contact: ' + contact.id + ', account: ' + contactbank.id + '. ' +(e.message || e));
        throw e;
      }

      let afexBusiness;
      try {
        afexBusiness = support.getAFEXBusiness(x, business);
        test(true, 'getAFEXBusiness:'+afexBusiness.id);
      } catch (e) {
        test(false, 'getAFEXBusiness: '+(e.message || e));
      }

      let afexBusinessApproval;
      try {
        afexBusinessApproval = support.getApprovalRequest(x, 'afexBusinessDAO', afexBusiness.id);
        test(true, 'getApproval(AFEXBusiness):'+afexBusinessApproval.id);
      } catch (e) {
        test(false, 'getApproval(AFEXBusiness): '+(e.message || e));
      }

      // // check every 10 seconds until approved.
      // var startTime = Date.now();
      // while ( afexBusinessApproval.status != foam.nanos.approval.ApprovalStatus.APPROVED ) {

      // }
      console.info('done');
      support.teardown(x);
    } catch (e) {
      console.error(e.message || e);
      support.teardown(x);
    }
  }

  async function run(x) {
    var i;
    for ( i = 0; i < runs; i++ ) {
      await execute(x);
    }
  }

  run(x);
  """
})
