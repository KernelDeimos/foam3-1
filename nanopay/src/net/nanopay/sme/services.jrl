p({
  "class": "foam.nanos.boot.NSpec",
  "name": "smeUserRegistrationDAO",
  "lazy": false,
  "serve": true,
  "authenticate": false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.auth.User.getOwnClassInfo())
      .setInnerDAO(x.get("localUserDAO"))
      .setDecorator(
        new net.nanopay.security.UserRegistrationSanitationDAO.Builder(x).setDelegate(
        new net.nanopay.onboarding.UserRegistrationDAO(x, "sme", 
        new foam.dao.NullDAO(x,foam.nanos.auth.User.getOwnClassInfo()))).build())
      .setAuthorize(false)
      .setRuler(true)
      .setPm(true)
      .setPipelinePm(true)
      .setValidated(true)
      .setEnableInterfaceDecorators(false)
      .setValidator(new net.nanopay.onboarding.UserRegistrationValidator())
      .build();
  """,
  "client": """
    {
      "of": "foam.nanos.auth.User",
      "cache": true,
      "decorators": [
        { "class": "foam.nanos.fs.FileDAODecorator" },
        { "class": "foam.nanos.fs.FileArrayDAODecorator"}
      ]
    }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"businessInvitationDAO",
  "serve":true,
  "serviceScript":
  """
  mdao = new foam.dao.MDAO(net.nanopay.model.Invitation.getOwnClassInfo());
  inner = new net.nanopay.security.HashingJDAO(x, "SHA-256", false, true, mdao, "businessInvitations", "true".equals(System.getProperty("CLUSTER")));
  decorator = new net.nanopay.auth.PublicUserInfoDAO(x, "createdBy", "inviter",
    new net.nanopay.partners.AuthenticatedInvitationDAO(x,
      new net.nanopay.sme.BusinessInvitationDAO(x,
        new foam.dao.NullDAO(x, net.nanopay.model.Invitation.getOwnClassInfo()))));
  return new foam.dao.EasyDAO.Builder(x)
    .setOf(net.nanopay.model.Invitation.getOwnClassInfo())
    .setAuthorize(false)
    .setSeqNo(true)
    .setMdao(mdao)
    .setInnerDAO(inner)
    .setDecorator(decorator)
    .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.model.Invitation"
  }
  """,
  "documentation":"A DAO that can be used to invite users to join businesses.",
  "authNotes":"Wrapped with a custom AuthenticatedInvitationDAO. That should be refactored. Invitation should implement Authorizable and we should use an AuthorizationDAO."
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"businessOnboardingDAO",
  "serve":true,
  "authenticate":true,
  "serviceScript":
  """
    easyDAO = new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(false)
      .setLastModifiedAware(true)
      .setCreatedByAware(true)
      .setOf(net.nanopay.sme.onboarding.BusinessOnboarding.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("businessOnboardingDAO").build();

    businessOnboardingDAO = new net.nanopay.sme.onboarding.BusinessOnboardingDAO.Builder(x).setDelegate(easyDAO).build();
    updateOnboardingDAO = new net.nanopay.onboarding.UpdateOnboardingDAO(x, businessOnboardingDAO);
    validatingDAO = new foam.dao.ValidatingDAO(x, updateOnboardingDAO);
    return new foam.nanos.auth.AuthorizationDAO.Builder(x)
      .setDelegate(validatingDAO)
      .setAuthorizer(new foam.nanos.auth.AuthorizableAuthorizer("businessOnboarding"))
      .build();
  """,
  "client":
  """
    {
      "of":"net.nanopay.sme.onboarding.BusinessOnboarding",
      "cache":false
    }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"canadaUsBusinessOnboardingDAO",
  "serve":true,
  "authenticate":true,
  "serviceScript":
  """
    easyDAO = new foam.dao.EasyDAO.Builder(x)
        .setAuthorize(false)
        .setLastModifiedAware(true)
        .setCreatedByAware(true)
        .setOf(net.nanopay.sme.onboarding.CanadaUsBusinessOnboarding.getOwnClassInfo())
        .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
        .setJournalName(\"canadaUsBusinessOnboardingDAO\")
        .build();

    canadaUsBusinessOnboarding = new net.nanopay.sme.onboarding.CanadaUsBusinessOnboardingDAO.Builder(x).setDelegate(easyDAO).build();
    validatingDAO = new foam.dao.ValidatingDAO(x, canadaUsBusinessOnboarding);
    return new foam.nanos.auth.AuthorizationDAO.Builder(x)
      .setDelegate(validatingDAO)
      .setAuthorizer(new foam.nanos.auth.AuthorizableAuthorizer("canadaUsBusinessOnboarding"))
      .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.sme.onboarding.CanadaUsBusinessOnboarding",
    "cache":false
  }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"uSBusinessOnboardingDAO",
  "serve":true,
  "authenticate":true,
  "serviceScript":
  """
    easyDAO = new foam.dao.EasyDAO.Builder(x)
        .setAuthorize(false)
        .setLastModifiedAware(true)
        .setCreatedByAware(true)
        .setOf(net.nanopay.sme.onboarding.USBusinessOnboarding.getOwnClassInfo())
        .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
        .setJournalName(\"usBusinessOnboardingDAO\")
        .build();

    usBusinessOnboarding = new net.nanopay.sme.onboarding.USBusinessOnboardingDAO.Builder(x).setDelegate(easyDAO).build();
    updateOnboardingDAO = new net.nanopay.onboarding.UpdateOnboardingDAO(x, usBusinessOnboarding);
    validatingDAO = new foam.dao.ValidatingDAO(x, updateOnboardingDAO);
    return new foam.nanos.auth.AuthorizationDAO.Builder(x)
      .setDelegate(validatingDAO)
      .setAuthorizer(new foam.nanos.auth.AuthorizableAuthorizer("usBusinessOnboarding"))
      .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.sme.onboarding.USBusinessOnboarding",
    "cache":false
  }
  """
})
