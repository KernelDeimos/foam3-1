p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localTransactionQuotePlanDAO",
  "lazy":false,
  "serviceScript":
  """
    dao = new foam.dao.NullDAO.Builder(x)
      .setOf(net.nanopay.tx.TransactionQuote.getOwnClassInfo())
      .build();
    dao = new net.nanopay.tx.SplitTransactionPlanDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.KotakFxTransactionPlanDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.KotakSplitTransactionPlanDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.KotakTransactionPlanDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.NanopayLineItemFeeDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.alterna.AlternaTransactionPlanDAO.Builder(x)
      .setEnabled(false)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.bmo.BmoTransactionPlanDAO.Builder(x)
      .setEnabled(true)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.rbc.RbcTransactionPlanDAO.Builder(x)
      .setEnabled(false)
      .setDelegate(dao)
      .build();     
    dao = new net.nanopay.fx.afex.AFEXTransactionPlanDAO.Builder(x)
      .setEnabled(true)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.fx.ascendantfx.AscendantFXTransactionPlanDAO.Builder(x)
      .setEnabled(true)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.NanopayFXTransactionPlanDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.CompliancePlanDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.TransactionQuoteDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.DigitalTransactionPlanDAO(x, dao);
    dao = new foam.nanos.ruler.RulerDAO(x, dao, "localTransactionQuotePlanDAO");
    dao = new net.nanopay.tx.RetailTransactionPlanDAO(x, dao);
    dao = new net.nanopay.tx.AbliiTransactionDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.DebtablePlanDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new foam.dao.ValidatingDAO(x, dao, new net.nanopay.tx.RequestTransactionValidator());
    dao = new net.nanopay.tx.LoanTransactionPlanDAO(x,dao);
    dao = new net.nanopay.tx.DebtRepaymentPlanDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.PayeeTransactionDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.PayerTransactionDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.BulkTransactionPlanDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.GuidTransactionPlanDAO.Builder(x)
      .setDelegate(dao)
      .build();
    return new foam.dao.PMDAO(x, new foam.dao.PipelinePMDAO(x, dao));
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"transactionQuotePlanDAO",
  "lazy":false,
  "serve":true,
  "serviceScript":"""
    return x.get("localTransactionQuotePlanDAO");
    """,
  "client":"{\"of\":\"net.nanopay.tx.TransactionQuote\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localTransactionDAO",
  "lazy":false,
  "serviceScript":"""
    import net.nanopay.tx.model.Transaction;
    import foam.dao.MDAO;
    import foam.dao.DAO;
    import foam.nanos.analytics.DAOFoldManager;
    import foam.nanos.analytics.FoldManagerDAODecorator;

    MDAO mdao = new MDAO(Transaction.getOwnClassInfo());
    mdao.addIndex(new foam.core.PropertyInfo[] {Transaction.CREATED});
    mdao.addIndex(new foam.core.PropertyInfo[] {Transaction.STATUS});
    mdao.addIndex(new foam.core.PropertyInfo[] {Transaction.TYPE});
    mdao.addIndex(new foam.core.PropertyInfo[] {Transaction.PARENT});
    mdao.addIndex(new foam.core.PropertyInfo[] {Transaction.DESTINATION_ACCOUNT});
    mdao.addIndex(new foam.core.PropertyInfo[] {Transaction.SOURCE_ACCOUNT});
    mdao.addIndex(new foam.core.PropertyInfo[] {Transaction.LAST_STATUS_CHANGE});
    mdao.addIndex(new foam.core.PropertyInfo[] {Transaction.CREATED});
    
    inner = new DAOFoldManager.Builder(x)
      .setDao((DAO)x.get("accountBalanceHourlyCandlestickDAO"))
      .setPeriodLengthMs(60 * 60 * 1000)
      .build();
    inner = new FoldManagerDAODecorator.Builder(x)
      .setDelegate(mdao)
      .setFm(inner)
      .build();
    inner = new net.nanopay.tx.TransactionDAO(x, inner);
    inner = new net.nanopay.security.HashingJDAO(x, "SHA-256", true, inner, "transactions");

    dao = new net.nanopay.tx.SaveChainedTransactionDAO.Builder(x)
      .setDelegate(new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.tx.model.Transaction.getOwnClassInfo()).build())
      .build();
    dao = new net.nanopay.tx.CompletedTransactionDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.tx.UpdateInvoiceTransactionDAO(x, dao);
    dao = new net.nanopay.payment.PADTypeCheckDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.fx.ascendantfx.AscendantFXTransactionDAO(x, dao);
    dao = new net.nanopay.tx.realex.RealexTransactionDAO(x, dao);
    dao = new net.nanopay.tx.stripe.StripeTransactionDAO(x, dao);
    dao = new foam.nanos.ruler.RulerDAO(x, dao, "localTransactionDAO");
    dao = new foam.dao.ValidatingDAO(x, dao, new net.nanopay.tx.TransactionValidator());
    dao = new foam.dao.GUIDDAO.Builder(x).setDelegate(dao).build();
    //TODO: Replace below line with  this line: dao = new net.nanopay.tx.TransactionQuotingDAO(x, dao);
    dao = new net.nanopay.tx.CheckQuotedTransactionDAO(x, dao);

    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.model.Transaction.getOwnClassInfo())
      .setInnerDAO(inner)
      .setDecorator(dao)
      .setPm(true)
      .setPipelinePm(true)
      .setGuid(false)
      .setContextualize(true)
      .setRuler(false)
      .build();
    """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"transactionDAO",
  "lazy":false,
  "serve":true,
  "serviceScript":
  """
    return new net.nanopay.tx.AuthenticatedTransactionDAO(x,
      new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.model.Transaction.getOwnClassInfo())
      .setInnerDAO(x.get("localTransactionDAO"))
      .setDecorator(new foam.nanos.auth.PermissionedPropertyDAO(x, new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.tx.model.Transaction.getOwnClassInfo()).build()))
      .setAuthorizer(new foam.nanos.auth.AuthorizableAuthorizer("transaction"))
      .setPm(true)
      .setPipelinePm(true)
      .setEnableInterfaceDecorators(false)
      .setRuler(false)
      .setOrder(new foam.mlang.order.Comparator[] { new foam.mlang.order.Desc.Builder(x).setArg1(net.nanopay.tx.model.Transaction.CREATED).build() })
      .setServiceProviderAware(true)
      .setServiceProviderAwarePropertyInfos(
        new java.util.HashMap() {{
          put(
            net.nanopay.account.Account.class.getName(),
            new foam.core.PropertyInfo[] {
              net.nanopay.account.Account.OWNER
            }
          );
          put(
            net.nanopay.tx.model.Transaction.class.getName(),
            new foam.core.PropertyInfo[] {
              net.nanopay.tx.model.Transaction.SOURCE_ACCOUNT,
              net.nanopay.tx.model.Transaction.DESTINATION_ACCOUNT,
            }
          );
        }}
      ) 
      .build());
  """,
  "client": "{\"of\":\"net.nanopay.tx.model.Transaction\", \"remoteListenerSupport\": false, \"serverBox\":{ \"class\":\"foam.box.SessionClientBox\", \"url\":\"service/transactionDAO\", \"delegate\":{ \"class\":\"foam.box.TimeoutBox\", \"timeout\":60000,\"delegate\":{\"class\":\"foam.box.HTTPBox\", \"url\":\"service/transactionDAO\"}}}}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "tableViewTransactionDAO",
  "lazy": false,
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.model.Transaction.getOwnClassInfo())
      .setInnerDAO(x.get("transactionDAO"))
      .setDecorator(new net.nanopay.tx.TransactionEntitiesDAO(x, new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.tx.model.Transaction.getOwnClassInfo()).build()))
      .setAuthorize(false)
      .setPm(true)
      .setPipelinePm(true)
      .setEnableInterfaceDecorators(false)
      .setOrder(new foam.mlang.order.Comparator[] { new foam.mlang.order.Desc.Builder(x).setArg1(net.nanopay.tx.model.Transaction.CREATED).build() })
      .setRuler(false)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.tx.model.Transaction\", \"remoteListenerSupport\": false, \"serverBox\":{ \"class\":\"foam.box.SessionClientBox\", \"url\":\"service/tableViewTransactionDAO\", \"delegate\":{ \"class\":\"foam.box.TimeoutBox\", \"timeout\":25000,\"delegate\":{\"class\":\"foam.box.HTTPBox\", \"url\":\"service/tableViewTransactionDAO\"}}}}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"liquidityService",                   "serviceScript":"return new net.nanopay.liquidity.LiquidityService();"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountHierarchyService",
  "serve": true,
  "serviceClass": "net.nanopay.liquidity.tx.AccountHierarchyService",
  "boxClass": "net.nanopay.liquidity.tx.AccountHierarchySkeleton",
  "client":
    """
      {
        "class":"net.nanopay.liquidity.tx.ClientAccountHierarchyService",
        "delegate": {
          "class":"foam.box.SessionClientBox",
          "delegate": {
            "class":"foam.box.HTTPBox",
            "url":
            "service/accountHierarchyService"
          }
        }
      }
    """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "transactionPurposeDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.TransactionPurpose.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .setJournalName("transactionPurposes")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.tx.TransactionPurpose\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "transactionLimitDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.model.TransactionLimit.getOwnClassInfo())
      .setAuthorize(false)
      .setPm(true)
      .setPipelinePm(true)
      .setJournalName("transactionLimits")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.tx.model.TransactionLimit\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"userTransactionLimit",
  "serve":true,
  "boxClass":"net.nanopay.tx.UserTransactionLimitSkeleton",
  "serviceClass":"net.nanopay.tx.UserTransactionLimitService",
  "client":"{ \"class\":\"net.nanopay.tx.client.ClientUserTransactionLimitService\", \"delegate\": { \"class\":\"foam.box.HTTPBox\", \"url\":\"service/userTransactionLimit\" } }"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "pacsMsg",
  "parameters": true,
  "serviceScript": "return new net.nanopay.tx.PacsWebAgent()"
})
p({"class":"foam.nanos.boot.NSpec", "name":"transactionFeeDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"transactionFeeDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"transactionFees\").setOf(net.nanopay.tx.model.TransactionFee.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tx.model.TransactionFee\"}","description":"Fees or charges with using a particular rail or service"})
p({"class":"foam.nanos.boot.NSpec", "name":"lineItemTypeDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"lineItemTypeDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"lineItemTypes\").setOf(net.nanopay.tx.LineItemType.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tx.LineItemType\"}","description":"Type of service being invoiced for."})
p({"class":"foam.nanos.boot.NSpec", "name":"lineItemFeeDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"lineItemFeeDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"lineItemFees\").setOf(net.nanopay.tx.LineItemFee.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tx.LineItemFee\"}","description":"Fee to apply for a particular LineItem type."})
p({"class":"foam.nanos.boot.NSpec", "name":"lineItemTypeAccountDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"lineItemTypeAccountDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"lineItemTypeAccounts\").setOf(net.nanopay.tx.LineItemTypeAccount.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tx.LineItemTypeAccount\"}","description":"Deposit Account or user/payee for LineItem type."})
p({"class":"foam.nanos.boot.NSpec", "name":"taxService",                   "serve":true, "serviceScript":"return new net.nanopay.tax.TaxMockService(x);"})
p({"class":"foam.nanos.boot.NSpec", "name":"lineItemTaxDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setPipelinePm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"lineItemTaxDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"lineItemTax\").setOf(net.nanopay.tax.LineItemTax.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tax.LineItemTax\"}","description":"Tax to apply for a particular LineItem type, TaxCode, Country and Region."})
p({"class":"foam.nanos.boot.NSpec", "name":"lineItemTaxDAO",                     "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setPm(true).setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer(\"lineItemTaxDAO\")).setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"lineItemTax\").setOf(net.nanopay.tax.LineItemTax.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.tax.LineItemTax\"}","description":"Tax to apply for a particular LineItem type, TaxCode, Country and Region."})

// Reduce Managers
p({"class":"foam.nanos.boot.NSpec", "name":"accountBalanceMonthlyReduceManager",               "serve":true,  "serviceScript":"return new foam.nanos.analytics.DAOReduceManager.Builder(x).setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceWeeklyCandlestickDAO\")).setDestDAO((foam.dao.DAO) x.get(\"accountBalanceMonthlyCandlestickDAO\")).setPeriodLengthMs(30*7*24*60*60*1000).build();"})
p({"class":"foam.nanos.boot.NSpec", "name":"accountBalanceQuarterlyReduceManager",               "serve":true,  "serviceScript":"return new foam.nanos.analytics.DAOReduceManager.Builder(x).setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceMonthlyCandlestickDAO\")).setDestDAO((foam.dao.DAO) x.get(\"accountBalanceQuarterlyCandlestickDAO\")).setPeriodLengthMs(3*30*7*24*60*60*1000).build();"})
p({"class":"foam.nanos.boot.NSpec", "name":"accountBalanceAnnuallyReduceManager",               "serve":true,  "serviceScript":"return new foam.nanos.analytics.DAOReduceManager.Builder(x).setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceQuarterlyCandlestickDAO\")).setDestDAO((foam.dao.DAO) x.get(\"accountBalanceAnnuallyCandlestickDAO\")).setPeriodLengthMs(12*30*7*24*60*60*1000).build();"})

// Candlesticks
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountBalanceWeeklyCandlestickDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.analytics.Candlestick.getOwnClassInfo())
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.analytics.Candlestick\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountBalanceMonthlyCandlestickDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.analytics.Candlestick.getOwnClassInfo())
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.analytics.Candlestick\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountBalanceQuarterlyCandlestickDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.analytics.Candlestick.getOwnClassInfo())
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.analytics.Candlestick\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountBalanceAnnuallyCandlestickDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.analytics.Candlestick.getOwnClassInfo())
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.analytics.Candlestick\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountBalanceHourlyCandlestickDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setCluster(false)
      .setOf(foam.nanos.analytics.Candlestick.getOwnClassInfo())
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.analytics.Candlestick\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountBalanceDailyCandlestickDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.analytics.Candlestick.getOwnClassInfo())
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.analytics.Candlestick\"}"
})

p({"class": "foam.nanos.boot.NSpec","name": "accountBalanceDailyReduceManager","serviceScript":"""return new foam.nanos.analytics.DAOReduceManager.Builder(x)\n  .setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceHourlyCandlestickDAO\"))\n  .setDestDAO((foam.dao.DAO) x.get(\"accountBalanceDailyCandlestickDAO\"))\n  .setCloseTimeExpr(new foam.glang.EndOfDay.Builder(x)\n    .setDelegate(new foam.mlang.IdentityExpr.Builder(x).build())\n    .build())\n  .build();"""})
p({"class": "foam.nanos.boot.NSpec","name": "accountBalanceWeeklyReduceManager","serviceScript":"""return new foam.nanos.analytics.DAOReduceManager.Builder(x)\n  .setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceDailyCandlestickDAO\"))\n  .setDestDAO((foam.dao.DAO) x.get(\"accountBalanceWeeklyCandlestickDAO\"))\n  .setCloseTimeExpr(new foam.glang.EndOfWeek.Builder(x)\n    .setDelegate(new foam.mlang.IdentityExpr.Builder(x).build())\n    .build())\n  .build();"""})
p({"class": "foam.nanos.boot.NSpec","id": "accountBalanceMonthlyReduceManager","serviceScript":"""return new foam.nanos.analytics.DAOReduceManager.Builder(x)\n  .setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceDailyCandlestickDAO\"))\n  .setDestDAO((foam.dao.DAO) x.get(\"accountBalanceMonthlyCandlestickDAO\"))\n  .setCloseTimeExpr(new foam.glang.EndOfMonth.Builder(x)\n    .setDelegate(new foam.mlang.IdentityExpr.Builder(x).build())\n    .build())\n  .build();"""})
p({"class": "foam.nanos.boot.NSpec","id": "accountBalanceQuarterlyReduceManager","serviceScript":"""return new foam.nanos.analytics.DAOReduceManager.Builder(x)\n  .setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceMonthlyCandlestickDAO\"))\n  .setDestDAO((foam.dao.DAO) x.get(\"accountBalanceQuarterlyCandlestickDAO\"))\n  .setCloseTimeExpr(new foam.glang.EndOfQuarter.Builder(x)\n    .setDelegate(new foam.mlang.IdentityExpr.Builder(x).build())\n    .build())\n  .build();"""})
p({"class": "foam.nanos.boot.NSpec","id": "accountBalanceAnnuallyReduceManager","serviceScript":"""return new foam.nanos.analytics.DAOReduceManager.Builder(x)\n  .setSourceDAO((foam.dao.DAO) x.get(\"accountBalanceQuarterlyCandlestickDAO\"))\n  .setDestDAO((foam.dao.DAO) x.get(\"accountBalanceAnnuallyCandlestickDAO\"))\n  .setCloseTimeExpr(new foam.glang.EndOfYear.Builder(x)\n    .setDelegate(new foam.mlang.IdentityExpr.Builder(x).build())\n    .build())\n  .build();"""})

p({"class":"foam.nanos.boot.NSpec", "name":"afexTradeResponseDAO",                 "lazy":false,  "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setOf(net.nanopay.fx.afex.CreateTradeResponse.getOwnClassInfo()).setSeqNo(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"afexTradeResponse\").build();","client":"{\"of\":\"net.nanopay.fx.afex.CreateTradeResponse\"}" })

p({"class":"foam.nanos.boot.NSpec","name":"padTypeDAO",                      "lazy":false,  "serve":true, "serviceScript":"return new foam.dao.SequenceNumberDAO(new foam.dao.java.JDAO(x, net.nanopay.payment.PADType.getOwnClassInfo(), \"PADTypes\"));", "client":"{\"of\":\"net.nanopay.payment.PADType\"}"})
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "paymentProviderDAO",
  "lazy": false,
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(true)
      .setSeqNo(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("paymentProviders")
      .setOf(net.nanopay.payment.PaymentProvider.getOwnClassInfo())
      .build();
  """,
  "client":"{\"of\":\"net.nanopay.payment.PaymentProvider\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "InstitutionPaymentProviderDAO",
  "lazy": false,
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(true)
      .setSeqNo(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("InstitutionPaymentProvider")
      .setOf(net.nanopay.payment.InstitutionPaymentProvider.getOwnClassInfo())
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.payment.InstitutionPaymentProvider\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "purposeCodeDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(false)
      .setPm(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("purposeCodes")
      .setPipelinePm(true)
      .setOf(net.nanopay.tx.PurposeCode.getOwnClassInfo())
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.tx.PurposeCode\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "purposeGroupDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(false)
      .setPm(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("purposeGroups")
      .setPipelinePm(true)
      .setOf(net.nanopay.tx.PurposeGroup.getOwnClassInfo())
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.tx.PurposeGroup\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"transactionEventDAO",
  "lazy":false,
  "serve":true,
  "client":"{\"of\":\"net.nanopay.tx.TransactionEvent\"}",
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.TransactionEvent.getOwnClassInfo())
      .setSeqNo(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("transactionEvent")
      .build();
  """
})
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "exchangeRateService",
  "serve": true,
  "serviceClass": "net.nanopay.fx.ExchangeRateService",
  "boxClass": "net.nanopay.fx.ExchangeRateServiceInterfaceSkeleton",
  "client":
    """
      {
        "class":"net.nanopay.fx.ExchangeRateService",
        "delegate": {
          "class":"foam.box.SessionClientBox",
          "delegate": {
            "class":"foam.box.HTTPBox",
            "url":
            "service/exchangeRateService"
          }
        }
      }
    """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"paymentProviderCorridorJunctionDAO",
  "serve":true,
  "serviceScript":"""
    import foam.dao.DAO;

    dao = new foam.dao.MDAO(net.nanopay.payment.PaymentProviderCorridorJunction.getOwnClassInfo());
    dao.addIndex(new foam.core.PropertyInfo[] { net.nanopay.payment.PaymentProviderCorridorJunction.SOURCE_ID, net.nanopay.payment.PaymentProviderCorridorJunction.TARGET_ID });
    dao.addIndex(new foam.core.PropertyInfo[] { net.nanopay.payment.PaymentProviderCorridorJunction.SOURCE_ID });

    return new foam.dao.EasyDAO.Builder(x)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("paymentProviderCorridorJunctions")
      .setOf(net.nanopay.payment.PaymentProviderCorridorJunction.getOwnClassInfo())
      .setInnerDAO(dao)
      .build();
  """,
  "client":"{\"of\":\"net.nanopay.payment.PaymentProviderCorridorJunction\", \"remoteListenerSupport\": false}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "corridorService",
  "serve": true,
  "serviceClass": "net.nanopay.payment.PaymentCorridorService",
  "boxClass": "net.nanopay.payment.CorridorService",
  "client":
    """
      {
        "class":"net.nanopay.payment.ClientCorridorService",
        "delegate": {
          "class":"foam.box.SessionClientBox",
          "delegate": {
            "class":"foam.box.HTTPBox",
            "url":
            "service/corridorService"
          }
        }
      }
    """
})

p({
  "class":"foam.nanos.boot.NSpec", 
  "name": "eftFileDAO",                   
  "lazy": false,  
  "serve": true, 
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setSeqNo(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("eftFile")
      .setOf(net.nanopay.tx.cico.EFTFile.getOwnClassInfo())
      .setAuthorize(false)
      .build();
  """, 
  "client": "{\"of\":\"net.nanopay.tx.cico.EFTFile\"}"
  })