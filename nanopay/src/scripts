p({"class":"foam.nanos.script.Script","id":"createInvoices","description":"Create Test Data","server":false,"scheduled":false,"code":" var MS_PER_DAY = 1000 * 3600 * 24;\nvar invoiceDAO = x.invoiceDAO;\n\nthis.__context__.userDAO.select().then(function (bs) {\nvar l = bs.array.length;\nfor ( var i = 0 ; i < 1000 ; i++ ) {\nvar fi = Math.floor(Math.random()*l);\nvar ti = Math.floor(Math.random()*l);\nvar dd = new Date(Date.now() - 2*360*MS_PER_DAY*(Math.random()-0.1));\nvar amount = Math.floor(Math.pow(10,3+Math.random()*4))/100;\n\nif ( ti === fi ) continue;\nvar inv = net.nanopay.invoice.model.Invoice.create({\ndraft:            Math.random()<0.002,\ninvoiceNumber:    10000+i,\npurchaseOrder:    10000+i,\npayerId:   bs.array[fi].id,\npayeeId:   bs.array[ti].id,\n// fromBusinessName: bs.array[fi-100].name,\n// toBusinessName:   bs.array[ti-100].name,\ndueDate:        dd,\namount:           amount\n},x);\n\nif ( Math.random() < 0.005 ) {\ninv.paymentId = -1;\n} else if ( Math.random() < 0.97 ) {\ninv.paymentDate = new Date(inv.dueDate.getTime() - ( 7 + Math.random() * 60 ) * MS_PER_DAY);\nif ( inv.paymentDate < Date.now() ) {\ninv.paymentId = inv.invoiceNumber;\n}\n}\n\nconsole.log(inv.stringify());\ninvoiceDAO.put(inv);\n}\n\n});","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"createUsers","description":"Create test Users","server":false,"scheduled":false,"code":"            var lastNames = [\n'Martin',\n'Jacobs',\n'Yang',\n'Smith',\n'Johnson',\n'Williams',\n'Jones',\n'Brown',\n'Davis',\n'Miller',\n'Wilson',\n'Moore',\n'Taylor',\n'Anderson',\n'Thomas',\n'Jackson',\n'White',\n'Harris',\n'Martin',\n'Thompson',\n'Garcia',\n'Martinez',\n'Robinson',\n'Clark',\n'Rodrigues',\n'Lewis',\n'Lee',\n'Walker',\n'Hall',\n'Allen',\n'Young',\n'Hernandez',\n'King',\n'Wright',\n'Lopez',\n'Hill',\n'Scott',\n'Green',\n'Adams',\n'Baker',\n'Gonzalez',\n'Nelson',\n'Carter',\n'Mitchell',\n'Perez',\n'Roberts',\n'Turner',\n'Phillips',\n'Campbell',\n'Parker',\n'Evans',\n'Edwards',\n'Collins',\n'Stewart',\n'Sanchez',\n'Morris',\n'Rogers',\n'Reed',\n'Cook',\n'Morgan',\n'Bell',\n'Murphy',\n'Bailey',\n'Rivera',\n'Cooper',\n'Richardson',\n'Cox',\n'Howard',\n'Ward',\n'Torres',\n'Peterson',\n'Gray',\n'Ramirez',\n'James',\n'Watson',\n'Brooks',\n'Kelly',\n'Sanders',\n'Price',\n'Bennett',\n'Wood'\n];\nvar firstNames = [\n'Ricky',\n'Sophia',\n'Jian',\n'Jackson',\n'Emma',\n'Aiden',\n'Olivia',\n'Lucas',\n'Ava',\n'Liam',\n'Mia',\n'Noah',\n'Isabella',\n'Ethan',\n'Riley',\n'Mason',\n'Aria',\n'Caden',\n'Zoe',\n'Oliver',\n'Charlotte',\n'Elijah',\n'Lily',\n'Grayson',\n'Layla',\n'Jacob',\n'Amelia',\n'Michael',\n'Emily',\n'Benjamin',\n'Madelyn',\n'Carter',\n'Aubrey',\n'James',\n'Adalyn',\n'Jayden',\n'Madison',\n'Alexander',\n'Harper',\n'Caleb',\n'Abigail',\n'Ryan',\n'Aaliyah',\n'Luke',\n'Avery',\n'Daniel',\n'Evelyn',\n'Jack',\n'Kaylee',\n'William',\n'Ella',\n'Owen',\n'Ellie',\n'Gabriel',\n'Scarlett',\n'Matthew',\n'Arianna',\n'Connor',\n'Hailey',\n'Jayce',\n'Nora',\n'Isaac',\n'Addison',\n'Sebastian',\n'Brooklyn',\n'Henry',\n'Hannah',\n'Muhammad',\n'Mila',\n'Cameron',\n'Leah',\n'Wyatt',\n'Elizabeth',\n'Dylan',\n'Sarah',\n'Nathan',\n'Eliana',\n'Nicholas'\n];\n\n\n[\n'AAA CAD Business',\n'ABC Engineering',\n'Ali Designs',\n'Betasoloin',\n'Betatech',\n'Bioholding',\n'Bioplex',\n'Blackzim',\n'Cancity',\n'Codehow',\n'Condax',\n'Conecom',\n'Dalttechnology',\n'dambase',\n'Domzoom',\n'Doncon',\n'Donquadtech',\n'Dontechi',\n'Donware',\n'Fasehatice',\n'Faxquote',\n'Finhigh',\n'Finjob',\n'Funholding',\n'Ganjaflex',\n'Gogozoom',\n'Golddex',\n'Goodsilron',\n'Green-Plus',\n'Groovestreet',\n'Hatfan',\n'Hottechi',\n'Inity',\n'Isdom',\n'Iselectrics',\n'J-Texon',\n'Kan-code',\n'Kinnamplus',\n'Konex',\n'Konmatfix',\n'Labdrill',\n'Lexiqvolax',\n'Mathtouch',\n'Nam-zim',\n'Newex',\n'Ontomedia',\n'Openlane',\n'Opentech',\n'Plexzap',\n'Plusstrip',\n'Plussunin',\n'Rangreen',\n'Rantouch',\n'Ron-tech',\n'Rundofase',\n'Scotfind',\n'Scottech',\n'Silis',\n'Singletechno',\n'Sonron',\n'Stanredtax',\n'Statholdings',\n'Streethex',\n'Sumace',\n'Sunnamplex',\n'Toughzap',\n'Treequote',\n'Warephase',\n'Xx-holding',\n'Xx-zobam',\n'Y-corporation',\n'year-job',\n'Yearin',\n'Zathunicon',\n'Zencorporation',\n'Zoomit',\n'Zotware',\n'Zumgoity'\n].forEach(function (name, i) {\nvar user = foam.nanos.auth.User.create({ id: 100+i, organization: name, firstName: firstNames[i], lastName: lastNames[i]});\nconsole.log(user.stringify());\nx.userDAO.put(user);\n})\n","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"createBankAccounts","description":"Create Bank Accounts","server":false,"scheduled":false,"code":"dao = x.bankAccountDAO;\n\ndao.put(net.nanopay.model.BankAccount.create({\nid: 1,\naccountName: \"Scotiabank Chequing\",\ntransitNumber: \"40468\",\naccountNumber: \"1049462\",\nstatus: \"Verified\"\n}));\n\ndao.put(net.nanopay.model.BankAccount.create({\nid: 2,\naccountName: \"RBC Savings\",\ntransitNumber: \"03164\",\naccountNumber: \"9807134\",\nstatus: \"Verified\"\n}));\n\ndao.put(net.nanopay.model.BankAccount.create({\nid: 3,\naccountName: \"TD Chequing\",\ntransitNumber: \"98423\",\naccountNumber: \"1437890\",\nstatus: \"Unverified\"\n}));\n\ndao.put(net.nanopay.model.BankAccount.create({\nid: 1,\naccountName: \"CIBC Savings\",\ntransitNumber: \"09784\",\naccountNumber: \"1875437\",\nstatus: \"Unverified\"\n}));","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"ca504393-1bd8-4fea-9c59-6df9aa202b49","description":"S2H Invoices","lastRun":"2017-11-09T19:45:15.457Z","server":false,"scheduled":false,"code":" var MS_PER_DAY = 1000 * 3600 * 24;\nvar invoiceDAO = x.invoiceDAO;\n\nthis.__context__.userDAO.select().then(function (bs) {\nvar l = bs.array.length;\nfor ( var i = 0 ; i < 1000 ; i++ ) {\nvar fi = Math.floor(Math.random()*l);\nvar ti = Math.floor(Math.random()*l);\nvar dd = new Date(Date.now() - 2*360*MS_PER_DAY*(Math.random()-0.1));\nvar amount = Math.floor(Math.pow(10,3+Math.random()*4))/100;\n\nif ( ti === fi ) continue;\nvar inv = net.nanopay.invoice.model.Invoice.create({\ndraft:            Math.random()<0.002,\ninvoiceNumber:    10000+i,\npurchaseOrder:    10000+i,\npayerId:   bs.array[fi].id,\npayeeId:   2,\n// fromBusinessName: bs.array[fi-100].name,\n// toBusinessName:   bs.array[ti-100].name,\ndueDate:        dd,\namount:           amount\n},x);\n\nif ( Math.random() < 0.005 ) {\ninv.paymentId = -1;\n} else if ( Math.random() < 0.97 ) {\ninv.paymentDate = new Date(inv.dueDate.getTime() - ( 7 + Math.random() * 60 ) * MS_PER_DAY);\nif ( inv.paymentDate < Date.now() ) {\ninv.paymentId = inv.invoiceNumber;\n}\n}\n\nconsole.log(inv.stringify());\ninvoiceDAO.put(inv);\n}\n\n});","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"CC Merch2 Email","description":"","lastRun":"2017-11-27T21:57:37.950Z","server":true,"scheduled":false,"code":"email = x.get(\"email\");\nemail.setUsername(\"nanopay.email@gmail.com\");\nemail.setPassword(\"smt5s3ndr\");\n\nmessage = new foam.nanos.notification.email.EmailMessage();\nmessage.setFrom(\"info@nanopay.net\");\nmessage.setReplyTo(\"noreply@nanopay.net\");\nmessage.setTo(new String[] { \"\" });\nmessage.setSubject(\"test\");\n\nmap = new java.util.HashMap();\nmap.put(\"name\", \"Mike\");\nmap.put(\"money\", \"$1,000\");\nmap.put(\"email\", \"mike@gmail.com\");\n\ntest(email.sendEmailFromTemplate(message, \"cc-template-invite/merc2\", map), \"email template test\");","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"CC Shopper Email","description":"","lastRun":"2017-11-27T21:57:40.527Z","server":true,"scheduled":false,"code":"email = x.get(\"email\");\nemail.setUsername(\"nanopay.email@gmail.com\");\nemail.setPassword(\"smt5s3ndr\");\n\nmessage = new foam.nanos.notification.email.EmailMessage();\nmessage.setFrom(\"info@nanopay.net\");\nmessage.setReplyTo(\"noreply@nanopay.net\");\nmessage.setTo(new String[] { \"\" });\nmessage.setSubject(\"test\");\n\nmap = new java.util.HashMap();\nmap.put(\"name\", \"Mike\");\nmap.put(\"money\", \"$1,000\");\nmap.put(\"email\", \"mike@gmail.com\");\n\ntest(email.sendEmailFromTemplate(message, \"cc-template-invite/shopper\", map), \"email template test\");","output":"","notes":""})
p({"class":"foam.nanos.script.Script","id":"CC Merch1 Email","description":"","lastRun":"2017-11-27T21:57:39.558Z","server":true,"scheduled":false,"code":"email = x.get(\"email\");\nemail.setUsername(\"nanopay.email@gmail.com\");\nemail.setPassword(\"smt5s3ndr\");\n\nmessage = new foam.nanos.notification.email.EmailMessage();\nmessage.setFrom(\"info@nanopay.net\");\nmessage.setReplyTo(\"noreply@nanopay.net\");\nmessage.setTo(new String[] { \"\" });\nmessage.setSubject(\"test\");\n\nmap = new java.util.HashMap();\nmap.put(\"name\", \"Mike\");\nmap.put(\"money\", \"$1,000\");\nmap.put(\"email\", \"mike@gmail.com\");\n\ntest(email.sendEmailFromTemplate(message, \"cc-template-invite/merc1\", map), \"email template test\");","output":"",notes":""})
