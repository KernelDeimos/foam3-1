// net.nanopay.tx.QuotePlanTest
p({"class":"foam.nanos.test.Test","id":"net.nanopay.tx.QuotePlanTest","enabled":true,"description":"","lastRun":"2018-10-04T02:32:46.980Z","lastDuration":212,"server":true,"status":1,"code":"userDAO        = x.get(\"userDAO\");\naccountDAO     = x.get(\"accountDAO\");\ninstitutionDAO = x.get(\"institutionDAO\");\ntransactionDAO = x.get(\"localTransactionDAO\");\nbalanceDAO     = x.get(\"balanceDAO\");\nquoteDAO       = x.get(\"localTransactionQuotePlanDAO\");\nliquiditySettingsDAO = x.get(\"liquiditySettingsDAO\");\n\nRandom ran = new Random();\n\n//Create a Test User\nuser = new foam.nanos.auth.User();\nuser.setId(Long.valueOf(850));\nuser.setGroup(\"business\");\nuser.setOrganization(\"Balony\");\nuser.setEmailVerified(true);\nuser.setFirstName(\"test8\");\nuser.setLastName(\"TEST8\");\nuser.setEmail(\"test8@t.com\");\nuserDAO.put(user);\n\n//Create a Test User\nuser = new foam.nanos.auth.User();\nuser.setId(Long.valueOf(855));\nuser.setGroup(\"business\");\nuser.setOrganization(\"Balony\");\nuser.setEmailVerified(true);\nuser.setFirstName(\"test9\");\nuser.setLastName(\"TEST9\");\nuser.setEmail(\"test9@t.com\");\nuserDAO.put(user);\n\n//Grab Users for test\ntestDigital1        =(foam.nanos.auth.User) userDAO.find(850);\ntestDigital2        =(foam.nanos.auth.User) userDAO.find(855);\nadmin               =(foam.nanos.auth.User) userDAO.find(1350);\n\n//Grab Digital Accounts for test\nuserDigitalAccount  = net.nanopay.account.DigitalAccount.findDefault(x,admin,\"CAD\");\ntestDigitalAccount1 = net.nanopay.account.DigitalAccount.findDefault(x,testDigital1,\"CAD\");\ntestDigitalAccount2 = net.nanopay.account.DigitalAccount.findDefault(x,testDigital2,\"CAD\");\n\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(userDigitalAccount.getId());\nliquiditySettingsDAO.put(ls);\n\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(testDigitalAccount1.getId());\nliquiditySettingsDAO.put(ls);\n\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(testDigitalAccount2.getId());\nliquiditySettingsDAO.put(ls);\n\n//Create a bank account to User 1350\ncaaccount1 = new net.nanopay.bank.CABankAccount();\ncaaccount1.setAccountNumber(\"\"+(ran.nextInt(1000000)+10000));\ncaaccount1.setInstitutionNumber(\"\"+(ran.nextInt(899) + 100));\ncaaccount1.setBranchId(\"\"+(ran.nextInt(89999) + 10000));\ncaaccount1.setOwner(1350);\ncaaccount1.setName(\"\"+ran.nextInt(1000));\ncaaccount1.setStatus(net.nanopay.bank.BankAccountStatus.VERIFIED);\ncaaccount1.setDenomination(\"CAD\");\ncaaccount1.setId(1351);\ncaaccount1 = accountDAO.put(caaccount1);\n\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(caaccount1.getId());\nliquiditySettingsDAO.put(ls);\n\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(userDigitalAccount.getId());\ntransaction.setSourceAccount(caaccount1.getId());\ntransaction.setAmount(300000);\ntransaction.setStatus(net.nanopay.tx.model.TransactionStatus.COMPLETED);\n\nquote = new net.nanopay.tx.TransactionQuote.Builder(x).setRequestTransaction(transaction).build();\nquote = quoteDAO.put(quote);\ntest(quote != null, \"Quote returned\");\nprint(\"quote: \"+quote);\ntest(quote.getPlan() != null, \"Plan created and selected.\");\nplan = quote.getPlan();\nprint(\"plan: \"+plan);\ntest( ! (plan.getTransaction() instanceof net.nanopay.tx.ErrorTransaction), \"Plan does not have error.\");\ntest(plan.getTransaction() instanceof net.nanopay.tx.alterna.AlternaCITransaction, \"Plan AlternaCITransaction\");\ntransaction = transactionDAO.put(plan.getTransaction());\ntest(transaction.getStatus() == net.nanopay.tx.model.TransactionStatus.COMPLETED, \"CABankAccount/DigitalAccount -> AlternaCITransaction COMPLETED\");\n\n//Create a bank account to User 855\ncaaccount2 = new net.nanopay.bank.CABankAccount();\ncaaccount2.setAccountNumber(\"\"+(ran.nextInt(1000000)+10000));\ncaaccount2.setInstitutionNumber(\"\"+(ran.nextInt(899) + 100));\ncaaccount2.setBranchId(\"\"+(ran.nextInt(89999) + 10000));\ncaaccount2.setOwner(855);\ncaaccount2.setName(\"\"+ran.nextInt(1000));\ncaaccount2.setStatus(net.nanopay.bank.BankAccountStatus.VERIFIED);\ncaaccount2.setDenomination(\"CAD\");\ncaaccount2 = accountDAO.put(caaccount2);\n\nls = new net.nanopay.tx.model.LiquiditySettings();\nls.setEnableCashIn(false);\nls.setEnableCashOut(false);\nls.setId(caaccount2.getId());\nliquiditySettingsDAO.put(ls);\n\ntransaction = new net.nanopay.tx.model.Transaction();\ntransaction.setDestinationAccount(caaccount2.getId());\ntransaction.setSourceAccount(userDigitalAccount.getId());\ntransaction.setAmount(300);\n\nquote = new net.nanopay.tx.TransactionQuote.Builder(x).setRequestTransaction(transaction).build();\nquote = quoteDAO.put(quote);\ntest(quote != null, \"Quote returned\");\nplan = quote.getPlan();\ntest( ! (plan.getTransaction() instanceof net.nanopay.tx.ErrorTransaction), \"Plan does not have error.\");\nprint(\"plan:\" +plan);\ntest(plan.getTransaction() instanceof net.nanopay.tx.alterna.AlternaCOTransaction, \"Plan transaction AlternaCOTransaction\");\n\ntransaction = transactionDAO.put(plan.getTransaction());\n\nbalance = userDigitalAccount.findBalance(x);\ntest(balance > 0, \"digital balance > 0\");\ntransaction = new net.nanopay.tx.model.Transaction();\n//print(\"txn \"+transaction);\ntransaction.setDestinationAccount(testDigitalAccount2.getId());\ntransaction.setSourceAccount(userDigitalAccount.getId());\ntransaction.setAmount(balance);\nquote = new net.nanopay.tx.TransactionQuote.Builder(x).setRequestTransaction(transaction).build();\nprint(\"quote 3 returned\");\nquote = quoteDAO.put(quote);\nplan = quote.getPlan();\nprint(\"plan: \"+plan);\ntest(! (plan.getTransaction() instanceof net.nanopay.tx.ErrorTransaction), \"Plan does not have errors\");\ntransaction = transactionDAO.put(plan.getTransaction());\n//print(\"transaction: \"+transaction);\ntest(transaction.getStatus() == net.nanopay.tx.model.TransactionStatus.COMPLETED, \"DigitalAccount/DigitalAccount -> COMPLETED\");\n","output":"SUCCESS: Quote returned\nquote: requestTransaction: isQuoted: false, transfers: [Lnet.nanopay.tx.Transfer;@a7ba3a4, id: , created: null, createdBy: 0, lastModified: null, lastModifiedBy: 0, invoiceId: 0, status: COMPLETED, referenceNumber: , payee: null, payer: null, sourceAccount: 1351, payeeId: 0, payerId: 0, destinationAccount: 52, amount: 300000, total: 300000, processDate: null, completionDate: null, messageId: , pacs008EndToEndId: , sourceCurrency: CAD, cls: Transaction, destinationCurrency: CAD, signatures: [], children: null, parent: , plans: [Lnet.nanopay.tx.TransactionPlan;@5c15544f, plan: id: 0, expiry: null, eta: 172800000, cost: 0, transaction: confirmationLineNumber: , returnCode: , returnDate: , returnType: , referenceNumber: , padType: , txnCode: , description: , isQuoted: true, transfers: [Lnet.nanopay.tx.Transfer;@55f88ff3, id: , created: null, createdBy: 0, lastModified: null, lastModifiedBy: 0, invoiceId: 0, status: COMPLETED, payee: null, payer: null, sourceAccount: 1351, payeeId: 0, payerId: 0, destinationAccount: 52, amount: 300000, total: 300000, processDate: null, completionDate: null, messageId: , pacs008EndToEndId: , sourceCurrency: CAD, cls: Transaction, destinationCurrency: CAD, signatures: [], children: null, parent: \nSUCCESS: Plan created and selected.\nplan: id: 0, expiry: null, eta: 172800000, cost: 0, transaction: confirmationLineNumber: , returnCode: , returnDate: , returnType: , referenceNumber: , padType: , txnCode: , description: , isQuoted: true, transfers: [Lnet.nanopay.tx.Transfer;@55f88ff3, id: , created: null, createdBy: 0, lastModified: null, lastModifiedBy: 0, invoiceId: 0, status: COMPLETED, payee: null, payer: null, sourceAccount: 1351, payeeId: 0, payerId: 0, destinationAccount: 52, amount: 300000, total: 300000, processDate: null, completionDate: null, messageId: , pacs008EndToEndId: , sourceCurrency: CAD, cls: Transaction, destinationCurrency: CAD, signatures: [], children: null, parent: \nSUCCESS: Plan does not have error.\nSUCCESS: Plan AlternaCITransaction\nSUCCESS: CABankAccount/DigitalAccount -> AlternaCITransaction COMPLETED\nSUCCESS: Quote returned\nSUCCESS: Plan does not have error.\nplan:id: 0, expiry: null, eta: 172800000, cost: 0, transaction: confirmationLineNumber: , returnCode: , returnDate: , returnType: , referenceNumber: , padType: , txnCode: , description: , isQuoted: true, transfers: [Lnet.nanopay.tx.Transfer;@69b1df7f, id: , created: null, createdBy: 0, lastModified: null, lastModifiedBy: 0, invoiceId: 0, status: PENDING, payee: null, payer: null, sourceAccount: 52, payeeId: 0, payerId: 0, destinationAccount: 53, amount: 300, total: 300, processDate: null, completionDate: null, messageId: , pacs008EndToEndId: , sourceCurrency: CAD, cls: Transaction, destinationCurrency: CAD, signatures: [], children: null, parent: \nSUCCESS: Plan transaction AlternaCOTransaction\nSUCCESS: digital balance > 0\nquote 3 returned\nplan: id: 0, expiry: null, eta: 0, cost: 0, transaction: isQuoted: true, transfers: [Lnet.nanopay.tx.Transfer;@db5cc6c, id: , created: null, createdBy: 0, lastModified: null, lastModifiedBy: 0, invoiceId: 0, status: PENDING, referenceNumber: , payee: null, payer: null, sourceAccount: 52, payeeId: 0, payerId: 0, destinationAccount: 51, amount: 299700, total: 299700, processDate: null, completionDate: null, messageId: , pacs008EndToEndId: , sourceCurrency: CAD, cls: Transaction, destinationCurrency: CAD, signatures: [], children: null, parent: \nSUCCESS: Plan does not have errors\nSUCCESS: DigitalAccount/DigitalAccount -> COMPLETED\n","notes":""})
