p({
  class:"foam.nanos.cron.Cron",
  id:"AFEX Business ApprovalRequest Cron",
  description:"Auto-Approve AFEXBusiness ApprovalRequest",
  enabled:true,
  code:"""
    import net.nanopay.fx.afex.cron.AFEXBusinessApprovalRequestCron;
    cron = new AFEXBusinessApprovalRequestCron();
    cron.execute(x);
    print("done");
  """,
  schedule:{
    class:"foam.nanos.cron.CronSchedule",
    minute:-1,
    hour:-1,
    dayOfMonth:-1,
    month:-1,
    dayOfWeek:-1,
    second:37
  }
})

p({
  "class": "foam.nanos.cron.Cron",
  "id": "AFEX Funding cron",
  "description": "This cron job sets AFEXFundingTransaction to sent if funding balance exists",
  "enabled": false,
  "schedule": {
    "class": "foam.nanos.cron.CronSchedule",
    "minute": 0,
    "hour": -1,
    "dayOfMonth": -1,
    "month": -1,
    "dayOfWeek": -1,
    "second": -1
  },
  "code":
  """
  import foam.mlang.predicate.Predicate;
  import foam.core.ContextAgent;
  import foam.core.Detachable;
  import foam.core.X;
  import foam.dao.AbstractSink;
  import foam.dao.DAO;
  import net.nanopay.fx.afex.AFEXFundingTransaction;
  import net.nanopay.fx.afex.AFEXFundingBalance;
  import net.nanopay.fx.afex.AFEXServiceProvider;
  import net.nanopay.tx.model.Transaction;
  import net.nanopay.tx.TransactionEvent;
  import net.nanopay.tx.model.TransactionStatus;
  import static foam.mlang.MLang.*;

  DAO transactionDAO = (DAO) x.get("localTransactionDAO");
  AFEXServiceProvider afexService = (AFEXServiceProvider) x.get("afexServiceProvider");
  transactionDAO
    .where(
          AND(new Predicate[] {
              EQ(Transaction.STATUS, TransactionStatus.PENDING),
              INSTANCE_OF(AFEXFundingTransaction.class),
              EQ(AFEXFundingTransaction.FUNDING_BALANCE_INITIATED, true)
            })
          )
    .select( new AbstractSink() {

    public void put(Object o, Detachable d) {
      AFEXFundingTransaction txn = (AFEXFundingTransaction) o.fclone();

      AFEXFundingBalance response = afexService.getFundingBalance(x, txn.findDestinationAccount(x).getOwner(), txn.getSourceCurrency());
      txn.setAccountId(response.getAccountId());
      txn.setFundingBalanceId(response.getFundingBalanceId());
      txn.setStatus(TransactionStatus.SENT);
      txn.getTransactionEvents(x).put_(x, new TransactionEvent("Funding balance created."));
      transactionDAO.put(txn);
    }
  });
  print("done");
  """
})
p({
  "class":"foam.nanos.cron.Cron",
  "id":"AFEX Beneficiary Compliance",
  "description":"Check AFEX Beneficiary Compliance Status",
  "enabled":false,
  "schedule":{
    "class":"foam.nanos.cron.CronSchedule",
    "minute":0,
    "hour":-1,
    "dayOfMonth":-1,
    "month":-1,
    "dayOfWeek":-1,
    "second":45
  },
  "code":"""
    import net.nanopay.fx.afex.cron.AFEXBeneficiaryStatusCron;
    print("running AFEXBeneficiaryStatusCron");
    cron = new AFEXBeneficiaryStatusCron();
    cron.execute(x);
    print("done");
  """
})

p({
  "class":"foam.nanos.cron.Cron",
  "id":"AFEX Check Payment Status",
  "description":"Check AFEX Payment Status",
  "enabled":false,
  "schedule":{
    "class":"foam.nanos.cron.CronSchedule",
    "minute":0,
    "hour":-1,
    "dayOfMonth":-1,
    "month":-1,
    "dayOfWeek":-1,
    "second":23
  },
  "code":"""
    import net.nanopay.fx.afex.cron.AFEXPaymentStatusCron;
    cron = new AFEXPaymentStatusCron();
    cron.execute(x);
    print("done");
  """
})

p({
  "class":"foam.nanos.cron.Cron",
  "id":"AFEX Check Business Compliance Status",
  "description":"Check AFEX Business Compliance Status",
  "enabled":false,
  "schedule":{
    "class":"foam.nanos.cron.CronSchedule",
    "minute":0,
    "hour":0,
    "dayOfMonth":-1,
    "month":-1,
    "dayOfWeek":-1,
    "second":0
  },
  "code":"""
    import net.nanopay.fx.afex.cron.AFEXBusinessComplianceStatusCron;
    cron = new AFEXBusinessComplianceStatusCron();
    cron.execute(x);
    print("done");
  """
})
