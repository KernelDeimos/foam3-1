p({"class":"foam.nanos.boot.NSpec", "name":"localTransactionDAO",              "lazy":false,  "serve":false, "serviceScript":"import net.nanopay.tx.CheckQuotedTransactionDAO; import net.nanopay.tx.model.Transaction; import foam.dao.MDAO; import foam.dao.DAO; import net.nanopay.tx.stripe.StripeTransactionDAO;  import net.nanopay.tx.SendEmailNotificationTransactionDAO; import net.nanopay.tx.DuplicateTransactionCheckDAO;import net.nanopay.tx.UpdateInvoiceTransactionDAO; import net.nanopay.tx.realex.RealexTransactionDAO; import net.nanopay.tx.TransactionDAO; import net.nanopay.security.HashingJDAO; import net.nanopay.tx.LiquidityDAO; import net.nanopay.security.RandomNonceDAO;  import net.nanopay.fx.ascendantfx.AscendantFXTransactionDAO; MDAO transactionMDao = new MDAO(Transaction.getOwnClassInfo()); transactionMDao.addIndex(new foam.core.PropertyInfo[] {Transaction.STATUS, Transaction.SOURCE_ACCOUNT,Transaction.DESTINATION_ACCOUNT});  TransactionDAO aa = new TransactionDAO(x, transactionMDao); HashingJDAO a = new HashingJDAO(x, \"SHA-256\", true, aa, \"transactions\"); foam.dao.DAO ctx = new foam.dao.ContextualizingDAO.Builder(x).setDelegate(a).build(); foam.dao.ProxyDAO aware = new foam.nanos.auth.CreatedAwareDAO.Builder(x).setDelegate(new foam.nanos.auth.CreatedByAwareDAO.Builder(x).setDelegate(new foam.nanos.auth.LastModifiedAwareDAO.Builder(x).setDelegate(new foam.nanos.auth.LastModifiedByAwareDAO.Builder(x).setDelegate(new RandomNonceDAO(ctx)).build()).build()).build()).build();AscendantFXTransactionDAO ascendant = new net.nanopay.fx.ascendantfx.AscendantFXTransactionDAO(x,aware); SendEmailNotificationTransactionDAO b = new SendEmailNotificationTransactionDAO.Builder(x).setDelegate(ascendant).build(); DuplicateTransactionCheckDAO c = new DuplicateTransactionCheckDAO(x, b); UpdateInvoiceTransactionDAO e = new UpdateInvoiceTransactionDAO(x, c);  LiquidityDAO m = new LiquidityDAO(x, e); DAO valid = new foam.dao.ValidatingDAO(x, m); DAO saved = new net.nanopay.tx.SaveChainedTransactionDAO(x, valid); DAO isQuoted = new CheckQuotedTransactionDAO(x, saved); RealexTransactionDAO real = new net.nanopay.tx.realex.RealexTransactionDAO(x, isQuoted);  DAO stripe = new StripeTransactionDAO(x, real); return new foam.dao.PMDAO(x, stripe);"})
p({"class":"foam.nanos.boot.NSpec", "name":"transactionDAO",                   "lazy":true,  "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new net.nanopay.tx.AuthenticatedTransactionDAO(x, new net.nanopay.tx.TransactionEntitiesDAO(x, ((foam.dao.DAO) x.get(\"localTransactionDAO\")).orderBy(new foam.mlang.order.Desc(net.nanopay.tx.model.Transaction.CREATED)))));","client":"{\"of\":\"net.nanopay.tx.model.Transaction\", \"remoteListenerSupport\": false}"})
p({"class":"foam.nanos.boot.NSpec", "name":"localTransactionQuotePlanDAO",          "lazy":true,  "serve":false, "serviceScript":"return new net.nanopay.tx.PayerTransactionDAO.Builder(x).setDelegate(new net.nanopay.tx.PayeeTransactionDAO.Builder(x).setDelegate(new foam.dao.ValidatingDAO(x, new net.nanopay.tx.RetailTransactionPlanDAO(x, new net.nanopay.tx.DigitalTransactionPlanDAO(x, new net.nanopay.tx.TransactionQuoteDAO.Builder(x).setDelegate(new net.nanopay.tx.NanopayFXTransactionPlanDAO.Builder(x).setDelegate(new net.nanopay.fx.ascendantfx.AscendantFXTransactionPlanDAO.Builder(x).setDelegate(new net.nanopay.tx.alterna.AlternaTransactionPlanDAO.Builder(x).setDelegate(new net.nanopay.tx.NanopayTransactionFeeDAO.Builder(x).setDelegate(new net.nanopay.tx.KotakTransactionPlanDAO.Builder(x).setDelegate(new net.nanopay.tx.SplitTransactionPlanDAO.Builder(x).setDelegate(new foam.dao.NullDAO()).build()).build()).build()).build()).build()).build()).build())), new net.nanopay.tx.RequestTransactionValidator())).build()).build();"})
p({"class":"foam.nanos.boot.NSpec", "name":"transactionQuotePlanDAO",          "lazy":true,  "serve":true,  "serviceScript":"return x.get(\"localTransactionQuotePlanDAO\");","client":"{\"of\":\"net.nanopay.tx.TransactionQuote\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"liquidityService",                 "lazy":true,  "serve":false, "serviceScript":"return new net.nanopay.tx.model.LiquidityService();"})
p({"class":"foam.nanos.boot.NSpec", "name":"transactionPurposeDAO",            "lazy":true,  "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.AuthenticatedDAO(\"transactionPurpose\", new foam.dao.java.JDAO(x, net.nanopay.tx.TransactionPurpose.getOwnClassInfo(), \"transactionPurposes\")));", "client":"{\"of\":\"net.nanopay.tx.TransactionPurpose\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"transactionLimitDAO",              "lazy":true,  "serve":true,  "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.java.JDAO(x, net.nanopay.tx.model.TransactionLimit.getOwnClassInfo(), \"transactionLimits\"));", "client":"{\"of\":\"net.nanopay.tx.model.TransactionLimit\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"userTransactionLimit",             "lazy":true,  "serve":true,  "boxClass":"net.nanopay.tx.UserTransactionLimitSkeleton", "serviceClass":"net.nanopay.tx.UserTransactionLimitService","client":"{ \"class\":\"net.nanopay.tx.client.ClientUserTransactionLimitService\", \"delegate\": { \"class\":\"foam.box.HTTPBox\", \"url\":\"service/userTransactionLimit\" } }"})
p({"class":"foam.nanos.boot.NSpec", "name":"pacsMsg",                          "lazy":true,  "serve":false, "parameters":true, "serviceScript":"return new net.nanopay.tx.PacsWebAgent()"})
p({"class":"foam.nanos.boot.NSpec", "name":"transactionFeesDAO",                 "lazy":true,  "serve":false, "serviceScript":"return new foam.dao.PMDAO(x, new foam.dao.java.JDAO(x, net.nanopay.tx.model.TransactionFee.getOwnClassInfo(), \"transactionfees\"));"})
