p({
  "class":"foam.nanos.ruler.Rule",
  "id":"afex-crunch-onboarding-rule1",
  "name":"Onboard Business to AFEX",
  "documentation":"Rule to onboard business to AFEX if it has passed comliance and has a verified bank account.",
  "priority":1,
  "ruleGroup":"AFEXCrunchOnboarding",
  "daoKey":"userCapabilityJunctionDAO",
  "operation":3,
  "after":true,
  "predicate": {
    "class": "foam.mlang.predicate.And",
    "args": [
      {
        "class": "net.nanopay.crunch.compliance.IsCapabilityOfCertainCategoryAndStatus",
        "status": 1,
        "statusChanged": false,
        "category": "AFEXOnboarding"
      },
      {
        "class": "net.nanopay.partner.afex.crunch.BusinessHasVerifiedBankAccount"
      }
    ]
  },
  "asyncAction":{ "class":"net.nanopay.partner.afex.crunch.AFEXBusinessOnboardingRule"},
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})


p({
  "class":"foam.nanos.ruler.Rule",
  "id":"afex-crunch-onboarding-rule-2",
  "name":"Onboard Business Bank Account Owner to AFEX",
  "documentation":"Rule to onboard bank account owner to AFEX if it is a business and has afex onboarding capability.",
  "priority":100,
  "ruleGroup":"AFEXCrunchOnboarding",
  "daoKey":"localAccountDAO",
  "operation":3,
  "after":true,
  "predicate": {
    "class": "foam.mlang.predicate.And",
    "args": [
      {
        "class": "net.nanopay.meter.compliance.ruler.predicate.BankAccountVerified"
      },
      {
        "class": "net.nanopay.partner.afex.crunch.BankAccountOwnerIsBusiness"
      }
    ]
  },
  "asyncAction":{
    "class":"net.nanopay.fx.afex.AFEXBankOnboardingRule"
  },
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})
