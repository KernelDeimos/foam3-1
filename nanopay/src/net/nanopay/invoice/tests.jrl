p({"class":"net.nanopay.invoice.AuthenticatedInvoiceDAOTest","id":"AuthenticatedInvoiceDAOTest"})
p({"class":"foam.nanos.test.Test","id":"Approval tests","description":"Tests for the simple approval scheme","code":"import foam.dao.*;\nimport foam.nanos.auth.User;\nimport foam.util.Auth;\n\nimport net.nanopay.account.Account;\nimport net.nanopay.bank.BankAccountStatus;\nimport net.nanopay.bank.CABankAccount;\nimport net.nanopay.invoice.model.Invoice;\nimport net.nanopay.invoice.model.InvoiceStatus;\nimport net.nanopay.invoice.model.PaymentStatus;\nimport net.nanopay.tx.model.Transaction;\n\naccountDAO = (DAO) x.get(\"accountDAO\");\nbareUserDAO = (DAO) x.get(\"bareUserDAO\");\ninvoiceDAO = (DAO) x.get(\"invoiceDAO\");\ntransactionDAO = (DAO) x.get(\"transactionDAO\");\n\n////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////// SETUP ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////\n\n\nbareUserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, \"employee1@example.com\")).removeAll();\nemployee1 = new User();\nemployee1.setEmail(\"employee1@example.com\");\nemployee1.setGroup(\"smeBusinessEmployee\");\nemployee1.setEmailVerified(true); // Required to send or receive money.\nemployee1 = bareUserDAO.put(employee1);\nemployee1Context = Auth.sudo(x, employee1);\n\n\naccountDAO.where(foam.mlang.MLang.EQ(Account.NAME, \"Approval Tests employee 1 test account\")).removeAll();\nemployee1BankAccount = new CABankAccount();\nemployee1BankAccount.setName(\"Approval Tests employee 1 test account\");\nemployee1BankAccount.setDenomination(\"CAD\");\nemployee1BankAccount.setAccountNumber(\"12345678\");\nemployee1BankAccount.setInstitution(1);\nemployee1BankAccount.setBranchId(\"12345\");\nemployee1BankAccount.setStatus(BankAccountStatus.VERIFIED);\nemployee1BankAccount = employee1.getAccounts(employee1Context).put(employee1BankAccount);\n\n\nbareUserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, \"employee2@example.com\")).removeAll();\nemployee2 = new User();\nemployee2.setEmail(\"employee2@example.com\");\nemployee2.setGroup(\"smeBusinessEmployee\");\nemployee2.setEmailVerified(true); // Required to send or receive money.\nemployee2 = bareUserDAO.put(employee2);\nemployee2Context = Auth.sudo(x, employee2);\n\n\nbareUserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, \"approver@example.com\")).removeAll();\napprover = new User();\napprover.setEmail(\"approver@example.com\");\napprover.setGroup(\"smeBusinessApprover\");\napprover.setEmailVerified(true); // Required to send or receive money.\napprover = bareUserDAO.put(approver);\napproverContext = Auth.sudo(x, approver);\n\n\naccountDAO.where(foam.mlang.MLang.EQ(Account.NAME, \"Approval Tests approver test account\")).removeAll();\napproverBankAccount = new CABankAccount();\napproverBankAccount.setName(\"Approval Tests approver test account\");\napproverBankAccount.setDenomination(\"CAD\");\napproverBankAccount.setAccountNumber(\"87654321\");\napproverBankAccount.setInstitution(1);\napproverBankAccount.setBranchId(\"12345\");\napproverBankAccount.setStatus(BankAccountStatus.VERIFIED);\napproverBankAccount = approver.getAccounts(approverContext).put(approverBankAccount);\n\n\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////// TEST CODE ///////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n\n\ninvoice = new Invoice();\ninvoice.setAmount(1);\ninvoice.setPayerId(employee1.getId());\ninvoice.setPayeeId(employee2.getId());\ninvoice.setDestinationCurrency(\"CAD\");\ninvoice.setAccount(employee1BankAccount.getId());\ninvoice = invoiceDAO.inX(employee1Context).put(invoice);\ninvoiceStatusIsCorrect = invoice.getStatus() == InvoiceStatus.PENDING_APPROVAL;\npaymentStatusIsCorrect = invoice.getPaymentMethod() == PaymentStatus.PENDING_APPROVAL;\nif ( ! invoiceStatusIsCorrect ) {\n  print(\"DEBUG: Invoice status is \" + invoice.getStatus());\n}\nif ( ! paymentStatusIsCorrect ) {\n  print(\"DEBUG: Payment status is \" + invoice.getPaymentMethod());\n}\ntest(invoiceStatusIsCorrect && paymentStatusIsCorrect, \"When an employee creates an invoice, the invoice status and payment status are both PENDING_APPROVAL.\");\n\n\ntransaction = new Transaction();\ntransaction.setSourceAccount(invoice.getAccount());\ntransaction.setDestinationAccount(invoice.getDestinationAccount());\ntransaction.setPayerId(invoice.getPayerId());\ntransaction.setPayeeId(invoice.getPayeeId());\ntransaction.setAmount(invoice.getAmount());\ntransaction.setInvoiceId(invoice.getId());\nthrew = false;\nmessage = \"\";\ntry {\n  transactionDAO.inX(employee1Context).put(transaction);\n} catch (Throwable t) {\n  threw = true;\n  message = t.getMessage();\n}\ntest(threw && message.equals(\"You do not have permission to pay this invoice.\"), \"When an employee tries to pay an invoice, they get a descriptive error message.\");\n\n\ninvoice = new Invoice();\ninvoice.setAmount(1);\ninvoice.setPayerId(approver.getId());\ninvoice.setPayeeId(employee2.getId());\ninvoice.setDestinationCurrency(\"CAD\");\ninvoice.setAccount(approverBankAccount.getId());\ninvoice = invoiceDAO.inX(approverContext).put(invoice);\ntest(invoice.getStatus() == InvoiceStatus.UNPAID && invoice.getPaymentMethod() == PaymentStatus.NONE, \"When an approver creates an invoice, the invoice status is UNPAID and the payment status is NONE.\");\n\n\ntransaction = new Transaction();\ntransaction.setSourceAccount(invoice.getAccount());\ntransaction.setDestinationAccount(invoice.getDestinationAccount());\ntransaction.setPayerId(invoice.getPayerId());\ntransaction.setPayeeId(invoice.getPayeeId());\ntransaction.setAmount(invoice.getAmount());\ntransaction.setInvoiceId(invoice.getId());\nthrew = false;\nmessage = \"\";\ntry {\n  transactionDAO.inX(approverContext).put(transaction);\n} catch (Throwable t) {\n  threw = true;\n  message = t.getMessage();\n  print(\"DEBUG: \" + message);\n}\ntest(! threw, \"When an approver tries to pay an invoice, it works as expected.\");\n"})
