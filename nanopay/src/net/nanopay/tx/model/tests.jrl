p({"class":"net.nanopay.tx.model.TransactionParseTest","id":"Transaction parsing test","description":"Tests parsing transaction strings"})
p({"class":"foam.nanos.test.Test","id":"Business compliancy transaction test","description":"Tests creating transactions as business user to check compliancy status.","code":"// Create business user.\nx.get(\"bareUserDAO\").where(foam.mlang.MLang.EQ(foam.nanos.auth.User.EMAIL, \"businesscheckcompliance1337@nanopay.net\")).removeAll();\nuser = new net.nanopay.model.Business();\nuser.setEmail(\"businesscheckcompliance1337@nanopay.net\");\nuser.setEmailVerified(true);\nuser.setBusinessName(\"testBusinessName\");\nuser.setCompliance(net.nanopay.admin.model.ComplianceStatus.REQUESTED);\n\nuserDAO = x.get(\"bareUserDAO\");\nuser = userDAO.put_(x, user);\nuser = user.fclone();\n\ntxn = new net.nanopay.tx.model.Transaction();\ntxn.setPayerId(user.getId());\ntxn.setPayeeId(1);\ntxn.setAmount(100);\n\nthrew = false;\nmessage = \"\";\ntry {\ntxn = x.get(\"localTransactionDAO\").put_(x, txn);\n} catch (RuntimeException e){\nmessage = e.getMessage();\nthrew = true;\n}\ntest( threw && message.equals(\"Unable to find a plan for requested transaction.\"), \"Unable to put if business user hasn't passed compliance.\");\n\nuser.setCompliance(net.nanopay.admin.model.ComplianceStatus.PASSED);\nuser = userDAO.put_(x, user);\nuser = user.fclone();\n\nthrew = false;\nmessage = \"\";\ntry {\ntxn = x.get(\"localTransactionDAO\").put_(x, txn);\n} catch (RuntimeException e){\nmessage = e.getMessage();\nthrew = true;\n}\n\ntest( threw && ! message.equals(\"Sender needs to pass business compliance.\"), \"Able to put if business user has passed compliance.\");\n\nuserDAO.remove_(x, user);\nuserDAO.where(foam.mlang.MLang.EQ(foam.nanos.auth.User.EMAIL, \"businesscheckcompliance1337@nanopay.net\")).removeAll();"})
