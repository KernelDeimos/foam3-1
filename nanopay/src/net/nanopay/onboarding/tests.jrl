p({"class":"foam.nanos.test.Test","id":"Create Business & Permission Test","code":"// Create Business Tests\n// Tests the functionality around creating a business\n\nimport foam.nanos.auth.User;\nimport foam.nanos.auth.Permission;\nimport foam.nanos.auth.AuthService;\nimport foam.dao.DAO;\nimport foam.nanos.auth.Group;\nimport net.nanopay.model.Business;\nimport foam.mlang.predicate.ContainsIC;\nimport foam.mlang.Constant;\nimport foam.util.SafetyUtil;\nimport foam.nanos.auth.UserUserJunction;\n\nbusinessDAO = (DAO) x.get(\"businessDAO\");\nuserDAO = (DAO) x.get(\"userDAO\");\ngroupDAO = (DAO) x.get(\"groupDAO\");\nauth = (AuthService) x.get(\"auth\");\nuser = (User) x.get(\"user\");\n\ntry {\n\n// Remove the test user if it exists.\nuserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, \"foo@example.com\")).removeAll();\n\ntoPut = new Business();\n\ntry {\nbusinessDAO.put(toPut);\ntest(false, \"Business name is required.\");\n} catch (IllegalStateException e) {\ntest(e.getMessage().equals(\"Business name cannot be empty.\"), \"Business name is required.\");\n} catch (Throwable t) {\nt.printStackTrace();\ntest(false, \"\");\n}\n\ntoPut.setBusinessName(\"FooBar Corporation\");\ngroupDAO.select();\n// Clean up existing data to make sure the tests are run in a known state.\nbusinessDAO.where(foam.mlang.MLang.EQ(Business.BUSINESS_NAME, \"FooBar Corporation\")).removeAll();\ngroupPredicate = new ContainsIC();\ngroupPredicate.setArg1(Group.ID);\ngroupPredicate.setArg2(new Constant(\"foobarcorporation\"));\ngroupDAO.where(groupPredicate).removeAll();\n\nbusiness = (Business) businessDAO.put_(x, toPut);\n\ntest(business != null, \"Putting a user to businessDAO creates a new Business.\");\n\nbusinessPermissionId = \"foobarcorporation\" + Long.toString(business.getId());\nadminGroupName = businessPermissionId + \".admin\";\nadminGroup = (Group) groupDAO.find(adminGroupName);\n\ntest(adminGroup != null, \"When creating a business, 3 groups are also created that are copied from the 3 template groups.\");\n\ntemplateAdminGroup = (Group) groupDAO.find(\"smeBusinessAdmin\");\nPermission[] templatePermissions = templateAdminGroup.getPermissions();\n\nfor ( int i = 0; i < templatePermissions.length; i++ ) {\nPermission templatePermission = templatePermissions[i];\nPermission newPermission = new Permission(templatePermission.getId().replaceAll(\".id.\", \".\" + businessPermissionId + \".\"), templatePermission.getDescription());\ntest(SafetyUtil.equals(newPermission, adminGroup.getPermissions()[i]), \"The template permission '\" + templatePermission.getId() + \"' was correctly translated to '\" + newPermission.getId() + \"' and put on the business's admin group.\");\n}\n\nhasAddBusinessPermission = false;\nhasGroupUpdatePermission = false;\naddBusinessPermission = \"business.add.\" + businessPermissionId + \".*\";\nupdateGroupPermission = \"group.update.\" + businessPermissionId + \".*\";\n\nfor (Permission permission: adminGroup.getPermissions()) {\nif (SafetyUtil.equals(permission.getId(), addBusinessPermission)) {\nhasAddBusinessPermission = true;\n} else if (SafetyUtil.equals(permission.getId(), updateGroupPermission)) {\nhasGroupUpdatePermission = true;\n}\n}\n\ntest(hasAddBusinessPermission, \"Company admin group has permission to add other users to business.\");\ntest(hasGroupUpdatePermission, \"Company admin group has permission to update the groups associated with the business.\");\n\nbusinessGroups = business.getGroups(x).select().getArray();\ntest(businessGroups.size() == 3, \"There is a relationship between the business and the groups for it.\");\n\nbusinesses = user.getEntities(x).getJunctionDAO().where(foam.mlang.MLang.EQ(UserUserJunction.TARGET_ID, business.getId())).select().getArray();\ntest(businesses.size() == 1, \"When the business and user are created, create a relationship between the user and the business.\");\nbGroup = ((UserUserJunction) businesses.get(0)).getGroup();\ntest(bGroup.equals(businessPermissionId + \".admin\"), \"User who created the group was put into the admin group for that business (on the junction, not their actual group).\");\n\n} catch (Throwable t) {\nt.printStackTrace();\ntest(false, \"An unexpected error was thrown.\");\n} finally {\n// Clean up.\n\nuserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, \"foo@example.com\")).removeAll();\n\nbusinessDAO.where(foam.mlang.MLang.EQ(Business.BUSINESS_NAME, \"FooBar Corporation\")).removeAll();\n\ngroupPredicate = new ContainsIC();\ngroupPredicate.setArg1(Group.ID);\ngroupPredicate.setArg2(new Constant(\"foobarcorporation\"));\ngroupDAO.where(groupPredicate).removeAll();\n}"})
