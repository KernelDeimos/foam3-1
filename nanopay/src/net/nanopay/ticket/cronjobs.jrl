p({
  "class": "foam.nanos.cron.Cron",
  "schedule": {
    "class": "foam.nanos.cron.CronSchedule",
    "minute": 1,
    "hour": -1,
    "dayOfMonth": -1,
    "month": -1,
    "dayOfWeek": -1,
    "second": 0
  },
  "id": "ClosedExpiredSudoTickets",
  "description": "Closed expired Sudo tickets to revert priviledges.",
  "code":
  """
import foam.mlang.MLang;
import foam.nanos.ticket.Ticket;
import foam.nanos.ticket.TicketStatus;

now = System.currentTimeMillis();
d = x.get("localTicketDAO");
a = d.where(MLang.EQ(Ticket.STATUS, "OPEN")).select().array;
for ( t : a ) {
  if ( t.getExpiry().getTime() < now ) {
    t = t.fclone();
    t.setStatus("CLOSED");
    t = d.put(t);
    print("Closed expired ticket: "+t.getId());
  }
}
  """
})

p({
  "class": "foam.nanos.cron.Cron",
  "schedule": {
    "class": "foam.nanos.cron.CronSchedule",
    "minute": 35,
    "hour": -1,
    "dayOfMonth": -1,
    "month": -1,
    "dayOfWeek": -1,
    "second": 0
  },
  "id": "UpdateWaitingRefundTickets",
  "description": "Check all waiting tickets and update if their related transaction has been updated.",
  "code":
  """
    import foam.mlang.MLang;
    import net.nanopay.ticket.RefundTicket;
    import net.nanopay.ticket.RefundStatus;
    import net.nanopay.tx.model.TransactionStatus;

    dao = x.get("refundTicketDAO");
    txnDAO = x.get("localTransactionDAO");
    tickets = dao.where(MLang.EQ(RefundTicket.REFUND_STATUS, RefundStatus.WAITING)).select().array;
    for ( t : tickets ) {
      txn = txnDAO.find(t.getProblemTransaction());
      if ( txn.getStatus() != TransactionStatus.SENT ) {
        t = t.fclone();
        t.clearPostApprovalRuleId();
        t.clearFeeLineItemsSelected();
        t.clearSelectedFeeLineItemsIsValid();
        t.clearWaiveCharges();
        t.setRefundStatus(RefundStatus.AVAILABLE);
        dao.put(t);
      }
    }
  """
})

p({
  "class": "foam.nanos.cron.Cron",
  "schedule": {
    "class": "foam.nanos.cron.CronSchedule",
    "minute": 35,
    "hour": -1,
    "dayOfMonth": -1,
    "month": -1,
    "dayOfWeek": -1,
    "second": 0
  },
  "id": "autoRefundAfterTimeout",
  "description": "Automatically refund tickets that have passed the retry timeout window.",
  "code":
  """
    import net.nanopay.ticket.AutoTimeoutRefundCron;
    AutoTimeoutRefundCron cron = new AutoTimeoutRefundCron();
    cron.execute(x);
    print("done");
  """
})

