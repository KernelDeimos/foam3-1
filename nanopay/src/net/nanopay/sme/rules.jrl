p({
    "class":"foam.nanos.ruler.Rule",
    "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d66","name":"Send notification to payment group when a user sign up",
    "priority":100,
    "ruleGroup":"smeBusinessRegistration",
    "documentation":"Send notification and email to Payment Operation when a new bussiness is onboarding",
    "daoKey":"smeBusinessRegistrationDAO",
    "operation":0,
    "after":true,
    "action":{
        "class":"net.nanopay.sme.ruler.OnboardingPaymentOperationNotification"
    },
    "enabled":true,
    "saveHistory":true,
    "lifecycleState":1
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0c-c718-98f8-0841-75e97a3ad16d67","name": "Send business compliance passed email",
  "priority": 100,
  "ruleGroup": "smeBusinessCompliance",
  "documentation": "Send business compliance passed email to signing officer",
  "daoKey": "localUserDAO",
  "operation": 3,
  "after": true,
  "predicate": {
    "class":"foam.mlang.predicate.And",
    "args":[
      {
        "class":"foam.nanos.ruler.predicate.IsInstancePredicate",
        "of":"net.nanopay.model.Business"
      },
      {
        "class":"net.nanopay.crunch.predicate.CheckUserCountry",
        "user":{"class":"foam.mlang.ContextObject","key":"NEW"},
        "country":"CA"
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"compliance",
        "propValue":{"class": "net.nanopay.admin.model.ComplianceStatus", "ordinal":2}
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyNEQValue",
        "propName":"compliance",
        "propValue":{"class": "net.nanopay.admin.model.ComplianceStatus", "ordinal":2},
        "isNew": false
      }
    ]
  },
  "action": {
    "class": "net.nanopay.sme.ruler.BusinessCompliancePassedEmailRule"
  },
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Check username availability",
  "priority": 100,
  "ruleGroup": "smeBusinessCompliance",
  "documentation": "Check if username is not being used by an existing user
  in the system.",
  "daoKey": "localUserDAO",
  "operation": 0,
  "after": false,
  "predicate": {
    "class":"foam.mlang.predicate.And",
    "args":[
      {
        "class":"foam.nanos.ruler.predicate.IsInstancePredicate",
        "of":"foam.nanos.auth.User"
      },
      {
        "class":"foam.mlang.predicate.Has",
        "arg1":{
          "class":"foam.mlang.expr.Dot",
          "arg1":{
            "class":"foam.mlang.ContextObject",
            "key":"NEW"
          },
          "arg2":{
            "class":"__Property__",
            "forClass_":"foam.nanos.auth.User",
            "name":"userName"
          }
        }
      }
    ]
  },
  "action": {
    "class": "net.nanopay.sme.ruler.CheckUserNameAvailabilityRule"
  },
  "enabled":false,
  "saveHistory":true,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0f-f719-98f8-0841-75e97a3ad16d67",
  "name": "remove an invitation and its associated token",
  "priority": 100,
  "ruleGroup":"businessInvitations",
  "documentation": "Remove an invitation and its associated token",
  "daoKey": "businessInvitationDAO",
  "operation": 2,
  "after": false,
  "action": {
    "class": "net.nanopay.sme.ruler.BusinessInvitationAndTokenCancelRule"
  },
  "enabled":true,
  "saveHistory":true,
  "lifecycleState":1
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0f-f719-98f8-0841-75e97a3ad16d68",
  "name": "Invitation anti spam check",
  "priority": 100,
  "ruleGroup":"invitationAntiSpamCheck",
  "documentation": "Invitation anti spam check",
  "daoKey": "invitationDAO",
  "operation": 0,
  "after": false,
  "action": {
    "class": "net.nanopay.sme.ruler.InvitationAntiSpamCheckRule"
  },
  "enabled":true,
  "saveHistory":true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"68afcf0f-f719-98f8-0841-75e97a3ad16d69",
  "name": "Send notifications when access control change on user management",
  "priority": 100,
  "ruleGroup": "accessControlChange",
  "documentation": "Send notifications when access control change on user management",
  "daoKey": "agentJunctionDAO",
  "operation": 1,
  "action": {
    "class": "net.nanopay.sme.ruler.AccessControlChangeNotificationRule"
  },
  "predicate": {
    "class": "foam.mlang.predicate.And",
    "args":[
      {
        "class":"foam.nanos.ruler.predicate.PropertyChangePredicate",
        "propName":"group",
      }
    ]
  },
  "enabled":true,
  "after":true,
  "saveHistory":true,
  "lifecycleState":1
})
