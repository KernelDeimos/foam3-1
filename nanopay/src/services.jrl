p({
  "class": "foam.nanos.boot.NSpec",
  "name": "agentAuth",
  "description": "Allows one user to act on behalf of another user.",
  "documentation":
  """
    This service can be used by one user to act as another user. We refer to the user acting as the other user as the agent,
    and the user being acted as the entity. When one user acts as another, both the agent's session and context are updated
    to keep track of both the agent and the entity. In doing so, the application is able to use this extra information to
    provide additional or alternative behaviour. For example, a user acting as another user might have additional permissions.
    This feature was created to allow users to act as businesses, so one user can be in many businesses.
  """,
  "serviceScript":
  """
    return new net.nanopay.auth.BusinessAgentAuthService.Builder(x)
      .setDelegate(new foam.nanos.auth.AgentUserAuthService(x))
      .build();
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "auth",
  "serve": true,
  "authenticate": false,
  "boxClass": "foam.nanos.auth.AuthServiceSkeleton",
  "serviceScript": """
    auth = new net.nanopay.auth.NanopayUserAndGroupAuthService(x);
    auth  = new foam.nanos.auth.CapabilityAuthService.Builder(x).setDelegate(auth).build();
    auth = new net.nanopay.meter.compliance.ComplianceAuthService.Builder(x).setDelegate(auth).build();
    auth = new foam.nanos.auth.CachingAuthService(auth, new String[]{ "signingOfficerJunctionDAO", "blacklistDAO" });
    auth = new foam.nanos.auth.EnabledCheckAuthService.Builder(x).setDelegate(auth).build();
    auth = new foam.nanos.auth.PasswordExpiryAuthService.Builder(x).setDelegate(auth).build();
    auth = new net.nanopay.security.auth.LoginAttemptAuthService.Builder(x).setDelegate(auth).build();
    auth = new net.nanopay.security.auth.IPLoggingAuthService.Builder(x).setDelegate(auth).build();
    auth = new foam.nanos.auth.twofactor.TwoFactorAuthService.Builder(x).setDelegate(auth).build();
    auth = new foam.nanos.auth.SystemAuthService.Builder(x).setDelegate(auth).build();
    return auth;
  """,
  "client": """
    {
      "class": "foam.nanos.auth.CachedAuthServiceProxy",
      "delegate": {
        "class": "foam.nanos.auth.ClientLoginAuthService"
      }
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "http",
  "lazy": false,
  "service": {
    "class": "foam.nanos.jetty.HttpServer",
    "port": 8080,
    "forwardedForProxyWhitelist": [],
    "welcomeFiles": ["welcome"],
    "hostDomains": ["ablii", "localhost", "merchantpos"],
    "servletMappings": [{
      "class": "foam.nanos.servlet.ServletMapping",
      "servletObject": {
        "class": "foam.nanos.servlet.VirtualHostRoutingServlet",
        "customHostMapping": {
          "merchantpos": "/nanopay/src/net/nanopay/merchant/index.html"
        },
        "defaultHost": "localhost"
      },
      "pathSpec": "/welcome"
    }, {
      "class": "foam.nanos.servlet.ServletMapping",
      "className": "foam.nanos.http.NanoRouter",
      "pathSpec": "/service/*"
    }, {
      "class": "foam.nanos.servlet.ServletMapping",
      "className": "foam.nanos.servlet.ImageServlet",
      "pathSpec": "/images/*",
      "initParameters": {
        "paths": "images:merchant/src/net/nanopay/merchant/images:nanopay/src/net/nanopay/images:foam2/src/foam/support/images:foam2/src/foam/u2/images"
      }
    }, {
      "class": "foam.nanos.servlet.ServletMapping",
      "className": "org.eclipse.jetty.servlet.DefaultServlet",
      "pathSpec": "/*",
      "initParameters": {
        "pathInfoOnly": "true",
        "welcomeServlets": "true",
        "dirAllowed": "false"
      }
    }],
    "errorMappings": [{
      "class": "foam.nanos.servlet.ErrorPageMapping",
      "errorCode": 404,
      "location": "/nanopay/src/net/nanopay/ui/errorPage/errorPage.html"
    }, {
      "class": "foam.nanos.servlet.ErrorPageMapping",
      "exceptionType": "javax.ws.rs.NotAuthorizedException",
      "location": "/nanopay/src/net/nanopay/ui/unauthorizedAccess/unauthorizedAccess.html"
    }, {
      "class": "foam.nanos.servlet.ErrorPageMapping",
      "exceptionType": "java.lang.Throwable",
      "location": "/nanopay/src/net/nanopay/ui/errorPage/errorPage.html"
    }],
    "filterMappings": [{
      "class": "foam.nanos.servlet.FilterMapping",
      "filterClass": "net.nanopay.security.csp.CSPFilter",
      "pathSpec": "/*",
      "initParameters": {
        "CONTENT_SECURITY_POLICY": """
          default-src 'none';
          child-src 'self' https://cdn.plaid.com/link/ nanopay.net nanopay.net data: chrome-extension-resource:;
          connect-src 'self' data: blob: filesystem: ws: http://localhost:*/service/;
          font-src 'self' https://fonts.gstatic.com data: chrome-extension-resource:;
          frame-src 'self' data: blob: filesystem:;
          img-src 'self' data: blob: filesystem:;
          manifest-src 'self';
          media-src * data: blob: filesystem:;
          object-src 'self' data: blob: filesystem:;
          prefetch-src 'self' https://cdn.plaid.com/link/;
          report-uri /service/CSPReportWebAgent;
          script-src 'self' https://cdn.plaid.com/link/v2/stable/link-initialize.js 'unsafe-eval' 'sha256-HY1JzEwuxkis4xx0ggY23gbYY/MCEAE1T6+OQnWS2vA=' 'sha256-NiNrLgJ8wbIXIi5saiR3XTd1Mxm4k0nju66GJsw4b9U=' 'sha256-FLYDXBkz4oo/H5jEfYXqAGYUwERY44OO1yznaMCdMiU=' 'sha256-G3UfiJBy6rwOk3glkBQuQDFA7IoCtiOT56gTh+IfNF0=';
          style-src 'self' https://fonts.googleapis.com/css https://fonts.googleapis.com/icon data: chrome-extension-resource: 'unsafe-inline';
          worker-src 'self';
          """
      }
    }]
  }
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localBranchDAO",
  "serve": false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.model.Branch.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("branches")
      .setAuthorize(true)
      .setSeqNo(true)
      .setPm(true)
      .setPipelinePm(true)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.model.Branch\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "branchDAO",
  "serve": true,
  "serviceScript":
  """
    return x.get("localBranchDAO")
  """,
  "client": "{\"of\":\"net.nanopay.model.Branch\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "dateAndPlaceOfBirthDAO",
  "description": "Holds a DateAndPlaceOfBirth object containing a reference to a user, the birthday of that user, and the user's place of birth.",
  "serve": true,
  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setPm(true)
    .setPipelinePm(true)
    .setJournalName("placesOfBirths")
    .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
    .setSeqNo(true)
    .setOf(net.nanopay.model.DateAndPlaceOfBirth.getOwnClassInfo())
    .build();
  """,
  "client":"{\"of\":\"net.nanopay.model.DateAndPlaceOfBirth\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"businessSectorDAO",
  "description": "A read-only database of business sectors.",
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(false)
      .setPm(true)
      .setPipelinePm(true)
      .setReadOnly(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("businessSectors")
      .setSeqNo(true)
      .setOf(net.nanopay.model.BusinessSector.getOwnClassInfo())
      .build();
  """,
  "client":
  """
    {
      "of":"net.nanopay.model.BusinessSector"
    }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"businessTypeDAO",
  "serve":true,
  "authenticate":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("businessType"))
      .setSeqNo(true)
      .setJournalName("businessTypes")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setOf(net.nanopay.model.BusinessType.getOwnClassInfo())
      .build();
  """,
  "client":"{\"of\":\"net.nanopay.model.BusinessType\"}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"bankAccountVerification",          "serve":true,  "boxClass":"net.nanopay.cico.service.BankAccountVerifierSkeleton", "serviceClass":"net.nanopay.cico.service.BankAccountVerifierService","client":"{ \"class\":\"net.nanopay.cico.service.ClientBankAccountVerifierService\", \"delegate\": { \"class\":\"foam.box.SessionClientBox\", \"url\":\"service/bankAccountVerification\", \"delegate\":{\"class\":\"foam.box.HTTPBox\", \"url\":\"service/bankAccountVerification\"} } }"})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localExchangeRateDAO",
  "serve":false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.fx.ExchangeRate.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .setAuthorize(false)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("exchangeRates")
      .setIndex(new foam.core.PropertyInfo[] {net.nanopay.fx.ExchangeRate.FROM_CURRENCY, net.nanopay.fx.ExchangeRate.TO_CURRENCY})
      .build();
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"exchangeRateDAO",
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.fx.ExchangeRate.getOwnClassInfo())
      .setAuthorize(false)
      .setInnerDAO(x.get("localExchangeRateDAO"))
      .build();
  """,
  "client":"{\"of\":\"net.nanopay.fx.ExchangeRate\",\"requestResponseCaching\":true}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"identificationDAO",
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setAuthorize(false)
      .setSeqNo(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("identifications")
      .setOf(net.nanopay.model.Identification.getOwnClassInfo())
      .build();
  """,
  "client":"{\"of\":\"net.nanopay.model.Identification\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "deviceDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.retail.model.Device.getOwnClassInfo())
      .setJournalName("devices")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setPm(true)
      .setPipelinePm(true)
      .setSeqNo(true)
      .setAuthorize(false)
      .setDecorator(new net.nanopay.retail.PreventDuplicateDeviceDAO(x, new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.retail.model.Device.getOwnClassInfo()).build()))
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.retail.model.Device\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "invoiceDAO",
  "serve": true,
  "serviceScript":
  """
    import net.nanopay.contacts.InvoiceToContactDAO;
    import foam.dao.history.HistoryDAO;
    import net.nanopay.security.HashingJDAO;
    import net.nanopay.auth.PublicUserInfoDAO;
    import net.nanopay.invoice.AuthenticatedInvoiceDAO;
    import net.nanopay.invoice.InvoiceNotificationDAO;
    import net.nanopay.invoice.AutoDepositPendingAcceptance;
    import net.nanopay.invoice.PreventRemoveInvoiceDAO;
    import foam.nanos.crunch.lite.CapableDAO;
    import foam.dao.PredicatedDualDelegateDAO;

    dao = new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.invoice.model.Invoice.getOwnClassInfo()).build();
    dao = new foam.dao.ProxyDAO(x, dao);

    optionalDao = dao;
    dao = new CapableDAO.Builder(x).setDelegate(dao).setDaoKey("invoiceDAO").build();
    dao = new PredicatedDualDelegateDAO.Builder(x)
      .setDelegate(dao)
      .setPredicatedDelegate(optionalDao)
      .setPredicate(
        foam.mlang.MLang.EQ(net.nanopay.invoice.model.Invoice.STATUS, net.nanopay.invoice.model.InvoiceStatus.DRAFT)
      )
      .setOf(net.nanopay.invoice.model.Invoice.getOwnClassInfo())
      .build();

    dao = new net.nanopay.invoice.PreventRemoveInvoiceDAO(x, dao);
    dao = new InvoiceNotificationDAO.Builder(x).setDelegate(dao).build();
    dao = new AutoDepositPendingAcceptance(x, dao);
    dao = new PublicUserInfoDAO(x, false, "payerId", "payer", dao);
    dao = new PublicUserInfoDAO(x, false, "payeeId", "payee", dao);
    dao = new InvoiceToContactDAO(x, dao);
    dao = new HistoryDAO(x, "localInvoiceHistoryDAO", dao);
    dao = new AuthenticatedInvoiceDAO(x, dao);
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.invoice.model.Invoice.getOwnClassInfo())
      .setCapable(false) // since we need to add it towards the end instead of the beginning for invoices
      .setDecorator(dao)
      .setValidated(true)
      .setSeqNo(true)
      .setJournalName("invoices")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setAuthorize(false)
      .setEnableInterfaceDecorators(true)
      .setServiceProviderAware(true)
      .setServiceProviderAwarePropertyInfos(
        foam.util.Arrays.asMap(new Object[]
        {
          net.nanopay.invoice.model.Invoice.class.getName(),
          new foam.core.PropertyInfo[] {
            net.nanopay.invoice.model.Invoice.PAYER_ID,
            net.nanopay.invoice.model.Invoice.PAYEE_ID,
          }
        }))
      .build()
      .orderBy(foam.mlang.MLang.DESC(net.nanopay.invoice.model.Invoice.CREATED));
  """,
  "client": """
    {
      "of":"net.nanopay.invoice.model.Invoice",
      "remoteListenerSupport":false,
      "cache": false,
      "decorators": [{
        "class":"foam.nanos.fs.FileArrayInCapablePayloadsDecorator",
        "class":"foam.nanos.fs.FileArrayDAODecorator"
      }]
    }
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"invoicePaymentService",            "serve":true,  "serviceScript":"return new net.nanopay.invoice.service.DefaultInvoicePaymentService(x);","boxClass":"net.nanopay.invoice.service.InvoicePaymentServiceSkeleton","client":"{\"class\":\"net.nanopay.invoice.service.ClientInvoicePaymentService\"}"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "txnProcessorDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.TxnProcessor.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .setJournalName("txnProcessors")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.tx.TxnProcessor\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"securitiesDAO",
  "serve":true,
  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
    .setJournalName("securities")
    .setPm(true)
    .setPipelinePm(true)
    .setOf(net.nanopay.exchangeable.Security.getOwnClassInfo())
    .setName("security")
    .setIndex(new foam.core.PropertyInfo[] {net.nanopay.exchangeable.Security.NAME})
    .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.exchangeable.Security"
  }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"feeDAO",
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setGuid(true)
      .setJournalName("fees")
      .setOf(net.nanopay.tx.fee.Fee.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setIndex(new foam.core.PropertyInfo[] { net.nanopay.tx.fee.Fee.NAME })
      .setOrder(new foam.mlang.order.Comparator[] { net.nanopay.tx.fee.Fee.ORDER })
      .setServiceProviderAware(true)
      .setServiceProviderAwarePropertyInfos(
        foam.util.Arrays.asMap(new Object[]
          {
            net.nanopay.tx.fee.Fee.class.getName(),
            new foam.core.PropertyInfo[] { net.nanopay.tx.fee.Fee.FEE_RULE }
          }
        ))
      .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.tx.fee.Fee"
  }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"brokerDAO",
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setOf(net.nanopay.model.Broker.getOwnClassInfo())
      .setJournalName("brokers")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """,
  "client":
  """
    {
      "of":"net.nanopay.model.Broker"
    }
  """
})

//p({
//  "class": "foam.nanos.boot.NSpec",
//  "name": "recurringInvoiceDAO",
//  "serve": true,
//  "enabled": false,
//  "serviceScript":
//  """
//    return new foam.dao.PMDAO(x,
//      new foam.dao.PipelinePMDAO(x,
//      new foam.dao.SequenceNumberDAO(
//      new net.nanopay.security.HashingJDAO(x, \"SHA-256\", false, true, net.nanopay.invoice.model.RecurringInvoice.getOwnClassInfo(), "recurringInvoices"))));
//  """,
//  "client":"{\"of\":\"net.nanopay.invoice.model.RecurringInvoice\"}"
//})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "alterna",
  "serviceClass": "net.nanopay.tx.alterna.AlternaWebAgent"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localTokenDAO",
  "authenticate": false,
  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setAuthorize(false)
    .setPm(true)
    .setPipelinePm(true)
    .setSeqNo(true)
    .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
    .setJournalName("token")
    .setOf(foam.nanos.auth.token.Token.getOwnClassInfo())
    .build();
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"tokenDAO",

  "serve":true,
  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setInnerDAO(x.get("localTokenDAO"))
    .setOf(foam.nanos.auth.token.Token.getOwnClassInfo())
    .build();
  """,
  "client":
  """
  {
    "of":"foam.nanos.auth.token.Token"
  }
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"smsToken",                         "serve":true,  "serviceClass":"net.nanopay.auth.sms.PhoneVerificationTokenService","boxClass":"foam.nanos.auth.token.TokenServiceSkeleton","client":"{\"class\":\"foam.nanos.auth.token.ClientTokenService\"}","service":{"class":"net.nanopay.auth.sms.PhoneVerificationTokenService","accountSid":"ACe4c949440e9f057f4701e23bb82e5059","authToken":"fcb37f309069583b874aa7abcd61aac8","phoneNumber":"+14378000353"}})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "push",
  "description": "Connects to google's firebase API and sends a message and notification pair to be processed by the interface.",
  "documentation": "Pushes a message to google's firebase API. See https://firebase.google.com/docs/reference for information on how to use google's firebase API.",
  "serviceClass": "foam.nanos.notification.push.FirebasePushService",
  "service": {"class":"foam.nanos.notification.push.FirebasePushService","apiKey":"AAAAMKWTPTs:APA91bFLHRdVt76aQ-kZ8RBPS1ytYjmO-YsDfSktiN3Ka7U_jpRmt_U7HAs4RNL8bwPEiseZaiecatJDYs3DUp4K3vaq-zx6jg-RaH4xqGjo4KDk-VWDLtz9dgFrySSBcpC2F5DjZJqcuATPI0KMwQLE3KzRoSRQDg"}
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "bareUserDAO",
  "lazy": false,
  "description": "Bare boned userDAO wrapped with essential decorators.",
  "authenticate": false,
  "serviceScript":
  """
    dao = new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setSeqNo(true)
      .setSeqStartingValue(1000)
      .setOf(foam.nanos.auth.User.getOwnClassInfo())
      .setDecorator(new foam.dao.history.HistoryDAO(x, "userHistoryDAO", new foam.dao.NullDAO.Builder(x).setOf(foam.nanos.auth.User.getOwnClassInfo()).build()))
      .setJournalName("users")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setAuthorize(false)
      .setServiceProviderAware(true)
      .build();
    dao.addPropertyIndex(new foam.core.PropertyInfo[] { foam.nanos.auth.User.EMAIL });
    dao.addPropertyIndex(new foam.core.PropertyInfo[] { foam.nanos.auth.User.GROUP });
    return dao;
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localUserDAO",
  "lazy": false,
  "description": "Stores instances of User. Since it is not served (it's accessible from the server side only) it doesn`t have authorization decorator",
  "serviceScript":
  """
    dao = new foam.dao.NullDAO.Builder(x).setOf(foam.nanos.auth.User.getOwnClassInfo()).build();
    dao = new net.nanopay.contacts.AddExternalContactToken(x, dao);
    dao = new foam.nanos.auth.UserPasswordHashingDAO(x, dao);
    dao = new net.nanopay.business.DeleteAgentJunctionsOnUserDeleteDAO.Builder(x).setDelegate(dao).build();
    dao = new net.nanopay.security.auth.LogoutDisabledUserDAO.Builder(x).setDelegate(dao).build();
    dao = new net.nanopay.meter.AdditionalDocumentsUpdatedIpHistoryDAO.Builder(x).setDelegate(dao).build();
    dao = new net.nanopay.contacts.UpdateSignUpStatusDAO(x, dao);
    dao = new net.nanopay.onboarding.CreateBusinessDAO(x, dao);
    dao = new net.nanopay.onboarding.email.RegistrationSubmissionEmailDAO(x, dao);
    dao = new net.nanopay.auth.email.EmailVerificationDAO(x, dao);
    dao = new foam.nanos.geocode.GoogleMapsGeocodingDAO(x, "AIzaSyDIf0KB9lok7rg0HU9Q92uK2JuOXpXNnr0", foam.nanos.auth.User.ADDRESS, dao);
    dao = new net.nanopay.admin.AccountStatusUserDAO(x, dao);
    dao = new net.nanopay.auth.email.PreventDuplicateEmailDAO(x, dao);

    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.auth.User.getOwnClassInfo())
      .setInnerDAO(x.get("bareUserDAO"))
      .setDecorator(dao)
      .setEnableInterfaceDecorators(false)
      .setRuler(true)
      .setAuthorize(false)
      .setValidated(true)
      .setServiceProviderAware(true)
      .build();
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "userDAO",
  "serve": true,
  "description": "Client authenticated userDAO",
  "authenticate": false,
  "serviceScript":
  """
    dao = new foam.dao.NullDAO.Builder(x).setOf(foam.nanos.auth.User.getOwnClassInfo()).build();
    dao = new foam.nanos.approval.PopulateApprovalRequestsDAO.Builder(x).setDaoKey("localUserDAO").setDelegate(dao).build();
    return new foam.dao.EasyDAO.Builder(x)
        .setPm(true)
        .setPipelinePm(true)
        .setValidated(true)
        .setValidator(new foam.nanos.auth.validators.UserGroupAndSpidValidator())
        .setOf(foam.nanos.auth.User.getOwnClassInfo())
        .setDecorator(dao)
        .setInnerDAO(x.get("localUserDAO"))
        .setEnableInterfaceDecorators(false)
        .build();
  """,
  "client":
  """
  {
    "of": "foam.nanos.auth.User",
    "cache": false,
    "decorators": [
      {
        "class":"foam.nanos.fs.FileDAODecorator"
      },
      {
        "class":"foam.nanos.fs.FileArrayDAODecorator"
      }
    ]
  }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "liquiditySettingsUserDAO",
  "serve": true,
  "description": "Client authenticated liquiditySettingsUserDAO",
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
        .setOf(foam.nanos.auth.User.getOwnClassInfo())
        .setInnerDAO(x.get("userDAO"))
        .setDecorator(
          new foam.dao.FilteredDAO.Builder(x)
            .setPredicate(foam.mlang.MLang.CLASS_OF(foam.nanos.auth.User.class))
            .setDelegate(new foam.dao.NullDAO.Builder(x).setOf(foam.nanos.auth.User.getOwnClassInfo()).build())
          .build())
        .setEnableInterfaceDecorators(false)
        .build();
  """,
  "client":
  """
  {
    "of": "foam.nanos.auth.User",
    "cache": false,
    "decorators": [
      {
        "class":"foam.nanos.fs.FileDAODecorator"
      },
      {
        "class":"foam.nanos.fs.FileArrayDAODecorator"
      }
    ]
  }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localUserUserDAO",
  "description":"A filter on localUserDAO that filters out all subclasses of User.",
  "authenticate": false,
  "serviceScript":
  """
    foam.mlang.predicate.Predicate[] predicates = {
      foam.mlang.MLang.NOT(foam.mlang.MLang.INSTANCE_OF(net.nanopay.model.Business.class)),
      foam.mlang.MLang.NOT(foam.mlang.MLang.INSTANCE_OF(net.nanopay.contacts.Contact.class))
    };
    inner = x.get("localUserDAO");
    filtered = inner.where(new foam.mlang.predicate.And(predicates));
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setOf(foam.nanos.auth.User.getOwnClassInfo())
      .setInnerDAO(filtered)
      .setEnableInterfaceDecorators(false)
      .setAuthorize(false)
      .build();
  """
})



p({
  "class": "foam.nanos.boot.NSpec",
  "name":"userUserDAO",
  "serve":true,
  "description":"Adds authorization to localUserUserDAO and is served to the client",
  "authenticate": false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setInnerDAO(x.get("localUserUserDAO"))
      .setEnableInterfaceDecorators(false)
      .setPm(true)
      .setPipelinePm(true)
      .setOf(foam.nanos.auth.User.getOwnClassInfo())
      .setOrder(new foam.mlang.order.Comparator[] { new foam.mlang.order.Desc.Builder(x).setArg1(foam.nanos.auth.User.CREATED).build() })
      .build();
  """,
  "client":
  """
  {
    "of": "foam.nanos.auth.User",
    "order": [
      {
        "class": "foam.mlang.order.Desc",
        "arg1": {
          "class": "__Property__",
          "forClass_": "foam.nanos.auth.User",
          "name": "created"
        }
      }
    ],
    "decorators": [
      {
        "class":"foam.nanos.fs.FileDAODecorator"
      },
      {
        "class":"foam.nanos.fs.FileArrayDAODecorator"
      }
    ]
  }
  """
})


p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localBusinessDAO",
  "description":"A Business filter on localUserDAO",
  "authenticate": false,
  "serviceScript":
  """
    foam.mlang.predicate.Predicate predicate = foam.mlang.MLang.INSTANCE_OF(net.nanopay.model.Business.class);
    dao = x.get("localUserDAO").where(predicate);
    dao = new net.nanopay.onboarding.email.NewUserOnboardedEmailDAO.Builder(x).setDelegate(dao).build();
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(false)
      .setInnerDAO(dao)
      .setEnableInterfaceDecorators(false)
      .setOf(net.nanopay.model.Business.getOwnClassInfo())
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.model.Business\", \"remoteListenerSupport\": false,\"decorators\": [{\"class\":\"foam.nanos.fs.FileDAODecorator\"},{\"class\":\"foam.nanos.fs.FileArrayDAODecorator\"}]}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localPaymentCodeDAO",
  "serve": false,
  "authenticate": false,
  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setPm(true)
    .setPipelinePm(true)
    .setGuid(true)
    .setAuthorize(false)
    .setJournalName("paymentCodes")
    .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
    .setOf(net.nanopay.payment.PaymentCode.getOwnClassInfo())
    .build();
  """,
  "client": """
  {
    "of": "net.nanopay.payment.PaymentCode"
  }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "paymentCodeDAO",
  "serve": true,
  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setPm(true)
    .setPipelinePm(true)
    .setInnerDAO(x.get("localPaymentCodeDAO"))
    .setGuid(true)
    .setAuthorize(true)
    .setOf(net.nanopay.payment.PaymentCode.getOwnClassInfo())
    .build();
  """,
  "client": """
  {
    "of": "net.nanopay.payment.PaymentCode"
  }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "businessEmployeeDAO",
  "serve": true,
  "lazy": false,
  "description": "A read-only version of bareUserDAO that returns all users associated with the current user",
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.auth.User.getOwnClassInfo())
      .setAuthorize(false)
      .setReadOnly(true)
      .setRuler(false)
      .setDecorator(new net.nanopay.auth.BusinessEmployeeDAO.Builder(x).build())
      .setInnerDAO(x.get("bareUserDAO"))
      .build();
  """,
  "client":
  """
  {
    "of":"foam.nanos.auth.User"
  }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "publicBusinessDAO",
  "serve": true,
  "description": "A read-only version of localBusinessDAO that only returns a few properties of businesses that have been marked as public.",
  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setAuthorize(false)
    .setRuler(false)
    .setInnerDAO(x.get("localBusinessDAO"))
    .setEnableInterfaceDecorators(false)
    .setDecorator(new net.nanopay.auth.BusinessToPublicBusinessInfoDAO.Builder(x).setDelegate(new foam.dao.history.HistoryDAO(x, "userHistoryDAO", new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.model.Business.getOwnClassInfo()).build())).build())
    .setOf(net.nanopay.model.Business.getOwnClassInfo())
    .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.auth.PublicBusinessInfo",
    "remoteListenerSupport": false
  }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"businessDAO",
  "serve":true,
  "description":"Adds authorization to localBusinessDAO and is served to the client",
  "serviceScript":
  """
    dao = new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.model.Business.getOwnClassInfo()).build();
    dao = new foam.nanos.approval.PopulateApprovalRequestsDAO.Builder(x).setDaoKey("localUserDAO").setDelegate(dao).build();
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.model.Business.getOwnClassInfo())
      .setDecorator(dao)
      .setInnerDAO(x.get("localBusinessDAO"))
      .setEnableInterfaceDecorators(false)
      .setOrder(new foam.mlang.order.Comparator[] { new foam.mlang.order.Desc.Builder(x).setArg1(net.nanopay.model.Business.CREATED).build() })
      .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.model.Business",
    "cache": false,
    "remoteListenerSupport": false,
    "decorators": [
      {
        "class":"foam.nanos.fs.FileDAODecorator"
      },
      {
        "class":"foam.nanos.fs.FileArrayDAODecorator"
      }
    ]
  }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "userHistoryDAO",
  "description": "DAO containing any modifications made to users",
  "serve": true,
  "lazy": false,
  "authNotes": "Protected by service-level access control. This service requires the 'service.userHistoryDAO' permission to access.",
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(false)
      .setSeqNo(true)
      .setSeqPropertyName("seqNo")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("userHistory")
      .setOf(foam.dao.history.HistoryRecord.getOwnClassInfo())
      .setCluster(false)
      .build()
      .orderBy(foam.mlang.MLang.DESC(foam.dao.history.HistoryRecord.TIMESTAMP));
  """,
  "client":
  """
    { "of": "foam.dao.history.HistoryRecord" }
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"alternaSftp",                      "serve":true,  "service":{"class":"net.nanopay.tx.alterna.AlternaSFTPService","host":"ftp.eftcanada.com","port":22,"username":"eftcadtest2","password":"1a2$3d4f","directory":"/"}, "boxClass":"net.nanopay.tx.alterna.SFTPServiceSkeleton","client":"{ \"class\":\"net.nanopay.tx.alterna.client.ClientAlternaSFTPService\", \"delegate\": { \"class\":\"foam.box.HTTPBox\", \"url\":\"service/alternaSftp\" } }"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "deviceAuth",
  "serve": true,
  "description": "Allows users to authenticate themselves by providing an email address in a device-specific format.",
  "documentation":
  """
    Given a particular device email, service finds the device within the deviceDAO and performs authentication checks making sure that the email does indeed match the
    password provided. If authentication or value integrity checks fail, an exception will be thrown. If all is well however, the user who is the owner of the device is
    used to create a new session and the device itself is flagged as activated.
  """,
  "authenticate": false,
  "boxClass": "foam.nanos.auth.AuthServiceSkeleton",
  "serviceScript":
  """
    return new net.nanopay.auth.DeviceAuthService(x, x.get("auth"));
  """,
  "client":
  """
    {
      "class": "foam.nanos.auth.ClientLoginAuthService"
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "institutionDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setRuler(false)
      .setAuthorize(true)
      .setSeqNo(true)
      .setJournalName("institutions")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setOf(net.nanopay.payment.Institution.getOwnClassInfo())
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.payment.Institution\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "institutionPurposeCodeDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setRuler(false)
      .setAuthorize(false)
      .setSeqNo(true)
      .setJournalName("institutionPurposeCodes")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setOf(net.nanopay.payment.InstitutionPurposeCode.getOwnClassInfo())
      .build();
  """,
  "client":"{\"of\":\"net.nanopay.payment.InstitutionPurposeCode\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"appConfig",
  "description":"",
  "lazy":false,
  "parameters":false,
  "pm":true,
  "service": {
    "class":"foam.nanos.app.AppConfig",
    "privacy":"Privacy Policy",
    "privacyUrl":"/service/file/d6a408c6-587d-b00f-6e04-6a4b933f7495",
    "copyright":"Copyright © 2017-@{currentYear} nanopay Corp. All rights reserved.",
    "urlLabel":"Powered by nanopay",
    "termsAndCondLabel":"Terms and Conditions",
    "termsAndCondLink":"/service/file/1f406b9b-bde4-58ff-f171-657627581f61",
    "mode":0,
    "appLink":"",
    "playLink":"https://play.google.com/store?hl=en",
    "enableInternationalPayment":true
  }
})

p({"class":"foam.nanos.boot.NSpec", "name":"EFTReturnFileCredentials",         "lazy":false, "service":{"class":"net.nanopay.cico.model.EFTReturnFileCredentials"}})
p({"class":"foam.nanos.boot.NSpec", "name":"blobService",                      "serve":true,  "client": "{ \"class\":\"foam.blob.RestBlobService\", \"serviceName\":\"service/httpBlobService\" }"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "qrcode",
  "authenticate": false,
  "serviceClass": "net.nanopay.retail.QrCodeWebAgent"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "liquiditySettingsDAO",
  "serve": true,
  "serviceScript":
  """
  import net.nanopay.liquidity.LiquiditySettings;
  import foam.dao.DAO;

  return new foam.dao.EasyDAO.Builder(x)
    .setOf(net.nanopay.liquidity.LiquiditySettings.getOwnClassInfo())
    .setInnerDAO(x.get("localLiquiditySettingsDAO"))
    .setEnableInterfaceDecorators(false)
    .setRuler(false)
    .setValidated(true)
    .setValidator(new net.nanopay.liquidity.LiquiditySettingValidator())
    .build();
  """,
  "client": "{\"of\":\"net.nanopay.liquidity.LiquiditySettings\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localLiquiditySettingsDAO",
  "serviceScript":
  """
  import net.nanopay.liquidity.LiquiditySettings;
  import foam.dao.DAO;

  DAO dao = new foam.nanos.analytics.FoldManagerDAODecorator.Builder(x)
    .setFm(
      new foam.nanos.analytics.DAOFoldManager.Builder(x)
        .setDao((foam.dao.DAO) x.get("liquidityThresholdCandlestickDAO"))
        .setPeriodLengthMs(60 * 60 * 1000)
        .build()
    )
    .build();

  return new foam.dao.EasyDAO.Builder(x)
    .setPm(true)
    .setSeqNo(true)
    .setRuler(false) // TODO: needs to be set to true https://nanopay.atlassian.net/browse/NP-652
    .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
    .setJournalName("liquiditySettings")
    .setOf(net.nanopay.liquidity.LiquiditySettings.getOwnClassInfo())
    .setDecorator(dao)
    .setAuthorize(false)
    .build();
  """,
  "client": "{\"of\":\"net.nanopay.liquidity.LiquiditySettings\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localInvoiceHistoryDAO",
  "serve": false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setSeqNo(true)
      .setAuthorize(false)
      .setJournalName("invoiceHistory")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setSeqPropertyName("seqNo")
      .setOf(foam.dao.history.HistoryRecord.getOwnClassInfo())
      .build();
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "invoiceHistoryDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.nanos.auth.AuthorizationDAO.Builder(x)
      .setDelegate((foam.dao.DAO) x.get("localInvoiceHistoryDAO"))
      .setAuthorizer(new net.nanopay.invoice.InvoiceHistoryAuthorizer())
      .build();
  """,
  "client": "{\"of\":\"foam.dao.history.HistoryRecord\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "xeroWebAgent",
  "description": "Connects a user to Xero's website in order to grant permissions to Ablii.",
  "documentation":
  """
    When the user hits the "Connect" button in Ablii for Xero, they're brought to /services/xero, which
    calls the execute method defined in this file. The execute method will generate a URL for Xero's website that the user's
    browser gets redirected to. At that URL they'll be able to sign in and grant Ablii access to their data, such as invoices,
    contacts, and bank accounts. This is the 'xeroWebAgent' service, which is not served. It is accessed via a web agent.
    This needs to be a web agent because we need a URL that QuickBooks can redirect to when giving us the API access information.
  """,
  "serviceClass": "net.nanopay.accounting.xero.XeroWebAgent"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"xeroConfigDAO",
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setOf(net.nanopay.accounting.xero.XeroConfig.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("xeroConfig")
      .setAuthorize(false)
      .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.accounting.xero.XeroConfig"
  }
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"xeroService",                      "serve":true,  "authenticate":false, "serviceClass":"net.nanopay.accounting.xero.XeroIntegrationService","boxClass":"net.nanopay.accounting.IntegrationServiceSkeleton","client":"{\"class\":\"net.nanopay.accounting.ClientIntegrationService\"}"})
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "xeroTokenDAO",
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setOf(net.nanopay.accounting.xero.XeroToken.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("xeroToken")
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.accounting.xero.XeroToken\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "quickbooksWebAgent",
  "description": "Allows the user to redirect to the quickbooks' website in order to grant Ablii access permissions.",
  "documentation":
  """
    When the user hits the "Connect" button in Ablii for QuickBooks, they'recbrought to /services/quickbooks, which
    calls the execute method defined in this file. The execute method will generate a URL for QuickBooks' website that the user's
    browser gets redirected to. At that URL they'll be able to sign in and grant Ablii access to their data, such as invoices,
    contacts, and bank accounts. This is the 'quickbooks' service, which is not served. It is accessed via a web agent.
    This needs to be a web agent because we need a URL that QuickBooks can redirect to when giving us the API access information.
  """,
  "serviceClass": "net.nanopay.accounting.quickbooks.QuickbooksWebAgent"
})

p({"class":"foam.nanos.boot.NSpec", "name":"quickbooksAuth",                   "serve":true,  "authenticate":false, "service":{"class":"net.nanopay.accounting.quickbooks.QuickbooksOauth"}})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"quickbooksConfigDAO",
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("quickbooksConfig")
      .setAuthorize(false)
      .setOf(net.nanopay.accounting.quickbooks.QuickbooksConfig.getOwnClassInfo())
      .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.accounting.quickbooks.QuickbooksConfig"
  }
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"quickbooksService",                "serve":true,  "authenticate":false, "serviceClass":"net.nanopay.accounting.quickbooks.QuickbooksIntegrationService","boxClass":"net.nanopay.accounting.IntegrationServiceSkeleton","client":"{\"class\":\"net.nanopay.accounting.ClientIntegrationService\"}"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "quickbooksTokenDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setOf(net.nanopay.accounting.quickbooks.QuickbooksToken.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("quickbooksToken")
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.accounting.quickbooks.QuickbooksToken\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "AccountingContactEmailCacheDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setOf(net.nanopay.accounting.AccountingContactEmailCache.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("accountingContactEmailCache")
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\": \"net.nanopay.accounting.AccountingContactEmailCache\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountingBankAccountCacheDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setOf(net.nanopay.accounting.AccountingBankAccount.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("AccountingBankAccountCache")
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\": \"net.nanopay.accounting.AccountingBankAccount\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountingResultDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setSeqNo(true)
      .setOf(net.nanopay.accounting.ResultResponseWrapper.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("AccountingResultResponse")
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\": \"net.nanopay.accounting.ResultResponseWrapper\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "accountingReportDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setSeqNo(true)
      .setOf(net.nanopay.accounting.AccountingResultReport.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("AccountingResultReport")
      .setAuthorize(true)
      .build();
  """,
  "client": "{\"of\": \"net.nanopay.accounting.AccountingResultReport\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "questionnaireDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("questionnaireDAO"))
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("questionnaires")
      .setOf(net.nanopay.onboarding.model.Questionnaire.getOwnClassInfo())
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.onboarding.model.Questionnaire\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "inviteToken",
  "serve": true,
  "serviceClass": "net.nanopay.onboarding.InvitationTokenService",
  "boxClass": "foam.nanos.auth.token.TokenServiceSkeleton",
  "client": "{\"class\":\"foam.nanos.auth.token.ClientTokenService\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "flinksConnect",
  "authenticate": false,
  "serviceClass": "net.nanopay.flinks.FlinksConnectWebAgent"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "appRedirect",
  "authenticate": false,
  "serviceClass": "net.nanopay.retail.AppRedirectWebAgent"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "terms",
  "authenticate": false,
  "serviceClass": "net.nanopay.settings.TermsAndConditionsWebAgent"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "padCaptureDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.model.PadCapture.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .setSeqNo(true)
      .setValidated(true)
      .setRuler(false)
      .setJournalName("padCapture")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.model.PadCapture\"}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"firebaseInviteToken",              "serve":true,  "serviceClass":"net.nanopay.onboarding.FirebaseInvitationTokenService","boxClass":"foam.nanos.auth.token.TokenServiceSkeleton","client":"{\"class\":\"foam.nanos.auth.token.ClientTokenService\"}","service":{"class":"net.nanopay.onboarding.FirebaseInvitationTokenService","apn":"net.nanopay.mintchip_android","ofl":"https://mintchip.ca","ibi":"com.nanopay.mintchip","isi":"1051748158"},"description":"firebaseInviteToken"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "paymentCardDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.cico.paymentCard.model.PaymentCard.getOwnClassInfo())
      .setDecorator( new net.nanopay.cico.paymentCard.ValidatedPaymentCardDAO(x,
        new net.nanopay.cico.paymentCard.PaymentCardSanitizeDAO(x,
        new net.nanopay.cico.paymentCard.NetworkedPaymentCardDAO(x,
        new net.nanopay.cico.paymentCard.RealexPaymentCardStoreDAO(x,
        new net.nanopay.cico.paymentCard.StripePaymentCardDAO(x,
        new net.nanopay.cico.paymentCard.PaymentCardTransientDAO(x,
        new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.cico.paymentCard.model.PaymentCard.getOwnClassInfo()).build())))))))
      .setSeqNo(true)
      .setPm(true)
      .setPipelinePm(true)
      .setJournalName("paymentCards")
      .setValidated(false)
      .setRuler(false)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.cico.paymentCard.model.PaymentCard\"}",
  "description": "Payment card DAO"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "stripeCustomerDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.stripe.StripeCustomer.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .setJournalName("stripeCustomers")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.tx.stripe.StripeCustomer\"}",
  "description": "Stripe Customer DAO"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "txnProcessorUserReferenceDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.TxnProcessorUserReference.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .setSeqNo(true)
      .setRuler(false)
      .setValidated(false)
      .setJournalName("txnProcessorUserReferences")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """,
  "client":"{\"of\":\"net.nanopay.tx.TxnProcessorUserReference\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "encryptedUserDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.security.EncryptedObject.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .setRuler(false)
      .setValidated(false)
      .setDecorator(new net.nanopay.security.EncryptingDAO.Builder(x)
        .setOf(foam.nanos.auth.User.getOwnClassInfo())
        .setDelegate(new foam.dao.NullDAO.Builder(x).setOf(foam.nanos.auth.User.getOwnClassInfo()).build())
        .build())
      .setJournalName("encryptedUsers")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.auth.User\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "encryptedBankAccountDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.security.EncryptedObject.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .setRuler(false)
      .setValidated(false)
      .setDecorator(new net.nanopay.security.EncryptingDAO.Builder(x)
        .setOf(net.nanopay.bank.BankAccount.getOwnClassInfo())
        .setDelegate(new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.bank.BankAccount.getOwnClassInfo()).build())
        .build())
      .setJournalName("encryptedBankAccounts")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.bank.BankAccount\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "keyPairDAO",
  "serve": true,
  "description": "DAO that stores a public-private key pair.",
  "documentation":
  """
    Stores a public-private key pair (KeyPairEntry object) and also puts each
    individual member of the pair into public key dao and private key dao respectively.
  """,
  "serviceScript":
  """
    return new net.nanopay.security.KeyPairDAO.Builder(x)
      .setDelegate(
        new foam.dao.EasyDAO.Builder(x)
          .setJournalName("keyPairs")
          .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
          .setAuthorize(false)
          .setSeqNo(true)
          .setOf(net.nanopay.security.KeyPairEntry.getOwnClassInfo())
          .build())
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.security.KeyPairEntry\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"publicUserDAO",
  "serve":true,
  "description":"A DAO served to the client that lists all Users in the system. However, it only returns the public user info instead of the entire User object.",
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.auth.User.getOwnClassInfo())
      .setInnerDAO(new net.nanopay.auth.UserToPublicUserInfoDAO(x, x.get("localUserUserDAO")))
      .setPm(true)
      .setPipelinePm(true)
      .setAuthorize(false)
      .setEnableInterfaceDecorators(false)
      .build()
  """,
  "client":
  """
  {
    "of":"net.nanopay.auth.PublicUserInfo",
    "decorators": [
      {
        "class":"foam.nanos.fs.FileArrayDAODecorator"
      }
    ]
  }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "testReportDAO",
  "description": "DAO to store all of the meta-data related to tests.",
  "documentation":
  """
    Stores a TestReport object which contains a timestamp of the last run test and the number of tests
    currently within the system.
  """,
  "serve": true,
  "pm": false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setJournalName("testreports")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setName("testReportDAO")
      .setOf(net.nanopay.test.TestReport.getOwnClassInfo())
      .build();
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "P2PTxnRequestDAO",
  "serve": true,
  "parameters": false,
  "pm": true,
  "serviceScript":
  """
    return new net.nanopay.retail.AuthenticatedP2PTxnRequestDAO(x, new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.retail.NewP2PTxnRequestDAO.getOwnClassInfo())
      .setAuthorize(false)
      .setSeqNo(true)
      .setDecorator(new net.nanopay.retail.P2PTxnRequestUserInfoDAO(x,
        new net.nanopay.retail.NewP2PTxnRequestDAO(x,
        new net.nanopay.retail.ExistingP2PTxnRequestDAO(x,
        new net.nanopay.retail.P2PTxnRequestNotificationDAO(x,
        new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.retail.NewP2PTxnRequestDAO.getOwnClassInfo()).build())))))
      .setJournalName("p2pTxnRequests")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build())
  """,
  "client": "{\"of\":\"net.nanopay.retail.model.P2PTxnRequest\"}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"SPSCredentials",                   "lazy":false, "serve":true, "authenticate":false, "service":{"class":"net.nanopay.sps.SPSCredentials"}})
p({"class":"foam.nanos.boot.NSpec", "name":"bankHolidayDAO",                   "description":"DAO to store bank holidays for EFT processing.","serve":true,"serviceScript":"return new foam.dao.EasyDAO.Builder(x).setAuthorize(false).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"bankHolidays\").setSeqNo(true).setOf(net.nanopay.bank.BankHoliday.getOwnClassInfo()).build();", "client":"{\"of\":\"net.nanopay.bank.BankHoliday\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"externalInvoiceToken",             "description":"Generate and process tokens pertaining to external user registration.", "serve":true, "authenticate":false, "serviceClass":"net.nanopay.auth.ExternalInvoiceTokenService","boxClass":"foam.nanos.auth.token.TokenServiceSkeleton","client":"{\"class\":\"foam.nanos.auth.token.ClientTokenService\"}"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "nanopayDocumentDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.flow.Document.getOwnClassInfo())
      .setAuthorize(false)
      .setInnerDAO(x.get("localDocumentDAO"))
      .setReadOnly(true)
      .build();
  """,
  "client": "{\"of\":\"foam.flow.Document\"\}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "receiptDAO",
  "description": "Stores receipts used by Merkle Trees.",
  "documentation":
  """
    Stores a receipt model while using a Merkle Tree with hash signatures to ensure integrity
    of the data contained within the DAO.
  """,
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setGuid(true).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("receipts")
      .setOf(net.nanopay.security.receipt.Receipt.getOwnClassInfo())
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.security.receipt.Receipt\"}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"passwordEntropyService",           "serve":true,  "authenticate": false, "boxClass":"net.nanopay.auth.passwordutil.PasswordEntropySkeleton","client":"{ \"class\":\"net.nanopay.auth.passwordutil.ClientPasswordEntropy\", \"delegate\": { \"class\":\"foam.box.HTTPBox\", \"url\":\"service/passwordEntropyService\" } }","serviceClass":"net.nanopay.auth.passwordutil.PasswordStrengthCalculator"});

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "identificationTypeDAO",
  "serve": true,
  "serviceScript":
  """
    new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setReadOnly(true)
      .setAuthorize(false)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("identificationTypes")
      .setSeqNo(true)
      .setOf(net.nanopay.model.IdentificationType.getOwnClassInfo())
      .build()
  """,
  "client": "{\"of\":\"net.nanopay.model.IdentificationType\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "agentJunctionDAO",
  "lazy": false,
  "serve": true,
  "description": "DAO responsible for storing agent authentication permission information.",
  "serviceScript":
  """
    dao = new foam.dao.NullDAO.Builder(x).setOf(foam.nanos.auth.UserUserJunction.getOwnClassInfo()).build();
    dao = new net.nanopay.partners.PartnerInfoDAO(x, dao);
    dao = new net.nanopay.auth.PublicUserInfoDAO(x, false, "partnerId", "partnerInfo", dao);
    dao = new net.nanopay.auth.PublicUserInfoDAO(x, false, "yourId", "yourInfo", dao);
    dao = new foam.nanos.auth.PermissionedPropertyDAO.Builder(x)
      .setDelegate(dao)
      .build();
    dao = new net.nanopay.meter.SkipNullReferencedPropertyDAO.Builder(x)
      .setProperty(foam.nanos.auth.UserUserJunction.TARGET_ID)
      .setDelegate(dao)
      .build();

    return new foam.dao.EasyDAO.Builder(x)
      .setAuthorizer(new foam.nanos.auth.AuthorizableAuthorizer("agentJunction"))
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("agentJunctions")
      .setDecorator(dao)
      .setOf(foam.nanos.auth.UserUserJunction.getOwnClassInfo())
      .build();

  """,
  "client": """
    {
      "of":"foam.nanos.auth.UserUserJunction",
      "remoteListenerSupport":false,
      "cache":false
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "loginAttemptDAO",
  "serve": true,
  "description": "A database to keep track of login attempts made by users.",
  "documentation":
  """
    When a user attempts a login, a LoginAttempt object is used to store its email, user id, and group. This
    dao stores all such objects. The login attempt object also has a date field to describe when the login was
    attempted so multiple such objects can safely refer to the same user.
  """,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.auth.LoginAttempt.getOwnClassInfo())
      .setSeqNo(true)
      .setPermissionPrefix("loginAttempt")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("loginAttempts")
      .setFixedSize(new foam.dao.FixedSizeDAO.Builder(x)
        .setComparator(foam.mlang.MLang.DESC(net.nanopay.auth.LoginAttempt.CREATED))
        .setSize(10000)
        .build())
      .setRuler(false)
      .build()
      .orderBy(foam.mlang.MLang.DESC(net.nanopay.auth.LoginAttempt.CREATED));
  """,
  "client": "{\"of\":\"net.nanopay.auth.LoginAttempt\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "ipHistoryDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setSeqNo(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("ipHistories")
      .setName("ipHistory")
      .setOf(net.nanopay.meter.IpHistory.getOwnClassInfo())
      .setOrder(new foam.mlang.order.Comparator[] { new foam.mlang.order.Desc.Builder(x).setArg1(net.nanopay.meter.IpHistory.CREATED).build() })
      .setCreatedAware(true)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.meter.IpHistory\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "supportEmailDAO",
  "serve": true,
  "serviceScript":
  """
     return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.support.model.SupportEmail.getOwnClassInfo())
      .setSeqNo(true)
      .setPm(true)
      .setPipelinePm(true)
      .setJournalName("supportEmails")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setAuthorize(false)
      .build();
  """,
  "client": "{\"of\":\"foam.support.model.SupportEmail\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "reportDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.meter.reports.Report.getOwnClassInfo())
      .setPm(true)
      .setPipelinePm(true)
      .setGuid(true)
      .setDecorator(new foam.nanos.script.ScriptRunnerDAO(new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.meter.reports.Report.getOwnClassInfo()).build()))
      .setJournalName("reports")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.meter.reports.Report\"}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"routingJournal",                   "description":"Single journal to replace all of the individual journals.","authenticate":false,"serviceScript":"java.io.File file = null; String journalName = \"routingJournal\"; try { file = new java.io.File(System.getProperty(\"JOURNAL_HOME\") + \"/\" + journalName); file.createNewFile(); } catch ( Throwable t ) { throw new RuntimeException(t); } journal = new foam.dao.RoutingJournal.Builder(x).setFile(file).setFilename(journalName).build(); journal.replay(x, new foam.dao.NullDAO()); return journal;"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "blacklistDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setOf(net.nanopay.meter.Blacklist.getOwnClassInfo())
      .setJournalName("blacklists")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("blacklist"))
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.meter.Blacklist\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "ascendantFXReports",
  "authenticate": false,
  "serviceScript":
  """
    httpBlobService = new foam.nanos.blob.HttpBlobService(x, x.get(\"blobStore\"));
    return new net.nanopay.fx.ascendantfx.AscendantFXReportsWebAgent(x, httpBlobService);
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"complianceService",                "service":{"class":"net.nanopay.meter.compliance.NanopayComplianceService","enabled":true}})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"beneficialOwnerDAO",
  "description":"Contains beneficial owners of businesses.",
  "serve":true,
  "serviceScript":
  """
    mdao = new foam.dao.MDAO(net.nanopay.model.BeneficialOwner.getOwnClassInfo());
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setSeqNo(true)
      .setName("beneficialOwnerDAO")
      .setOf(net.nanopay.model.BeneficialOwner.getOwnClassInfo())
      .setMdao(mdao)
      .setInnerDAO(new net.nanopay.security.HashingJDAO(x, "SHA-256", false, true, mdao, "beneficialOwners",  "true".equals(System.getProperty("CLUSTER"))))
      .setRuler(true)
      .setRulerDaoKey("beneficialOwnerDAO")
      .build();
  """,
  "client":"{\"of\": \"net.nanopay.model.BeneficialOwner\"}"
})

p({
    "class": "foam.nanos.boot.NSpec",
    "name": "signingOfficerJunctionDAO",
    "description": "Stores the junctions for the relationship between signing officers of a business and the business itself.",
    "serve": true,
    "serviceScript":
    """
      dao = new net.nanopay.meter.SigningOfficerAssignedIpHistoryDAO.Builder(x)
        .build();
      dao = new net.nanopay.meter.compliance.SigningOfficerComplianceStatusDAO.Builder(x)
        .setDelegate(dao)
        .build();

      return new foam.dao.EasyDAO.Builder(x)
        .setOf(net.nanopay.model.BusinessUserJunction.getOwnClassInfo())
        .setDecorator(dao)
        .setAuthorizer(new foam.nanos.auth.AuthorizableAuthorizer("signingOfficerJunction"))
        .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
        .setJournalName("signingOfficerJunctions")
        .setPm(true)
        .build();
    """,
    "client": "{\"of\": \"net.nanopay.model.BusinessUserJunction\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "canadianSanctionDAO",
  "lazy": false,
  "serve": true,
  "description": "In-memeory datastore for Canadian sanction records.",
  "authenticate": false,
  "serviceScript": """
    new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setSeqNo(true)
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("canadianSanctionDAO"))
      .setName("canadianSanction")
      .setOf(net.nanopay.meter.compliance.canadianSanction.Record.getOwnClassInfo())
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.meter.compliance.canadianSanction.Record\"}"
})
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"acceptanceDocumentDAO",
  "serve":true,
  "serviceScript":
  """
    dao = new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setAuthorize(false)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("acceptanceDocuments")
      .setSeqNo(true)
      .setOf(net.nanopay.documents.AcceptanceDocument.getOwnClassInfo())
      .build();
    return new foam.nanos.auth.AuthorizationDAO.Builder(x)
      .setAuthorizer(new foam.nanos.auth.AuthorizableAuthorizer("acceptanceDocument"))
      .setDelegate(dao)
      .build();
    """,
    "client":"{\"of\":\"net.nanopay.documents.AcceptanceDocument\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"acceptanceDocumentService",
  "serve":true,
  "authenticate": false,
  "boxClass":"net.nanopay.documents.AcceptanceDocumentServiceSkeleton",
  "serviceClass":"net.nanopay.documents.AcceptanceDocumentServer",
  "client":"{
    \"class\":\"net.nanopay.documents.ClientAcceptanceDocumentService\",
    \"delegate\":{
      \"class\":\"foam.box.HTTPBox\", \"url\":\"service/acceptanceDocumentService\"
      }
    }"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"userAcceptanceDocumentDAO",
  "serve":true,
  "serviceScript":
  """
    lb = new foam.nanos.auth.LastModifiedByAwareDAO.Builder(x).setDelegate(
      new foam.dao.EasyDAO.Builder(x)
        .setPm(true)
        .setPipelinePm(true)
        .setAuthorize(false)
        .setSeqNo(true)
        .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
        .setJournalName("userAcceptanceDocuments")
        .setOf(net.nanopay.documents.UserAcceptanceDocument.getOwnClassInfo())
      .build()).build();
    l = new foam.nanos.auth.LastModifiedAwareDAO.Builder(x).setDelegate(lb).build();
    cb = new foam.nanos.auth.CreatedByAwareDAO.Builder(x).setDelegate(l).build();
    c = new foam.nanos.auth.CreatedAwareDAO.Builder(x).setDelegate(cb).build();
    ar = new foam.nanos.auth.AuthorizationDAO.Builder(x)
      .setDelegate(c)
      .setAuthorizer(new foam.nanos.auth.AuthorizableAuthorizer("userAcceptanceDocument"))
      .build();
    return ar;
  """,
  "client":"{\"of\":\"net.nanopay.documents.UserAcceptanceDocument\"}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"settlementReports",                "authenticate":false, "description":"This generates a PDF file that is downloaded as a zip file. The report contains a dated range for invoices and specific fields from the invoices.", "serviceScript":"return new net.nanopay.invoice.InvoiceFilteredSettlementReport.Builder(x).setDelegate(new foam.nanos.blob.HttpBlobService(x, x.get(\"blobStore\"))).build();"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "identityMindResponseDAO",
  "serve": true,
  "serviceScript":
  """
   mdao = new foam.dao.MDAO(net.nanopay.meter.compliance.identityMind.IdentityMindResponse.getOwnClassInfo());
   return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setSeqNo(true)
      .setName("identityMindResponse")
      .setOf(net.nanopay.meter.compliance.identityMind.IdentityMindResponse.getOwnClassInfo())
      .setMdao(mdao)
      .setInnerDAO(new net.nanopay.security.HashingJDAO(x, "SHA-256", false, true, mdao, "identityMindResponses", "true".equals(System.getProperty("CLUSTER"))))
      .setRuler(true)
      .setRulerDaoKey("identityMindResponseDAO")
      .build();
  """,
  "client":"{\"of\":\"net.nanopay.meter.compliance.identityMind.IdentityMindResponse\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "identityMindService",
  "lazy": false,
  "service": {
    "class": "net.nanopay.meter.compliance.identityMind.IdentityMindService"
  }
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "identityMindWebAgent",
  "parameters": true,
  "serviceClass": "net.nanopay.meter.compliance.identityMind.IdentityMindWebAgent"
})

p({"class":"foam.nanos.boot.NSpec", "name":"dowjonesCredentials",              "lazy":false,  "service":{"class":"net.nanopay.meter.compliance.dowJones.DowJonesCredentials"}})
p({"class":"foam.nanos.boot.NSpec", "name":"dowJonesService",                  "serve":true,  "boxClass":"net.nanopay.meter.compliance.dowJones.DowJonesSkeleton", "serviceClass":"net.nanopay.meter.compliance.dowJones.DowJonesService","client":"{\"class\":\"net.nanopay.meter.compliance.dowJones.ClientDowJonesService\",\"delegate\":{\"class\":\"foam.box.HTTPBox\", \"url\":\"service/dowJonesService\"}}"})
p({"class":"foam.nanos.boot.NSpec", "name":"emailConfig",                      "lazy":false,  "service":{"class":"foam.nanos.app.EmailConfig", "from":"noreply@nanopay.net", "displayName":"nanopay Corporation", "replyTo":"noreply@nanopay.net"}})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "dowJonesResponseDAO",
  "serve": true,
  "serviceScript":
  """
    mdao = new foam.dao.MDAO(net.nanopay.meter.compliance.dowJones.DowJonesResponse.getOwnClassInfo());
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setSeqNo(true)
      .setName("dowJonesResponse")
      .setOf(net.nanopay.meter.compliance.dowJones.DowJonesResponse.getOwnClassInfo())
      .setMdao(mdao)
      .setInnerDAO(new net.nanopay.security.HashingJDAO(x, "SHA-256", false, true, mdao, "dowJonesResponse", "true".equals(System.getProperty("CLUSTER"))))
      .setRuler(true)
      .setRulerDaoKey("dowJonesResponseDAO")
      .build()
  """,
  "client": "{\"of\":\"net.nanopay.meter.compliance.dowJones.DowJonesResponse\"}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"kotakCredentials",                 "lazy":false,  "service":{"class":"net.nanopay.kotak.KotakCredentials"}})
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"complianceHistoryDAO",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.ReadOnlyDAO.Builder(x).setDelegate(
      new foam.dao.FilteredDAO.Builder(x)
        .setPredicate(
          foam.mlang.MLang.IN(
            foam.nanos.ruler.RuleHistory.RULE_ID,
            ((foam.dao.ArraySink)((foam.mlang.sink.Map)((foam.dao.DAO) x.get("ruleDAO"))
              .where(foam.mlang.MLang.OR(new foam.mlang.predicate.Predicate[] {
                foam.mlang.MLang.EQ(foam.nanos.ruler.Rule.RULE_GROUP, "onboarding"),
                foam.mlang.MLang.EQ(foam.nanos.ruler.Rule.RULE_GROUP, "compliance"),
                foam.mlang.MLang.EQ(foam.nanos.ruler.Rule.RULE_GROUP, "FastPay")}))
              .select(foam.mlang.MLang.MAP(foam.nanos.ruler.Rule.ID, new foam.dao.ArraySink())))
            .getDelegate()).getArray().toArray()))
      .setDelegate((foam.dao.DAO)x.get("ruleHistoryDAO"))
    .build()).build();
  """,
  "client":"{\"of\":\"foam.nanos.ruler.RuleHistory\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"email",
  "serviceScript":"""
    import foam.nanos.notification.email.SMTPEmailService;
    import foam.nanos.notification.email.EmailService;
    import foam.nanos.notification.email.NullEmailService;
    import foam.nanos.notification.email.ProxyEmailService;

    // When configuring email, remove this NullEmailService and use
    // the SMTPEmailService after configuring host, and user details
    return new ProxyEmailService.Builder(x)
      .setDelegate(
        new NullEmailService.Builder(x).build())
      .build();

    // EmailService es = new SMTPEmailService.Builder(x)
    //  .setHost("<smtp-host>")
    //  .setPort("587")
    //  .setAuthenticate(true)
    //  .setStarttls(true)
    //  .setUsername("<smtp-username>")
    //  .setPassword("<smtp-password>")
    //  .build();
    //return new ProxyEmailService.Builder(x).setDelegate(es).build();
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"smsService",
  "serviceScript":"""
    import foam.nanos.notification.sms.NullSMSService;
    import foam.nanos.notification.sms.ProxySMSService;

    return new ProxySMSService.Builder(x)
      .setDelegate(
        new NullSMSService.Builder(x).build())
      .build();
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "payrollDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.payment.Payroll.getOwnClassInfo())
      .setPm(true)
      .setSeqNo(true)
      .setDecorator(new net.nanopay.payment.PayrollDAO(x, new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.payment.Payroll.getOwnClassInfo()).build()))
      .setJournalName("payrolls")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .build();
  """,
  "client":"{\"of\":\"net.nanopay.payment.Payroll\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "complianceItemDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setJournalName("complianceItems")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setOf(net.nanopay.meter.compliance.ComplianceItem.getOwnClassInfo())
      .setSeqNo(true)
      .setName("complianceItem")
      .setCreatedAware(true)
      .setOrder(new foam.mlang.order.Comparator[] { new foam.mlang.order.Desc.Builder(x).setArg1(net.nanopay.meter.compliance.ComplianceItem.CREATED).build() })
      .build();
  """,
  "client": "{\"of\":\"net.nanopay.meter.compliance.ComplianceItem\"}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"AFEXCredentials",                  "lazy":false,  "service":{"class":"net.nanopay.fx.afex.AFEXCredentials"}})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "liquidityThresholdCandlestickDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.analytics.Candlestick.getOwnClassInfo())
      .setAuthorize(false)
      .setRuler(false)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.analytics.Candlestick\"}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"JDBCConnectionSpec", "lazy":false, "serve":false, "class":"foam.nanos.boot.NSpec", "service":{"class":"foam.dao.jdbc.JDBCConnectionSpec", "databaseServer":"mysql", "hostName":"localhost", "databaseName":"testSQLDAO", "userName":"foam_user", "userPassword":"foam_password"} })


p({
  "class": "foam.nanos.boot.NSpec",
  "name": "clearingTimeService",
  "serve": false,
  "service": {
    "class": "net.nanopay.meter.clearing.ClearingTimeService",
    "defaultClearingTime": 2
  }
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "jobTitleDAO",
  "lazy": true,
  "serve": true,
  "authenticate": false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setPipelinePm(true)
      .setReadOnly(true)
      .setAuthorize(false)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("jobTitles")
      .setSeqNo(false)
      .setOf(net.nanopay.model.JobTitle.getOwnClassInfo())
      .build();
  """,
  "client": """
    { "of": "net.nanopay.model.JobTitle" }
  """
})

// Remove the "static" service since we don't depend on it and it provides unauthenticated access to highly sensitive information.
r({"class":"foam.nanos.boot.NSpec","name":"static"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "bankHolidayService",
  "serve": false,
  "service": {
    "class": "net.nanopay.bank.BankHolidayService"
  }
})

// We need to override ruleDAO on the nanopay side so we can add the
// SetBusinessNameDAO decorator.
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "ruleDAO",
  "serve": true,
  "serviceScript":
  """
    dao = new foam.dao.EasyDAO.Builder(x)
      .setEnableInterfaceDecorators(false)
      .setServiceProviderAware(true)
      .setOf(foam.nanos.ruler.Rule.getOwnClassInfo())
      .setCluster(false)
      .setInnerDAO(x.get("localRuleDAO"))
      .setRuler(false)
      .build();

    return dao;
  """,
  "client": """
    {
      "of": "foam.nanos.ruler.Rule"
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "genTxnReport",
  "serviceClass": "net.nanopay.meter.report.GenTxnReportWebAgent"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "transactionHierarchyDAO",
  "serve":true,
  "serviceScript":
  """
    dao = new net.nanopay.meter.report.TransactionHierarchyDAO.Builder(x)
      .setDelegate(new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.meter.report.TransactionReport.getOwnClassInfo()).build())
      .setX(x)
      .build();

    return new foam.dao.EasyDAO.Builder(x)
      .setJournalType(foam.dao.JournalType.NO_JOURNAL)
      .setPm(true)
      .setPipelinePm(true)
      .setOf(net.nanopay.meter.report.TransactionReport.getOwnClassInfo())
      .setDecorator(dao)
      .build();
  """,
  "client":
  """
    {
      "of": "net.nanopay.meter.report.TransactionReport"
    }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"assetClassDAO",
  "serve":true,
  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
    .setJournalName("assetClasses")
    .setPm(true)
    .setPipelinePm(true)
    .setOf(net.nanopay.exchangeable.AssetClass.getOwnClassInfo())
    .setName("assetClass")
    .setIndex(new foam.core.PropertyInfo[] {net.nanopay.exchangeable.AssetClass.NAME})
    .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.exchangeable.AssetClass"
  }
  """
})

//p({"class":"foam.nanos.boot.NSpec","id":"invoiceDAOJshell","description":"Jshell version","language":2,"serviceScript":"import foam.core.X;\nimport foam.dao.DAO;\nimport foam.dao.EasyDAO;\nimport foam.dao.history.HistoryDAO;\nimport net.nanopay.auth.PublicUserInfoDAO;\nimport net.nanopay.contacts.InvoiceToContactDAO;\nimport net.nanopay.invoice.AuthenticatedInvoiceDAO;\nimport net.nanopay.invoice.AutoDepositPendingAcceptance;\nimport net.nanopay.invoice.InvoiceNotificationDAO;\nimport net.nanopay.invoice.InvoiceVoidEmailDAO;\n\n    DAO dao = new net.nanopay.invoice.PreventRemoveInvoiceDAO(x, null);\n    dao = new InvoiceNotificationDAO.Builder(x).setDelegate(dao).build();\n    dao = new AutoDepositPendingAcceptance(x, dao);\n    dao = new InvoiceVoidEmailDAO(x, dao);\n    dao = new PublicUserInfoDAO(x, false, \"payerId\", \"payer\", dao);\n    dao = new PublicUserInfoDAO(x, false, \"payeeId\", \"payee\", dao);\n    dao = new InvoiceToContactDAO(x, dao);\n    dao = new HistoryDAO(x, \"invoiceHistoryDAO\", dao);\n    dao = new AuthenticatedInvoiceDAO(x, dao);\n\n    return new foam.dao.EasyDAO.Builder(x).setOf(net.nanopay.invoice.model.Invoice.getOwnClassInfo()).setDecorator(dao)\n        .setValidated(true).setSeqNo(true).setJournalName(\"invoices\")\n        .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setAuthorize(false).build();"})


p({
  "class": "foam.nanos.boot.NSpec",
  "name": "abliiBusinessReportDAO",
  "serve": true,
  "serviceScript": """
    abrDAO =  new net.nanopay.meter.report.AbliiBusinessReportDAO.Builder(x)
      .build();
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.meter.report.AbliiBusinessReport.getOwnClassInfo())
      .setDecorator(abrDAO)
      .build();
  """,
  "client": """
    {
      "of": "net.nanopay.meter.report.AbliiBusinessReport"
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "paymentReportDAO",
  "serve": true,
  "serviceScript": """
    prDAO =  new net.nanopay.meter.report.PaymentReportDAO.Builder(x)
      .setDelegate(new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.meter.report.PaymentReport.getOwnClassInfo()).build())
      .build();
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.meter.report.PaymentReport.getOwnClassInfo())
      .setDecorator(prDAO)
      .build();
  """,
  "client": """
    {
      "of": "net.nanopay.meter.report.PaymentReport"
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "paymentSummaryReportDAO",
  "serve": true,
  "serviceScript": """
    psrDAO =  new net.nanopay.meter.report.PaymentSummaryReportDAO.Builder(x)
      .setDelegate(new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.meter.report.PaymentSummaryReport.getOwnClassInfo()).build())
      .build();
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.meter.report.PaymentSummaryReport.getOwnClassInfo())
      .setDecorator(psrDAO)
      .build();
  """,
  "client": """
    {
      "of": "net.nanopay.meter.report.PaymentSummaryReport"
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "businessSummaryReportDAO",
  "serve": true,
  "serviceScript": """
    abrDAO =  new net.nanopay.meter.report.BusinessSummaryReportDAO.Builder(x)
      .setDelegate(new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.meter.report.BusinessSummaryReport.getOwnClassInfo()).build())
      .build();
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.meter.report.BusinessSummaryReport.getOwnClassInfo())
      .setDecorator(abrDAO)
      .build();
  """,
  "client": """
    {
      "of": "net.nanopay.meter.report.BusinessSummaryReport"
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "userComplianceSummaryReportDAO",
  "serve": true,
  "serviceScript": """
    ucsrDAO =  new net.nanopay.meter.report.UserComplianceSummaryReportDAO.Builder(x)
      .setDelegate(new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.meter.report.UserComplianceSummaryReport.getOwnClassInfo()).build())
      .build();
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.meter.report.UserComplianceSummaryReport.getOwnClassInfo())
      .setDecorator(ucsrDAO)
      .build();
  """,
  "client": """
    {
      "of": "net.nanopay.meter.report.UserComplianceSummaryReport"
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "rejectedTransactionReportDAO",
  "serve": true,
  "serviceScript": """
    prDAO =  new net.nanopay.meter.report.RejectedTransactionReportDAO.Builder(x)
      .setDelegate(new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.meter.report.RejectedTransactionReport.getOwnClassInfo()).build())
      .build();
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.meter.report.RejectedTransactionReport.getOwnClassInfo())
      .setDecorator(prDAO)
      .build();
  """,
  "client": """
    {
      "of": "net.nanopay.meter.report.RejectedTransactionReport"
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "csvUploadScriptDAO",
  "lazy": true,
  "serve": true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setGuid(true)
      .setOf(net.nanopay.script.CsvUploadScript.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName(\"csvUploadScripts\")
      .setAuthorize(false)
      .setCluster(false)
      .setDecorator(new foam.nanos.script.ScriptRunnerDAO(new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.script.CsvUploadScript.getOwnClassInfo()).build()))
      .setOrder(new foam.core.PropertyInfo[] {foam.nanos.script.Script.ID})
      .setIndex(new foam.core.PropertyInfo[] {foam.nanos.script.Script.ID})
      .build();
  """,
  "client": """
    {
      "of":"net.nanopay.script.CsvUploadScript",
      "decorators": [
        {
          "class":"foam.nanos.fs.FileDAODecorator"
        },
        {
          "class":"foam.nanos.fs.FileArrayDAODecorator"
        }
      ]
    }
  """
})

// Progress bar service
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "ProgressBarDAO",
  "serve": true,
  "lazy": false,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.tx.gs.ProgressBarData.getOwnClassInfo())
      .setAuthorize(false)
      .setCluster(false)
      .setPm(true)
      .setPipelinePm(false)
      .setRuler(false)
      .setCluster(false)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("ProgressBarDAO")
      .build();
  """,
  "client":
  """
  {
    "of":"net.nanopay.tx.gs.ProgressBarData",
    "cache": false,
    "ttlPurgeTime": 0,
    "ttlSelectPurgeTime": 0
  }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"userCapabilityJunctionDAO",
  "serve":true,
  "serviceScript":"""
    dao = new foam.dao.EasyDAO.Builder(x)
      .setAuthorize(false)
      .setOf(foam.nanos.crunch.UserCapabilityJunction.getOwnClassInfo())
      .setInnerDAO(x.get("bareUserCapabilityJunctionDAO"))
      .build();
    userCap =  new foam.nanos.crunch.UserCapabilityJunctionDAO.Builder(x).setDelegate(dao).build();
    return userCap;
  """,
  "client":"{\"of\":\"foam.nanos.crunch.UserCapabilityJunction\", \"remoteListenerSupport\": false}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"bareUserCapabilityJunctionDAO",
  "serviceScript":"""
    mdao = new foam.dao.MDAO(foam.nanos.crunch.UserCapabilityJunction.getOwnClassInfo());
    mdao.addIndex(new foam.core.PropertyInfo[] { foam.nanos.crunch.UserCapabilityJunction.SOURCE_ID, foam.nanos.crunch.UserCapabilityJunction.TARGET_ID });
    mdao.addIndex(new foam.core.PropertyInfo[] { foam.nanos.crunch.UserCapabilityJunction.SOURCE_ID });
    inner = new net.nanopay.security.HashingJDAO(x, "SHA-256", false, true, mdao, "userCapabilityJunctions", "true".equals(System.getProperty("CLUSTER")));
    decorator = new foam.dao.history.HistoryDAO(x, "userCapabilityJunctionHistoryDAO", new foam.dao.NullDAO.Builder(x).setOf(foam.nanos.crunch.UserCapabilityJunction.getOwnClassInfo()).build());
    dao = new foam.dao.EasyDAO.Builder(x)
      .setMdao(mdao)
      .setAuthorize(false)
      .setGuid(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("userCapabilityJunctions")
      .setInnerDAO(inner)
      .setOf(foam.nanos.crunch.UserCapabilityJunction.getOwnClassInfo())
      .setDecorator(decorator)
      .build();
    return dao;
  """,
  "client":"{\"of\":\"foam.nanos.crunch.UserCapabilityJunction\", \"remoteListenerSupport\": false}"
})

// transaction history of invoiceDAO
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "detailedInvoiceDAO",
  "documentation": "Wrapper on invoiceDAO to populate invoice transactionHistory on DAO.find()",
  "authNotes": "No need for authorize and permissioned because invoiceDAO already has them",
  "lazy": false,
  "serve": true,
  "serviceScript":
  """
    dao = new net.nanopay.invoice.DetailedInvoiceDAO.Builder(x)
      .setDelegate(new foam.dao.NullDAO.Builder(x).setOf(net.nanopay.invoice.model.Invoice.getOwnClassInfo()).build())
      .build();
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(net.nanopay.invoice.model.Invoice.getOwnClassInfo())
      .setInnerDAO(x.get("invoiceDAO"))
      .setDecorator(dao)
      .setAuthorize(false)
      .setPm(true)
      .setPermissioned(false)
      .setEnableInterfaceDecorators(false)
      .setRuler(false)
      .build();
  """,
  "client":
  """
    {
      "of": "net.nanopay.invoice.model.Invoice",
      "remoteListenerSupport": false,
      "cache": false
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "permittedCountryDAO",
  "serve": true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setInnerDAO(x.get("countryDAO"))
      .setAuthorize(true)
      .setOf(foam.nanos.auth.Country.getOwnClassInfo())
      .build();
  """,
  "client":
  """
  {
    "of":"foam.nanos.auth.Country",
    "cache": false
  }
  """
})
