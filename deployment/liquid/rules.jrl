// disable rules
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Pending FX Rate Transactions"})                   // Kotak
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Getting FX Rate for Transactions"})               // Kotak
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"The Jackie Rule1"})                               // Compliance
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"The Jackie Rule2"})                               // Compliance
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"DebtDestroyer"})                                  // Ablii FastPay
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"SwitchToSlowPay"})                                // Ablii FastPay
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Prune Cico Approval Cleanup"})                    // Compliance
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"ReverseCashIn"})                                  // Tx Processing
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"ReverseCashOut"})                                 // Tx Processing
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Quote Transaction Based on Status"})              // Tx Processing
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Ablii Completed Transaction Notification"})       // Ablii Transaction
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Ablii FX Completed Transaction Notification"})    // Ablii Transaction
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Declined Compliance Transaction Notification"})   // Compliance
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Compliance Transaction Planner"})                 // Tx Planning / Compliance
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"AFEX Beneficiary Compliance Transaction"})        // AFEX
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Transaction Final Compliance Rule"})              // Compliance
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"IdentityMind transfer transaction"})              // Compliance
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Clear transaction approval requests"})            // Compliance
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Compliance transaction approval"})                // Compliance
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Create Expedite Aproval Request"})                // Compliance
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Ablii Completed Transaction Notification")
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Ablii FX Completed Transaction Notification")
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Declined Cash In Transaction Notification")
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Declined Verification Transaction Notification")
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Declined Compliance Transaction Notification")
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Send email when the micro deposit succeeded")
p({"class":"foam.nanos.ruler.Rule","enabled":false,"id":"Send notification to account owner when account has been added."})

// enable rules
p({"class":"foam.nanos.ruler.Rule","enabled":true,"id":"Proper Status after Pause, Rule"})                 // Parent Pending Complete
p({"class":"foam.nanos.ruler.Rule","enabled":true,"id":"Set Approved By"})                                 // Invoice rule
p({"class":"foam.nanos.ruler.Rule","enabled":true,"id":"Modify Cico Status"})                              // Compliance
p({"class":"foam.nanos.ruler.Rule","enabled":true,"id":"Create Expedite Aproval Request"})                 // Compliance
p({"class":"foam.nanos.ruler.Rule","enabled":true,"id":"Account Liquification"})                           // Liquidity Settings
p({"class":"foam.nanos.ruler.Rule","enabled":true,"id":"observeStatus"})                                   // Tx Processing
p({"class":"foam.nanos.ruler.Rule","enabled":true,"id":"Declined Cash In Transaction Notification"})       // Tx Processing
p({"class":"foam.nanos.ruler.Rule","enabled":true,"id":"Declined Verification Transaction Notification"})  // Tx Processing
p({"class":"foam.nanos.ruler.Rule","enabled":true,"id":"statusHistory Update Rule"})                       // Tx Processing
p({"class":"foam.nanos.ruler.Rule","enabled":true,"id":"Reset transaction lastModified/By properties"})    // Tx Processing
p({"class":"foam.nanos.ruler.Rule","enabled":true,"id":"Estimate Transaction completionDate"})             // Tx Processing
p({"class":"foam.nanos.ruler.Rule","enabled":true,"id":"Generic Security CICO planner")
p({"class":"foam.nanos.ruler.Rule","enabled":true,"id":"FOP Transaction Planner")
p({"class":"foam.nanos.ruler.Rule","enabled":true,"id":"DVP Transaction Planner")
p({"class":"foam.nanos.ruler.Rule","enabled":true,"id":"Bucket Transaction Planner")

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Create UserCapabilityJunction on CapabilityRequest Approval",
  "priority": 100,
  "enabled":true,
  "ruleGroup": "liquid",
  "documentation": "Create ucj on capabilityrequest approval",
  "daoKey": "capabilityRequestDAO",
  "operation": 3,
  "after": true,
  "predicate":{
    "class":"net.nanopay.liquidity.crunch.ApprovedCapabilityRequestPredicate",
  },
  "action" : {
    "class": "net.nanopay.liquidity.crunch.CreateUserCapabilityJunctionOnRequestApproval"
  },
  "saveHistory": true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Logout Users on CapabilityRequest Approval",
  "priority": 110,
  "enabled":true,
  "ruleGroup": "liquid",
  "documentation": "Logout users on capabilityrequest approval",
  "daoKey": "capabilityRequestDAO",
  "operation": 3,
  "after": true,
  "predicate":{
    "class":"net.nanopay.liquidity.crunch.ApprovedCapabilityRequestPredicate",
  },
  "action" : {
    "class": "net.nanopay.liquidity.ruler.LogoutUserOnAssignmentAction"
  },
  "saveHistory": true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Logout Users on Capability Update",
  "priority": 110,
  "enabled":true,
  "ruleGroup": "liquid",
  "documentation": "Logout users on capability update",
  "daoKey": "localCapabilityDAO",
  "operation": 1,
  "after": true,
  "predicate": {
    "class": "foam.mlang.predicate.And",
    "args":[
      {
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"lifecycleState",
        "propValue":{
          "class":"foam.nanos.auth.LifecycleState",
          "ordinal":1
        }
      },
      {
        "class": "foam.mlang.predicate.Not",
        "arg1": {
          "class": "foam.nanos.ruler.predicate.NewEqOld"
        }
      }
    ]
  },
  "action" : {
    "class": "net.nanopay.liquidity.ruler.LogoutUserOnCapabilityUpdateAction"
  },
  "saveHistory": true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Update account-based ucj data on account create",
  "priority": 100,
  "enabled":true,
  "ruleGroup": "liquid",
  "documentation": "set up newly created account in each ucj where the parent account is in the map and is cascading",
  "daoKey": "accountDAO",
  "operation": 0,
  "after": true,
  "action" : {
    "class": "net.nanopay.liquidity.crunch.AddAccountToUserCapabilityJunctionOnCreate"
  },
  "saveHistory": true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Remove junctions on user removal",
  "priority": 100,
  "enabled":true,
  "ruleGroup": "liquid",
  "documentation": "remove junctions on user removal",
  "daoKey": "localUserDAO",
  "operation": 1, 
  "after": true,
  "predicate":{
    "class":"foam.nanos.ruler.predicate.PropertyEQValue",
    "propName":"lifecycleState",
    "propValue":{
      "class":"foam.nanos.auth.LifecycleState",
      "ordinal":3
    }
  },
  "action":{ "class":"foam.nanos.crunch.RemoveJunctionsOnUserRemoval" },
  "saveHistory": true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Remove junctions on capability removal",
  "priority": 100,
  "enabled":true,
  "ruleGroup": "liquid",
  "documentation": "remove junctions on capability removal",
  "daoKey": "localCapabilityDAO",
  "operation": 1, 
  "after": true,
  "predicate":{
    "class":"foam.nanos.ruler.predicate.PropertyEQValue",
    "propName":"lifecycleState",
    "propValue":{
      "class":"foam.nanos.auth.LifecycleState",
      "ordinal":3
    }
  },
  "action" : { "class": "net.nanopay.liquidity.crunch.RemoveJunctionsOnCapabilityRemoval" },
  "saveHistory": true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Remove account-based ucj obj if no accounts granted",
  "priority": 100,
  "enabled":true,
  "ruleGroup": "liquid",
  "documentation": "remove ucj if all accounts have been revoked",
  "daoKey": "userCapabilityJunctionDAO",
  "operation": 3,
  "after": true,
  "action" : {
    "class": "net.nanopay.liquidity.crunch.RemoveAccountBasedUCJIfAccountsEmpty"
  },
  "saveHistory": true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Set transaction lifecycleState to PENDING",
  "documentation":"Set transaction lifecycle state to PENDING. Used in liquid to force transactions going through approval.",
  "ruleGroup":"(Default)",
  "priority":1000,
  "daoKey":"transactionDAO",
  "operation":0,
  "after":false,
  "predicate":{
    "class":"foam.mlang.predicate.And",
    "args":[
      {
        "class":"foam.mlang.predicate.Not",
        "arg1":{
          "class":"net.nanopay.liquidity.ruler.IsSystemOrAdminUser"
        }
      },
      {
        "class":"foam.nanos.ruler.predicate.PropertyEQValue",
        "propName":"referenceNumber",
        "propValue":{
          "class":"foam.mlang.Constant",
          "value":"Manual Entry"
        }
      }
    ]
  },
  "action":{
    "class":"foam.nanos.ruler.action.ChangePropertyAction",
    "propName":"lifecycleState",
    "valueExpr":{
      "class":"foam.mlang.Constant",
      "value":{
        "class":"foam.nanos.auth.LifecycleState",
        "ordinal":0
      }
    }
  },
  "enabled":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"L1 approval for all transactions",
  "documentation":"Add L1 approval to all liquid transactions created.",
  "ruleGroup":"txapprovals",
  "priority":100,
  "daoKey":"transactionDAO",
  "operation":3,
  "after":true,
  "predicate":{
    "class":"foam.nanos.ruler.predicate.PropertyEQValue",
    "propName":"lifecycleState",
    "propValue":{
      "class":"foam.nanos.auth.LifecycleState",
      "ordinal":0
    }
  },
  "asyncAction":{
    "class":"net.nanopay.liquidity.ruler.ApprovalRuleActionOnCreate",
    "approverLevel": 1
  },
  "enabled":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Final transaction approval",
  "ruleGroup":"txapprovals",
  "daoKey":"transactionDAO",
  "operation":1,
  "after":true,
  "predicate":{
    "class":"foam.nanos.ruler.predicate.PropertyEQValue",
    "propName":"lifecycleState",
    "propValue":{
      "class":"foam.nanos.auth.LifecycleState",
      "ordinal":0
    }
  },
  "asyncAction":{
    "class":"net.nanopay.liquidity.ruler.ApprovalRuleActionOnCreate",
    "isFinal":true
  },
  "enabled":true
})

// Multi-level (L2) transaction approval rules
p({
  "class": "net.nanopay.liquidity.tx.L2TransactionApprovalRule",
  "id": "L2 approval for transaction >= $85,000 USD - globalAccountTemplate",
  "useAccountTemplate": true,
  "accountTemplate": 2,
  "denomination": "USD",
  "startAmount": 8500000,
  "enabled": false,
  "lifecycleState": 1
})
p({
  "class": "net.nanopay.liquidity.tx.L2TransactionApprovalRule",
  "id": "L2 approval for transaction >= $50,000 - GS06 CASH (USD)",
  "sourceAccount": 1449,
  "startAmount": 5000000,
  "denomination": "USD",
  "enabled": false,
  "lifecycleState": 1
})

// Add approval request rules
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"approvalRequestDAO Approve or Reject on Update",
  "priority":110,
  "ruleGroup":"approvables",
  "documentation":"Handle an approved or rejected approval request that relates to the approvableDAO",
  "daoKey":"approvalRequestDAO",
  "operation":1,
  "after":true,
  "predicate":{
    "class":"net.nanopay.liquidity.approvalRequest.ApprovableApprovalRequestsPredicate"
  },
  "action":{
    "class":"net.nanopay.liquidity.approvalRequest.ApprovableApprovalRequestsRule"
  },
  "enabled":true,
  "saveHistory":true
})
p({
  "class":"foam.nanos.ruler.Rule",
  "id":"approvableDAO Approve or Reject",
  "priority":110,
  "ruleGroup":"approvables",
  "documentation":"Handle an approved or rejected update request",
  "daoKey":"approvableDAO",
  "operation":1,
  "after":true,
  "predicate":{
    "class":"net.nanopay.liquidity.approvalRequest.FulfilledApprovablePredicate",
  },
  "action":{
    "class":"net.nanopay.liquidity.approvalRequest.FulfilledApprovableRule"
  },
  "enabled":true,
  "saveHistory":true
})

// Transaction limit business rule example for 200,000.00 EUR
p({
  "class":"net.nanopay.liquidity.tx.TxLimitRule",
  "id":"GS09 Securities €200,000.00 EUR Account Limit",
  "applyLimitTo":1,
  "accountToLimit":1613,
  "limit":20000000,
  "denomination":"EUR",
  "currentLimits":{},
  "created":"2019-11-30T12:30:00.000Z",
  "createdBy":8006,
  "lastModified":"2019-11-30T12:30:00.000Z",
  "lastModifiedBy":8006,
  "enabled": false,
  "lifecycleState":1
})

// Generic business rule example
p({
  "class":"net.nanopay.liquidity.tx.GenericBusinessRule",
  "id":"GS10 Account Tx Notification Rule",
  "description":"Sample Goldman Business Rule",
  "sourcePredicate":{
    "class":"foam.mlang.predicate.Eq",
    "arg1":{
      "class":"foam.mlang.expr.PropertyExpr",
      "of":"net.nanopay.account.Account",
      "property":{
        "class":"__Property__",
        "forClass_":"net.nanopay.account.Account",
        "name":"name"
      }
    },
    "arg2":{
      "class":"foam.mlang.Constant",
      "value":"GS10 Shadow Account"
    }
  },
  "destinationPredicate":{
    "class":"foam.mlang.predicate.Eq",
    "arg1":{
      "class":"foam.mlang.expr.PropertyExpr",
      "of":"foam.nanos.auth.User",
      "property":{
        "class":"__Property__",
        "forClass_":"foam.nanos.auth.User",
        "name":"email"
      }
    },
    "arg2":{
      "class":"foam.mlang.Constant",
      "value":"liquiddev@nanopay.net"
    }
  },
  "businessRuleAction":2,
  "enabled": false,
  "lifecycleState":1
})

// Automatically verify emails for new Liquid users. Due to change once Goldman
// gets back to us with requirements.
p({
  "class": "foam.nanos.ruler.Rule",
  "id": "Liquid Auto-Verify Email Rule",
  "daoKey": "localUserDAO",
  "predicate": {
    "class": "foam.mlang.predicate.Eq",
    "arg1": {
      "class": "foam.mlang.expr.PropertyExpr",
      "of": "foam.nanos.auth.User",
      "property": {
        "class": "__Property__",
        "forClass_": "foam.nanos.auth.User",
        "name": "group"
      }
    },
    "arg2": {
      "class": "foam.mlang.Constant",
      "value": "liquidBasic"
    }
  },
  "action": {
    "class": "net.nanopay.admin.SkipUserEmailVerification"
  },
  "ruleGroup": "UserCreate"
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Remove accounts from ucjdata on account",
  "priority": 100,
  "enabled":true,
  "ruleGroup": "liquid",
  "documentation": "Remove accounts from ucjdata on account removal",
  "daoKey": "localAccountDAO",
  "operation": 2, 
  "after": true,
  "action" : { "class": "net.nanopay.liquidity.crunch.RemoveAccountFromUcjDataOnAccountRemoval" },
  "saveHistory": true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"add account to ucj of creater with non-cascading on parent",
  "priority": 100,
  "enabled":true,
  "ruleGroup": "liquid",
  "documentation": "add account to ucj of creater with non-cascading on parent",
  "daoKey": "localAccountDAO",
  "operation": 1, 
  "after": true,
  "action" : { "class": "net.nanopay.liquidity.crunch.AddChildAccountToMakerOnAccountApproval" },
  "saveHistory": true
})

p({
  "class":"foam.nanos.ruler.Rule",
  "id":"Remove Deleted Account From AccountTemplate",
  "priority": 100,
  "enabled":true,
  "ruleGroup": "liquid",
  "documentation": "On account delete, remove the reference of the account from any account templates/ any capabilityrequest using template",
  "daoKey": "localAccountDAO",
  "operation": 2, 
  "after": true,
  "action" : { "class": "net.nanopay.liquidity.crunch.RemoveDeletedAccountFromAccountTemplate" },
  "saveHistory": true
})

