p({"class":"foam.nanos.test.Test", "id":"Create Business Tests", "enabled":true, "description":"Tests the functionality around creating a business", "server":true, "code":"// Create Business Tests\n// Tests the functionality around creating a business\n\ntry {\n\n  import foam.nanos.auth.User;\n  import foam.nanos.auth.Permission;\n  import foam.nanos.auth.AuthService;\n  import foam.dao.DAO;\n  import foam.nanos.auth.Group;\n  import net.nanopay.model.Business;\n  import foam.mlang.predicate.ContainsIC;\n  import foam.mlang.Constant;\n  import foam.util.SafetyUtil;\n  import foam.nanos.auth.UserBusinessJunction;\n\n  businessDAO = (DAO) x.get(\"businessDAO\");\n  userDAO = (DAO) x.get(\"userDAO\");\n  groupDAO = (DAO) x.get(\"groupDAO\");\n  auth = (AuthService) x.get(\"auth\");\n  user = (User) x.get(\"user\");\n  userBusinessJunctionDAO = (DAO) x.get(\"userBusinessJunctionDAO\");\n\n  // Remove the test user if it exists.\n  userDAO.where(foam.mlang.MLang.EQ(User.EMAIL, \"foo@example.com\")).removeAll();\n\n  toPut = new Business();\n\n  try {\n    businessDAO.put(toPut);\n    test(false, \"Business name is required.\");\n  } catch (IllegalStateException e) {\n    test(e.getMessage().equals(\"Business name cannot be empty.\"), \"Business name is required.\");\n  } catch (Throwable t) {\n    t.printStackTrace();\n    test(false, \"\");\n  }\n\n  toPut.setBusinessName(\"FooBar Corporation\");\n\n  // Clean up existing data to make sure the tests are run in a known state.\n  businessDAO.where(foam.mlang.MLang.EQ(Business.BUSINESS_NAME, \"FooBar Corporation\")).removeAll();\n  groupPredicate = new ContainsIC();\n  groupPredicate.setArg1(Group.ID);\n  groupPredicate.setArg2(new Constant(\"foobarcorporation\"));\n  groupDAO.where(groupPredicate).removeAll();\n  userBusinessJunctionDAO.removeAll();\n\n  business = (Business) businessDAO.put(toPut);\n\n  test(business != null, \"Putting a user to businessDAO creates a new Business.\");\n\n  businessPermissionId = \"foobarcorporation\" + Long.toString(business.getId());\n  adminGroupName = businessPermissionId + \".admin\";\n  adminGroup = (Group) groupDAO.find(adminGroupName);\n\n  test(adminGroup != null, \"When creating a business, 3 groups are also created that are copied from the 3 template groups.\");\n\n  hasAddBusinessPermission = false;\n  hasGroupUpdatePermission = false;\n  addBusinessPermission = \"business.add.\" + businessPermissionId + \".*\";\n  updateGroupPermission = \"group.update.\" + businessPermissionId + \".*\";\n\n  for (Permission permission: adminGroup.getPermissions()) {\n    if (SafetyUtil.equals(permission.getId(), addBusinessPermission)) {\n      hasAddBusinessPermission = true;\n    } else if (SafetyUtil.equals(permission.getId(), updateGroupPermission)) {\n      hasGroupUpdatePermission = true;\n    }\n  }\n\n  test(hasAddBusinessPermission, \"Company admin group has permission to add other users to business.\");\n  test(hasGroupUpdatePermission, \"Company admin group has permission to update the groups associated with the business.\");\n\n  businessGroups = business.getGroups(x).select().getArray();\n  test(businessGroups.size() == 3, \"There is a relationship between the business and the groups for it.\");\n\n  businesses = user.getBusinesses(x).getJunctionDAO().select().getArray();\n  test(businesses.size() == 1, \"When the business and user are created, create a relationship between the user and the business.\");\n  bGroup = ((UserBusinessJunction) businesses.get(0)).getGroup();\n  test(bGroup.equals(businessPermissionId + \".admin\"), \"User who created the group was put into the admin group for that business (on the junction, not their actual group).\");\n} catch (Throwable t) {\n  t.printStackTrace();\n  test(false, \"An unexpected error was thrown.\");\n}"})
