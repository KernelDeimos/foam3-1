p({"class":"net.nanopay.tx.model.TransactionParseTest","id":"Transaction parsing test","description":"Tests parsing transaction strings"})
p({
  "class": "foam.nanos.test.Test",
  "id": "Business_compliancy_transaction_validation_tests",
  "description": "Tests creating transactions as business user to check compliancy status.",
  "code": """
localUserDAO = x.get("localUserDAO");
// Create business users.
localUserDAO.where(foam.mlang.MLang.EQ(foam.nanos.auth.User.EMAIL, "businesscheckcompliance1337@nanopay.net")).removeAll();
payer = new net.nanopay.model.Business();
payer.setEmail("businesscheckcompliance1337@nanopay.net");
payer.setEmailVerified(true);
payer.setBusinessName("testPayerBusinessName");
payer.setCompliance(net.nanopay.admin.model.ComplianceStatus.REQUESTED);
payer = localUserDAO.put_(x, payer).fclone();

localUserDAO.where(foam.mlang.MLang.EQ(foam.nanos.auth.User.EMAIL, "businesscheckcompliance1338@nanopay.net")).removeAll();
payee = new net.nanopay.model.Business();
payee.setEmail("businesscheckcompliance1338@nanopay.net");
payee.setEmailVerified(true);
payee.setBusinessName("testPayeeBusinessName");
payee.setCompliance(net.nanopay.admin.model.ComplianceStatus.NOTREQUESTED);
payee = localUserDAO.put_(x, payee).fclone();

txn = new net.nanopay.tx.model.Transaction();
txn.setPayerId(payer.getId());
txn.setPayeeId(payee.getId());
txn.setAmount(100);
quote = new net.nanopay.tx.TransactionQuote.Builder(x).setRequestTransaction(txn).build();
quote = x.get("localTransactionQuotePlanDAO").put_(x, quote);
txn = quote.getPlan();

// Test 1 - Sender needs to pass business compliance
threw = false;
message = "";
try {
  txn.validate(x);
} catch (RuntimeException e) {
  message = e.getMessage();
  threw = true;
}
test( threw && message.equals("Sender needs to pass business compliance."), "Unable to put if sender business user hasn't passed compliance.");

// Test 2 - Sender passes compliance
payer.setCompliance(net.nanopay.admin.model.ComplianceStatus.PASSED);
payer = localUserDAO.put_(x, payer).fclone();
try {
  txn.validate(x);
  test(true, "Able to put if sender business user has passed compliance.");
} catch (RuntimeException e) {
  test(false, e.getMessage());
}

// Test 3 - Receiver failed compliance
payee.setCompliance(net.nanopay.admin.model.ComplianceStatus.FAILED);
payee = localUserDAO.put_(x, payee).fclone();
threw = false;
message = "";
try {
  txn.validate(x);
} catch (RuntimeException e) {
  message = e.getMessage();
  threw = true;
}
test( threw && message.equals("Receiver needs to pass compliance."), "Unable to put if receiver user failed compliance.");
  """
})
